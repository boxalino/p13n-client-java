/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-25")
public class PropertyQuery implements org.apache.thrift.TBase<PropertyQuery, PropertyQuery._Fields>, java.io.Serializable, Cloneable, Comparable<PropertyQuery> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PropertyQuery");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField HIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("hitCount", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField EVALUATE_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("evaluateTotal", org.apache.thrift.protocol.TType.BOOL, (short)31);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PropertyQueryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PropertyQueryTupleSchemeFactory();

  public java.lang.String name; // required
  public int hitCount; // required
  public boolean evaluateTotal; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)11, "name"),
    HIT_COUNT((short)21, "hitCount"),
    EVALUATE_TOTAL((short)31, "evaluateTotal");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 11: // NAME
          return NAME;
        case 21: // HIT_COUNT
          return HIT_COUNT;
        case 31: // EVALUATE_TOTAL
          return EVALUATE_TOTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HITCOUNT_ISSET_ID = 0;
  private static final int __EVALUATETOTAL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("hitCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EVALUATE_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("evaluateTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PropertyQuery.class, metaDataMap);
  }

  public PropertyQuery() {
  }

  public PropertyQuery(
    java.lang.String name,
    int hitCount,
    boolean evaluateTotal)
  {
    this();
    this.name = name;
    this.hitCount = hitCount;
    setHitCountIsSet(true);
    this.evaluateTotal = evaluateTotal;
    setEvaluateTotalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PropertyQuery(PropertyQuery other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.hitCount = other.hitCount;
    this.evaluateTotal = other.evaluateTotal;
  }

  public PropertyQuery deepCopy() {
    return new PropertyQuery(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setHitCountIsSet(false);
    this.hitCount = 0;
    setEvaluateTotalIsSet(false);
    this.evaluateTotal = false;
  }

  public java.lang.String getName() {
    return this.name;
  }

  public PropertyQuery setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getHitCount() {
    return this.hitCount;
  }

  public PropertyQuery setHitCount(int hitCount) {
    this.hitCount = hitCount;
    setHitCountIsSet(true);
    return this;
  }

  public void unsetHitCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HITCOUNT_ISSET_ID);
  }

  /** Returns true if field hitCount is set (has been assigned a value) and false otherwise */
  public boolean isSetHitCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HITCOUNT_ISSET_ID);
  }

  public void setHitCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HITCOUNT_ISSET_ID, value);
  }

  public boolean isEvaluateTotal() {
    return this.evaluateTotal;
  }

  public PropertyQuery setEvaluateTotal(boolean evaluateTotal) {
    this.evaluateTotal = evaluateTotal;
    setEvaluateTotalIsSet(true);
    return this;
  }

  public void unsetEvaluateTotal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EVALUATETOTAL_ISSET_ID);
  }

  /** Returns true if field evaluateTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetEvaluateTotal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EVALUATETOTAL_ISSET_ID);
  }

  public void setEvaluateTotalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EVALUATETOTAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case HIT_COUNT:
      if (value == null) {
        unsetHitCount();
      } else {
        setHitCount((java.lang.Integer)value);
      }
      break;

    case EVALUATE_TOTAL:
      if (value == null) {
        unsetEvaluateTotal();
      } else {
        setEvaluateTotal((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case HIT_COUNT:
      return getHitCount();

    case EVALUATE_TOTAL:
      return isEvaluateTotal();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case HIT_COUNT:
      return isSetHitCount();
    case EVALUATE_TOTAL:
      return isSetEvaluateTotal();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof PropertyQuery)
      return this.equals((PropertyQuery)that);
    return false;
  }

  public boolean equals(PropertyQuery that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_hitCount = true;
    boolean that_present_hitCount = true;
    if (this_present_hitCount || that_present_hitCount) {
      if (!(this_present_hitCount && that_present_hitCount))
        return false;
      if (this.hitCount != that.hitCount)
        return false;
    }

    boolean this_present_evaluateTotal = true;
    boolean that_present_evaluateTotal = true;
    if (this_present_evaluateTotal || that_present_evaluateTotal) {
      if (!(this_present_evaluateTotal && that_present_evaluateTotal))
        return false;
      if (this.evaluateTotal != that.evaluateTotal)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + hitCount;

    hashCode = hashCode * 8191 + ((evaluateTotal) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(PropertyQuery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHitCount()).compareTo(other.isSetHitCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHitCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hitCount, other.hitCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEvaluateTotal()).compareTo(other.isSetEvaluateTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvaluateTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evaluateTotal, other.evaluateTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PropertyQuery(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hitCount:");
    sb.append(this.hitCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("evaluateTotal:");
    sb.append(this.evaluateTotal);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PropertyQueryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PropertyQueryStandardScheme getScheme() {
      return new PropertyQueryStandardScheme();
    }
  }

  private static class PropertyQueryStandardScheme extends org.apache.thrift.scheme.StandardScheme<PropertyQuery> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PropertyQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 11: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // HIT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hitCount = iprot.readI32();
              struct.setHitCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // EVALUATE_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.evaluateTotal = iprot.readBool();
              struct.setEvaluateTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PropertyQuery struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HIT_COUNT_FIELD_DESC);
      oprot.writeI32(struct.hitCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EVALUATE_TOTAL_FIELD_DESC);
      oprot.writeBool(struct.evaluateTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PropertyQueryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PropertyQueryTupleScheme getScheme() {
      return new PropertyQueryTupleScheme();
    }
  }

  private static class PropertyQueryTupleScheme extends org.apache.thrift.scheme.TupleScheme<PropertyQuery> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PropertyQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetHitCount()) {
        optionals.set(1);
      }
      if (struct.isSetEvaluateTotal()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetHitCount()) {
        oprot.writeI32(struct.hitCount);
      }
      if (struct.isSetEvaluateTotal()) {
        oprot.writeBool(struct.evaluateTotal);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PropertyQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hitCount = iprot.readI32();
        struct.setHitCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.evaluateTotal = iprot.readBool();
        struct.setEvaluateTotalIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

