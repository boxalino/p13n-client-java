/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * <dl>
 * <dt>variantId</dt>
 * <dd>id of the personalized variant</dd>
 * 
 * <dt>scenarioId</dt>
 * <dd>scenario identificator used to produce recommendation result or search
 * result personalization</dd>
 * 
 * <dt>searchResult</dt>
 * <dd>result of the search request for recommendations and search requests</dd>
 * 
 * <dt>searchResultTitle</dt>
 * <dd>recommendation's result title localized in language requested in
 * corresponding SimpleSearchQuery</dd>
 * 
 * <dt>searchRelaxation</dt>
 * <dd>When the service considers queryText invalid, it will evaluate and return
 * relaxations if it is requested in corresponding ChoiceInquiry and if
 * relaxations could be found.</dd>
 * <dd>Note that original query still could yield some results; it is up to the
 * client to decide whether searchRelaxations should be used (with displaying
 * appropriate message) or not.</dd>
 * </dl>
 */
public class Variant implements org.apache.thrift.TBase<Variant, Variant._Fields>, java.io.Serializable, Cloneable, Comparable<Variant> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Variant");

  private static final org.apache.thrift.protocol.TField VARIANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("variantId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SCENARIO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("scenarioId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SEARCH_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("searchResult", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SEARCH_RESULT_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("searchResultTitle", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SEARCH_RELAXATION_FIELD_DESC = new org.apache.thrift.protocol.TField("searchRelaxation", org.apache.thrift.protocol.TType.STRUCT, (short)50);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VariantStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VariantTupleSchemeFactory());
  }

  public String variantId; // required
  public String scenarioId; // required
  public SearchResult searchResult; // required
  public String searchResultTitle; // required
  public SearchRelaxation searchRelaxation; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VARIANT_ID((short)1, "variantId"),
    SCENARIO_ID((short)2, "scenarioId"),
    SEARCH_RESULT((short)3, "searchResult"),
    SEARCH_RESULT_TITLE((short)4, "searchResultTitle"),
    SEARCH_RELAXATION((short)50, "searchRelaxation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VARIANT_ID
          return VARIANT_ID;
        case 2: // SCENARIO_ID
          return SCENARIO_ID;
        case 3: // SEARCH_RESULT
          return SEARCH_RESULT;
        case 4: // SEARCH_RESULT_TITLE
          return SEARCH_RESULT_TITLE;
        case 50: // SEARCH_RELAXATION
          return SEARCH_RELAXATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VARIANT_ID, new org.apache.thrift.meta_data.FieldMetaData("variantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCENARIO_ID, new org.apache.thrift.meta_data.FieldMetaData("scenarioId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEARCH_RESULT, new org.apache.thrift.meta_data.FieldMetaData("searchResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchResult.class)));
    tmpMap.put(_Fields.SEARCH_RESULT_TITLE, new org.apache.thrift.meta_data.FieldMetaData("searchResultTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEARCH_RELAXATION, new org.apache.thrift.meta_data.FieldMetaData("searchRelaxation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchRelaxation.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Variant.class, metaDataMap);
  }

  public Variant() {
  }

  public Variant(
    String variantId,
    String scenarioId,
    SearchResult searchResult,
    String searchResultTitle,
    SearchRelaxation searchRelaxation)
  {
    this();
    this.variantId = variantId;
    this.scenarioId = scenarioId;
    this.searchResult = searchResult;
    this.searchResultTitle = searchResultTitle;
    this.searchRelaxation = searchRelaxation;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Variant(Variant other) {
    if (other.isSetVariantId()) {
      this.variantId = other.variantId;
    }
    if (other.isSetScenarioId()) {
      this.scenarioId = other.scenarioId;
    }
    if (other.isSetSearchResult()) {
      this.searchResult = new SearchResult(other.searchResult);
    }
    if (other.isSetSearchResultTitle()) {
      this.searchResultTitle = other.searchResultTitle;
    }
    if (other.isSetSearchRelaxation()) {
      this.searchRelaxation = new SearchRelaxation(other.searchRelaxation);
    }
  }

  public Variant deepCopy() {
    return new Variant(this);
  }

  @Override
  public void clear() {
    this.variantId = null;
    this.scenarioId = null;
    this.searchResult = null;
    this.searchResultTitle = null;
    this.searchRelaxation = null;
  }

  public String getVariantId() {
    return this.variantId;
  }

  public Variant setVariantId(String variantId) {
    this.variantId = variantId;
    return this;
  }

  public void unsetVariantId() {
    this.variantId = null;
  }

  /** Returns true if field variantId is set (has been assigned a value) and false otherwise */
  public boolean isSetVariantId() {
    return this.variantId != null;
  }

  public void setVariantIdIsSet(boolean value) {
    if (!value) {
      this.variantId = null;
    }
  }

  public String getScenarioId() {
    return this.scenarioId;
  }

  public Variant setScenarioId(String scenarioId) {
    this.scenarioId = scenarioId;
    return this;
  }

  public void unsetScenarioId() {
    this.scenarioId = null;
  }

  /** Returns true if field scenarioId is set (has been assigned a value) and false otherwise */
  public boolean isSetScenarioId() {
    return this.scenarioId != null;
  }

  public void setScenarioIdIsSet(boolean value) {
    if (!value) {
      this.scenarioId = null;
    }
  }

  public SearchResult getSearchResult() {
    return this.searchResult;
  }

  public Variant setSearchResult(SearchResult searchResult) {
    this.searchResult = searchResult;
    return this;
  }

  public void unsetSearchResult() {
    this.searchResult = null;
  }

  /** Returns true if field searchResult is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchResult() {
    return this.searchResult != null;
  }

  public void setSearchResultIsSet(boolean value) {
    if (!value) {
      this.searchResult = null;
    }
  }

  public String getSearchResultTitle() {
    return this.searchResultTitle;
  }

  public Variant setSearchResultTitle(String searchResultTitle) {
    this.searchResultTitle = searchResultTitle;
    return this;
  }

  public void unsetSearchResultTitle() {
    this.searchResultTitle = null;
  }

  /** Returns true if field searchResultTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchResultTitle() {
    return this.searchResultTitle != null;
  }

  public void setSearchResultTitleIsSet(boolean value) {
    if (!value) {
      this.searchResultTitle = null;
    }
  }

  public SearchRelaxation getSearchRelaxation() {
    return this.searchRelaxation;
  }

  public Variant setSearchRelaxation(SearchRelaxation searchRelaxation) {
    this.searchRelaxation = searchRelaxation;
    return this;
  }

  public void unsetSearchRelaxation() {
    this.searchRelaxation = null;
  }

  /** Returns true if field searchRelaxation is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchRelaxation() {
    return this.searchRelaxation != null;
  }

  public void setSearchRelaxationIsSet(boolean value) {
    if (!value) {
      this.searchRelaxation = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VARIANT_ID:
      if (value == null) {
        unsetVariantId();
      } else {
        setVariantId((String)value);
      }
      break;

    case SCENARIO_ID:
      if (value == null) {
        unsetScenarioId();
      } else {
        setScenarioId((String)value);
      }
      break;

    case SEARCH_RESULT:
      if (value == null) {
        unsetSearchResult();
      } else {
        setSearchResult((SearchResult)value);
      }
      break;

    case SEARCH_RESULT_TITLE:
      if (value == null) {
        unsetSearchResultTitle();
      } else {
        setSearchResultTitle((String)value);
      }
      break;

    case SEARCH_RELAXATION:
      if (value == null) {
        unsetSearchRelaxation();
      } else {
        setSearchRelaxation((SearchRelaxation)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VARIANT_ID:
      return getVariantId();

    case SCENARIO_ID:
      return getScenarioId();

    case SEARCH_RESULT:
      return getSearchResult();

    case SEARCH_RESULT_TITLE:
      return getSearchResultTitle();

    case SEARCH_RELAXATION:
      return getSearchRelaxation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VARIANT_ID:
      return isSetVariantId();
    case SCENARIO_ID:
      return isSetScenarioId();
    case SEARCH_RESULT:
      return isSetSearchResult();
    case SEARCH_RESULT_TITLE:
      return isSetSearchResultTitle();
    case SEARCH_RELAXATION:
      return isSetSearchRelaxation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Variant)
      return this.equals((Variant)that);
    return false;
  }

  public boolean equals(Variant that) {
    if (that == null)
      return false;

    boolean this_present_variantId = true && this.isSetVariantId();
    boolean that_present_variantId = true && that.isSetVariantId();
    if (this_present_variantId || that_present_variantId) {
      if (!(this_present_variantId && that_present_variantId))
        return false;
      if (!this.variantId.equals(that.variantId))
        return false;
    }

    boolean this_present_scenarioId = true && this.isSetScenarioId();
    boolean that_present_scenarioId = true && that.isSetScenarioId();
    if (this_present_scenarioId || that_present_scenarioId) {
      if (!(this_present_scenarioId && that_present_scenarioId))
        return false;
      if (!this.scenarioId.equals(that.scenarioId))
        return false;
    }

    boolean this_present_searchResult = true && this.isSetSearchResult();
    boolean that_present_searchResult = true && that.isSetSearchResult();
    if (this_present_searchResult || that_present_searchResult) {
      if (!(this_present_searchResult && that_present_searchResult))
        return false;
      if (!this.searchResult.equals(that.searchResult))
        return false;
    }

    boolean this_present_searchResultTitle = true && this.isSetSearchResultTitle();
    boolean that_present_searchResultTitle = true && that.isSetSearchResultTitle();
    if (this_present_searchResultTitle || that_present_searchResultTitle) {
      if (!(this_present_searchResultTitle && that_present_searchResultTitle))
        return false;
      if (!this.searchResultTitle.equals(that.searchResultTitle))
        return false;
    }

    boolean this_present_searchRelaxation = true && this.isSetSearchRelaxation();
    boolean that_present_searchRelaxation = true && that.isSetSearchRelaxation();
    if (this_present_searchRelaxation || that_present_searchRelaxation) {
      if (!(this_present_searchRelaxation && that_present_searchRelaxation))
        return false;
      if (!this.searchRelaxation.equals(that.searchRelaxation))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Variant other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVariantId()).compareTo(other.isSetVariantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variantId, other.variantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScenarioId()).compareTo(other.isSetScenarioId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScenarioId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scenarioId, other.scenarioId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchResult()).compareTo(other.isSetSearchResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchResult, other.searchResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchResultTitle()).compareTo(other.isSetSearchResultTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchResultTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchResultTitle, other.searchResultTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchRelaxation()).compareTo(other.isSetSearchRelaxation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchRelaxation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchRelaxation, other.searchRelaxation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Variant(");
    boolean first = true;

    sb.append("variantId:");
    if (this.variantId == null) {
      sb.append("null");
    } else {
      sb.append(this.variantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scenarioId:");
    if (this.scenarioId == null) {
      sb.append("null");
    } else {
      sb.append(this.scenarioId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchResult:");
    if (this.searchResult == null) {
      sb.append("null");
    } else {
      sb.append(this.searchResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchResultTitle:");
    if (this.searchResultTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.searchResultTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchRelaxation:");
    if (this.searchRelaxation == null) {
      sb.append("null");
    } else {
      sb.append(this.searchRelaxation);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (searchResult != null) {
      searchResult.validate();
    }
    if (searchRelaxation != null) {
      searchRelaxation.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VariantStandardSchemeFactory implements SchemeFactory {
    public VariantStandardScheme getScheme() {
      return new VariantStandardScheme();
    }
  }

  private static class VariantStandardScheme extends StandardScheme<Variant> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Variant struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VARIANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.variantId = iprot.readString();
              struct.setVariantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCENARIO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scenarioId = iprot.readString();
              struct.setScenarioIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEARCH_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.searchResult = new SearchResult();
              struct.searchResult.read(iprot);
              struct.setSearchResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEARCH_RESULT_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.searchResultTitle = iprot.readString();
              struct.setSearchResultTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // SEARCH_RELAXATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.searchRelaxation = new SearchRelaxation();
              struct.searchRelaxation.read(iprot);
              struct.setSearchRelaxationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Variant struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.variantId != null) {
        oprot.writeFieldBegin(VARIANT_ID_FIELD_DESC);
        oprot.writeString(struct.variantId);
        oprot.writeFieldEnd();
      }
      if (struct.scenarioId != null) {
        oprot.writeFieldBegin(SCENARIO_ID_FIELD_DESC);
        oprot.writeString(struct.scenarioId);
        oprot.writeFieldEnd();
      }
      if (struct.searchResult != null) {
        oprot.writeFieldBegin(SEARCH_RESULT_FIELD_DESC);
        struct.searchResult.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.searchResultTitle != null) {
        oprot.writeFieldBegin(SEARCH_RESULT_TITLE_FIELD_DESC);
        oprot.writeString(struct.searchResultTitle);
        oprot.writeFieldEnd();
      }
      if (struct.searchRelaxation != null) {
        oprot.writeFieldBegin(SEARCH_RELAXATION_FIELD_DESC);
        struct.searchRelaxation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VariantTupleSchemeFactory implements SchemeFactory {
    public VariantTupleScheme getScheme() {
      return new VariantTupleScheme();
    }
  }

  private static class VariantTupleScheme extends TupleScheme<Variant> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Variant struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVariantId()) {
        optionals.set(0);
      }
      if (struct.isSetScenarioId()) {
        optionals.set(1);
      }
      if (struct.isSetSearchResult()) {
        optionals.set(2);
      }
      if (struct.isSetSearchResultTitle()) {
        optionals.set(3);
      }
      if (struct.isSetSearchRelaxation()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetVariantId()) {
        oprot.writeString(struct.variantId);
      }
      if (struct.isSetScenarioId()) {
        oprot.writeString(struct.scenarioId);
      }
      if (struct.isSetSearchResult()) {
        struct.searchResult.write(oprot);
      }
      if (struct.isSetSearchResultTitle()) {
        oprot.writeString(struct.searchResultTitle);
      }
      if (struct.isSetSearchRelaxation()) {
        struct.searchRelaxation.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Variant struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.variantId = iprot.readString();
        struct.setVariantIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.scenarioId = iprot.readString();
        struct.setScenarioIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.searchResult = new SearchResult();
        struct.searchResult.read(iprot);
        struct.setSearchResultIsSet(true);
      }
      if (incoming.get(3)) {
        struct.searchResultTitle = iprot.readString();
        struct.setSearchResultTitleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.searchRelaxation = new SearchRelaxation();
        struct.searchRelaxation.read(iprot);
        struct.setSearchRelaxationIsSet(true);
      }
    }
  }

}

