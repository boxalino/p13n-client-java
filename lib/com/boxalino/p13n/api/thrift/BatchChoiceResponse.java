/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * <dl>
 * <dt>variants</dt>
 * <dd><b>deprecated</b> - contains non-null value only if
 * corresponding BatchChoiceRequest had only one ChoiceInquiry</dd>
 * 
 * <dt>selectedVariants</dt>
 * <dd>outer list corresponds to profileIds given in BatchChoiceRequest, while
 * inner list corresponds to list of ChoiceInquiries from BatchChoiceRequest</dd>
 * </dl>
 */
public class BatchChoiceResponse implements org.apache.thrift.TBase<BatchChoiceResponse, BatchChoiceResponse._Fields>, java.io.Serializable, Cloneable, Comparable<BatchChoiceResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BatchChoiceResponse");

  private static final org.apache.thrift.protocol.TField VARIANTS_FIELD_DESC = new org.apache.thrift.protocol.TField("variants", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SELECTED_VARIANTS_FIELD_DESC = new org.apache.thrift.protocol.TField("selectedVariants", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BatchChoiceResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BatchChoiceResponseTupleSchemeFactory());
  }

  public List<Variant> variants; // required
  public List<List<Variant>> selectedVariants; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VARIANTS((short)1, "variants"),
    SELECTED_VARIANTS((short)2, "selectedVariants");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VARIANTS
          return VARIANTS;
        case 2: // SELECTED_VARIANTS
          return SELECTED_VARIANTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VARIANTS, new org.apache.thrift.meta_data.FieldMetaData("variants", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Variant.class))));
    tmpMap.put(_Fields.SELECTED_VARIANTS, new org.apache.thrift.meta_data.FieldMetaData("selectedVariants", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Variant.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BatchChoiceResponse.class, metaDataMap);
  }

  public BatchChoiceResponse() {
  }

  public BatchChoiceResponse(
    List<Variant> variants,
    List<List<Variant>> selectedVariants)
  {
    this();
    this.variants = variants;
    this.selectedVariants = selectedVariants;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BatchChoiceResponse(BatchChoiceResponse other) {
    if (other.isSetVariants()) {
      List<Variant> __this__variants = new ArrayList<Variant>(other.variants.size());
      for (Variant other_element : other.variants) {
        __this__variants.add(new Variant(other_element));
      }
      this.variants = __this__variants;
    }
    if (other.isSetSelectedVariants()) {
      List<List<Variant>> __this__selectedVariants = new ArrayList<List<Variant>>(other.selectedVariants.size());
      for (List<Variant> other_element : other.selectedVariants) {
        List<Variant> __this__selectedVariants_copy = new ArrayList<Variant>(other_element.size());
        for (Variant other_element_element : other_element) {
          __this__selectedVariants_copy.add(new Variant(other_element_element));
        }
        __this__selectedVariants.add(__this__selectedVariants_copy);
      }
      this.selectedVariants = __this__selectedVariants;
    }
  }

  public BatchChoiceResponse deepCopy() {
    return new BatchChoiceResponse(this);
  }

  @Override
  public void clear() {
    this.variants = null;
    this.selectedVariants = null;
  }

  public int getVariantsSize() {
    return (this.variants == null) ? 0 : this.variants.size();
  }

  public java.util.Iterator<Variant> getVariantsIterator() {
    return (this.variants == null) ? null : this.variants.iterator();
  }

  public void addToVariants(Variant elem) {
    if (this.variants == null) {
      this.variants = new ArrayList<Variant>();
    }
    this.variants.add(elem);
  }

  public List<Variant> getVariants() {
    return this.variants;
  }

  public BatchChoiceResponse setVariants(List<Variant> variants) {
    this.variants = variants;
    return this;
  }

  public void unsetVariants() {
    this.variants = null;
  }

  /** Returns true if field variants is set (has been assigned a value) and false otherwise */
  public boolean isSetVariants() {
    return this.variants != null;
  }

  public void setVariantsIsSet(boolean value) {
    if (!value) {
      this.variants = null;
    }
  }

  public int getSelectedVariantsSize() {
    return (this.selectedVariants == null) ? 0 : this.selectedVariants.size();
  }

  public java.util.Iterator<List<Variant>> getSelectedVariantsIterator() {
    return (this.selectedVariants == null) ? null : this.selectedVariants.iterator();
  }

  public void addToSelectedVariants(List<Variant> elem) {
    if (this.selectedVariants == null) {
      this.selectedVariants = new ArrayList<List<Variant>>();
    }
    this.selectedVariants.add(elem);
  }

  public List<List<Variant>> getSelectedVariants() {
    return this.selectedVariants;
  }

  public BatchChoiceResponse setSelectedVariants(List<List<Variant>> selectedVariants) {
    this.selectedVariants = selectedVariants;
    return this;
  }

  public void unsetSelectedVariants() {
    this.selectedVariants = null;
  }

  /** Returns true if field selectedVariants is set (has been assigned a value) and false otherwise */
  public boolean isSetSelectedVariants() {
    return this.selectedVariants != null;
  }

  public void setSelectedVariantsIsSet(boolean value) {
    if (!value) {
      this.selectedVariants = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VARIANTS:
      if (value == null) {
        unsetVariants();
      } else {
        setVariants((List<Variant>)value);
      }
      break;

    case SELECTED_VARIANTS:
      if (value == null) {
        unsetSelectedVariants();
      } else {
        setSelectedVariants((List<List<Variant>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VARIANTS:
      return getVariants();

    case SELECTED_VARIANTS:
      return getSelectedVariants();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VARIANTS:
      return isSetVariants();
    case SELECTED_VARIANTS:
      return isSetSelectedVariants();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BatchChoiceResponse)
      return this.equals((BatchChoiceResponse)that);
    return false;
  }

  public boolean equals(BatchChoiceResponse that) {
    if (that == null)
      return false;

    boolean this_present_variants = true && this.isSetVariants();
    boolean that_present_variants = true && that.isSetVariants();
    if (this_present_variants || that_present_variants) {
      if (!(this_present_variants && that_present_variants))
        return false;
      if (!this.variants.equals(that.variants))
        return false;
    }

    boolean this_present_selectedVariants = true && this.isSetSelectedVariants();
    boolean that_present_selectedVariants = true && that.isSetSelectedVariants();
    if (this_present_selectedVariants || that_present_selectedVariants) {
      if (!(this_present_selectedVariants && that_present_selectedVariants))
        return false;
      if (!this.selectedVariants.equals(that.selectedVariants))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(BatchChoiceResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVariants()).compareTo(other.isSetVariants());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariants()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variants, other.variants);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelectedVariants()).compareTo(other.isSetSelectedVariants());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelectedVariants()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectedVariants, other.selectedVariants);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BatchChoiceResponse(");
    boolean first = true;

    sb.append("variants:");
    if (this.variants == null) {
      sb.append("null");
    } else {
      sb.append(this.variants);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("selectedVariants:");
    if (this.selectedVariants == null) {
      sb.append("null");
    } else {
      sb.append(this.selectedVariants);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BatchChoiceResponseStandardSchemeFactory implements SchemeFactory {
    public BatchChoiceResponseStandardScheme getScheme() {
      return new BatchChoiceResponseStandardScheme();
    }
  }

  private static class BatchChoiceResponseStandardScheme extends StandardScheme<BatchChoiceResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BatchChoiceResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VARIANTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list204 = iprot.readListBegin();
                struct.variants = new ArrayList<Variant>(_list204.size);
                for (int _i205 = 0; _i205 < _list204.size; ++_i205)
                {
                  Variant _elem206;
                  _elem206 = new Variant();
                  _elem206.read(iprot);
                  struct.variants.add(_elem206);
                }
                iprot.readListEnd();
              }
              struct.setVariantsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SELECTED_VARIANTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list207 = iprot.readListBegin();
                struct.selectedVariants = new ArrayList<List<Variant>>(_list207.size);
                for (int _i208 = 0; _i208 < _list207.size; ++_i208)
                {
                  List<Variant> _elem209;
                  {
                    org.apache.thrift.protocol.TList _list210 = iprot.readListBegin();
                    _elem209 = new ArrayList<Variant>(_list210.size);
                    for (int _i211 = 0; _i211 < _list210.size; ++_i211)
                    {
                      Variant _elem212;
                      _elem212 = new Variant();
                      _elem212.read(iprot);
                      _elem209.add(_elem212);
                    }
                    iprot.readListEnd();
                  }
                  struct.selectedVariants.add(_elem209);
                }
                iprot.readListEnd();
              }
              struct.setSelectedVariantsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BatchChoiceResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.variants != null) {
        oprot.writeFieldBegin(VARIANTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.variants.size()));
          for (Variant _iter213 : struct.variants)
          {
            _iter213.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.selectedVariants != null) {
        oprot.writeFieldBegin(SELECTED_VARIANTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.selectedVariants.size()));
          for (List<Variant> _iter214 : struct.selectedVariants)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter214.size()));
              for (Variant _iter215 : _iter214)
              {
                _iter215.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BatchChoiceResponseTupleSchemeFactory implements SchemeFactory {
    public BatchChoiceResponseTupleScheme getScheme() {
      return new BatchChoiceResponseTupleScheme();
    }
  }

  private static class BatchChoiceResponseTupleScheme extends TupleScheme<BatchChoiceResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BatchChoiceResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVariants()) {
        optionals.set(0);
      }
      if (struct.isSetSelectedVariants()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetVariants()) {
        {
          oprot.writeI32(struct.variants.size());
          for (Variant _iter216 : struct.variants)
          {
            _iter216.write(oprot);
          }
        }
      }
      if (struct.isSetSelectedVariants()) {
        {
          oprot.writeI32(struct.selectedVariants.size());
          for (List<Variant> _iter217 : struct.selectedVariants)
          {
            {
              oprot.writeI32(_iter217.size());
              for (Variant _iter218 : _iter217)
              {
                _iter218.write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BatchChoiceResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list219 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.variants = new ArrayList<Variant>(_list219.size);
          for (int _i220 = 0; _i220 < _list219.size; ++_i220)
          {
            Variant _elem221;
            _elem221 = new Variant();
            _elem221.read(iprot);
            struct.variants.add(_elem221);
          }
        }
        struct.setVariantsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list222 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.selectedVariants = new ArrayList<List<Variant>>(_list222.size);
          for (int _i223 = 0; _i223 < _list222.size; ++_i223)
          {
            List<Variant> _elem224;
            {
              org.apache.thrift.protocol.TList _list225 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _elem224 = new ArrayList<Variant>(_list225.size);
              for (int _i226 = 0; _i226 < _list225.size; ++_i226)
              {
                Variant _elem227;
                _elem227 = new Variant();
                _elem227.read(iprot);
                _elem224.add(_elem227);
              }
            }
            struct.selectedVariants.add(_elem224);
          }
        }
        struct.setSelectedVariantsIsSet(true);
      }
    }
  }

}

