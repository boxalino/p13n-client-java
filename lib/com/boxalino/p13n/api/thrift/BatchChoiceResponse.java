/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * <dl>
 * <dt>variants</dt>
 * <dd><b>deprecated</b> - contains non-null value only if
 * corresponding BatchChoiceRequest had only one ChoiceInquiry</dd>
 * 
 * <dt>selectedVariants</dt>
 * <dd>outer list corresponds to profileIds given in BatchChoiceRequest, while
 * inner list corresponds to list of ChoiceInquiries from BatchChoiceRequest</dd>
 * </dl>
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-25")
public class BatchChoiceResponse implements org.apache.thrift.TBase<BatchChoiceResponse, BatchChoiceResponse._Fields>, java.io.Serializable, Cloneable, Comparable<BatchChoiceResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BatchChoiceResponse");

  private static final org.apache.thrift.protocol.TField VARIANTS_FIELD_DESC = new org.apache.thrift.protocol.TField("variants", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SELECTED_VARIANTS_FIELD_DESC = new org.apache.thrift.protocol.TField("selectedVariants", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BatchChoiceResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BatchChoiceResponseTupleSchemeFactory();

  public java.util.List<Variant> variants; // required
  public java.util.List<java.util.List<Variant>> selectedVariants; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VARIANTS((short)1, "variants"),
    SELECTED_VARIANTS((short)2, "selectedVariants");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VARIANTS
          return VARIANTS;
        case 2: // SELECTED_VARIANTS
          return SELECTED_VARIANTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VARIANTS, new org.apache.thrift.meta_data.FieldMetaData("variants", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Variant.class))));
    tmpMap.put(_Fields.SELECTED_VARIANTS, new org.apache.thrift.meta_data.FieldMetaData("selectedVariants", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Variant.class)))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BatchChoiceResponse.class, metaDataMap);
  }

  public BatchChoiceResponse() {
  }

  public BatchChoiceResponse(
    java.util.List<Variant> variants,
    java.util.List<java.util.List<Variant>> selectedVariants)
  {
    this();
    this.variants = variants;
    this.selectedVariants = selectedVariants;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BatchChoiceResponse(BatchChoiceResponse other) {
    if (other.isSetVariants()) {
      java.util.List<Variant> __this__variants = new java.util.ArrayList<Variant>(other.variants.size());
      for (Variant other_element : other.variants) {
        __this__variants.add(new Variant(other_element));
      }
      this.variants = __this__variants;
    }
    if (other.isSetSelectedVariants()) {
      java.util.List<java.util.List<Variant>> __this__selectedVariants = new java.util.ArrayList<java.util.List<Variant>>(other.selectedVariants.size());
      for (java.util.List<Variant> other_element : other.selectedVariants) {
        java.util.List<Variant> __this__selectedVariants_copy = new java.util.ArrayList<Variant>(other_element.size());
        for (Variant other_element_element : other_element) {
          __this__selectedVariants_copy.add(new Variant(other_element_element));
        }
        __this__selectedVariants.add(__this__selectedVariants_copy);
      }
      this.selectedVariants = __this__selectedVariants;
    }
  }

  public BatchChoiceResponse deepCopy() {
    return new BatchChoiceResponse(this);
  }

  @Override
  public void clear() {
    this.variants = null;
    this.selectedVariants = null;
  }

  public int getVariantsSize() {
    return (this.variants == null) ? 0 : this.variants.size();
  }

  public java.util.Iterator<Variant> getVariantsIterator() {
    return (this.variants == null) ? null : this.variants.iterator();
  }

  public void addToVariants(Variant elem) {
    if (this.variants == null) {
      this.variants = new java.util.ArrayList<Variant>();
    }
    this.variants.add(elem);
  }

  public java.util.List<Variant> getVariants() {
    return this.variants;
  }

  public BatchChoiceResponse setVariants(java.util.List<Variant> variants) {
    this.variants = variants;
    return this;
  }

  public void unsetVariants() {
    this.variants = null;
  }

  /** Returns true if field variants is set (has been assigned a value) and false otherwise */
  public boolean isSetVariants() {
    return this.variants != null;
  }

  public void setVariantsIsSet(boolean value) {
    if (!value) {
      this.variants = null;
    }
  }

  public int getSelectedVariantsSize() {
    return (this.selectedVariants == null) ? 0 : this.selectedVariants.size();
  }

  public java.util.Iterator<java.util.List<Variant>> getSelectedVariantsIterator() {
    return (this.selectedVariants == null) ? null : this.selectedVariants.iterator();
  }

  public void addToSelectedVariants(java.util.List<Variant> elem) {
    if (this.selectedVariants == null) {
      this.selectedVariants = new java.util.ArrayList<java.util.List<Variant>>();
    }
    this.selectedVariants.add(elem);
  }

  public java.util.List<java.util.List<Variant>> getSelectedVariants() {
    return this.selectedVariants;
  }

  public BatchChoiceResponse setSelectedVariants(java.util.List<java.util.List<Variant>> selectedVariants) {
    this.selectedVariants = selectedVariants;
    return this;
  }

  public void unsetSelectedVariants() {
    this.selectedVariants = null;
  }

  /** Returns true if field selectedVariants is set (has been assigned a value) and false otherwise */
  public boolean isSetSelectedVariants() {
    return this.selectedVariants != null;
  }

  public void setSelectedVariantsIsSet(boolean value) {
    if (!value) {
      this.selectedVariants = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case VARIANTS:
      if (value == null) {
        unsetVariants();
      } else {
        setVariants((java.util.List<Variant>)value);
      }
      break;

    case SELECTED_VARIANTS:
      if (value == null) {
        unsetSelectedVariants();
      } else {
        setSelectedVariants((java.util.List<java.util.List<Variant>>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case VARIANTS:
      return getVariants();

    case SELECTED_VARIANTS:
      return getSelectedVariants();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case VARIANTS:
      return isSetVariants();
    case SELECTED_VARIANTS:
      return isSetSelectedVariants();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BatchChoiceResponse)
      return this.equals((BatchChoiceResponse)that);
    return false;
  }

  public boolean equals(BatchChoiceResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_variants = true && this.isSetVariants();
    boolean that_present_variants = true && that.isSetVariants();
    if (this_present_variants || that_present_variants) {
      if (!(this_present_variants && that_present_variants))
        return false;
      if (!this.variants.equals(that.variants))
        return false;
    }

    boolean this_present_selectedVariants = true && this.isSetSelectedVariants();
    boolean that_present_selectedVariants = true && that.isSetSelectedVariants();
    if (this_present_selectedVariants || that_present_selectedVariants) {
      if (!(this_present_selectedVariants && that_present_selectedVariants))
        return false;
      if (!this.selectedVariants.equals(that.selectedVariants))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetVariants()) ? 131071 : 524287);
    if (isSetVariants())
      hashCode = hashCode * 8191 + variants.hashCode();

    hashCode = hashCode * 8191 + ((isSetSelectedVariants()) ? 131071 : 524287);
    if (isSetSelectedVariants())
      hashCode = hashCode * 8191 + selectedVariants.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BatchChoiceResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetVariants()).compareTo(other.isSetVariants());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariants()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variants, other.variants);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSelectedVariants()).compareTo(other.isSetSelectedVariants());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelectedVariants()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectedVariants, other.selectedVariants);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BatchChoiceResponse(");
    boolean first = true;

    sb.append("variants:");
    if (this.variants == null) {
      sb.append("null");
    } else {
      sb.append(this.variants);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("selectedVariants:");
    if (this.selectedVariants == null) {
      sb.append("null");
    } else {
      sb.append(this.selectedVariants);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BatchChoiceResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BatchChoiceResponseStandardScheme getScheme() {
      return new BatchChoiceResponseStandardScheme();
    }
  }

  private static class BatchChoiceResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<BatchChoiceResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BatchChoiceResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VARIANTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list258 = iprot.readListBegin();
                struct.variants = new java.util.ArrayList<Variant>(_list258.size);
                Variant _elem259;
                for (int _i260 = 0; _i260 < _list258.size; ++_i260)
                {
                  _elem259 = new Variant();
                  _elem259.read(iprot);
                  struct.variants.add(_elem259);
                }
                iprot.readListEnd();
              }
              struct.setVariantsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SELECTED_VARIANTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list261 = iprot.readListBegin();
                struct.selectedVariants = new java.util.ArrayList<java.util.List<Variant>>(_list261.size);
                java.util.List<Variant> _elem262;
                for (int _i263 = 0; _i263 < _list261.size; ++_i263)
                {
                  {
                    org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                    _elem262 = new java.util.ArrayList<Variant>(_list264.size);
                    Variant _elem265;
                    for (int _i266 = 0; _i266 < _list264.size; ++_i266)
                    {
                      _elem265 = new Variant();
                      _elem265.read(iprot);
                      _elem262.add(_elem265);
                    }
                    iprot.readListEnd();
                  }
                  struct.selectedVariants.add(_elem262);
                }
                iprot.readListEnd();
              }
              struct.setSelectedVariantsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BatchChoiceResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.variants != null) {
        oprot.writeFieldBegin(VARIANTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.variants.size()));
          for (Variant _iter267 : struct.variants)
          {
            _iter267.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.selectedVariants != null) {
        oprot.writeFieldBegin(SELECTED_VARIANTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.selectedVariants.size()));
          for (java.util.List<Variant> _iter268 : struct.selectedVariants)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter268.size()));
              for (Variant _iter269 : _iter268)
              {
                _iter269.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BatchChoiceResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BatchChoiceResponseTupleScheme getScheme() {
      return new BatchChoiceResponseTupleScheme();
    }
  }

  private static class BatchChoiceResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<BatchChoiceResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BatchChoiceResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetVariants()) {
        optionals.set(0);
      }
      if (struct.isSetSelectedVariants()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetVariants()) {
        {
          oprot.writeI32(struct.variants.size());
          for (Variant _iter270 : struct.variants)
          {
            _iter270.write(oprot);
          }
        }
      }
      if (struct.isSetSelectedVariants()) {
        {
          oprot.writeI32(struct.selectedVariants.size());
          for (java.util.List<Variant> _iter271 : struct.selectedVariants)
          {
            {
              oprot.writeI32(_iter271.size());
              for (Variant _iter272 : _iter271)
              {
                _iter272.write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BatchChoiceResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list273 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.variants = new java.util.ArrayList<Variant>(_list273.size);
          Variant _elem274;
          for (int _i275 = 0; _i275 < _list273.size; ++_i275)
          {
            _elem274 = new Variant();
            _elem274.read(iprot);
            struct.variants.add(_elem274);
          }
        }
        struct.setVariantsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list276 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.selectedVariants = new java.util.ArrayList<java.util.List<Variant>>(_list276.size);
          java.util.List<Variant> _elem277;
          for (int _i278 = 0; _i278 < _list276.size; ++_i278)
          {
            {
              org.apache.thrift.protocol.TList _list279 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _elem277 = new java.util.ArrayList<Variant>(_list279.size);
              Variant _elem280;
              for (int _i281 = 0; _i281 < _list279.size; ++_i281)
              {
                _elem280 = new Variant();
                _elem280.read(iprot);
                _elem277.add(_elem280);
              }
            }
            struct.selectedVariants.add(_elem277);
          }
        }
        struct.setSelectedVariantsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

