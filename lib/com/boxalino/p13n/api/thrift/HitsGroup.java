/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * grouped item found
 * 
 * <dl>
 * <dt>groupValue</dt>
 * <dd>value of the groupBy field</dd>
 * 
 * <dt>totalHitCount</dt>
 * <dd>total hits count within the group</dd>
 * 
 * <dt>hits</dt>
 * <dd>group hits</dd>
 * </dl>
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-25")
public class HitsGroup implements org.apache.thrift.TBase<HitsGroup, HitsGroup._Fields>, java.io.Serializable, Cloneable, Comparable<HitsGroup> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HitsGroup");

  private static final org.apache.thrift.protocol.TField GROUP_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupValue", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TOTAL_HIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalHitCount", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("hits", org.apache.thrift.protocol.TType.LIST, (short)30);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HitsGroupStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HitsGroupTupleSchemeFactory();

  public java.lang.String groupValue; // required
  public long totalHitCount; // required
  public java.util.List<Hit> hits; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_VALUE((short)10, "groupValue"),
    TOTAL_HIT_COUNT((short)20, "totalHitCount"),
    HITS((short)30, "hits");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // GROUP_VALUE
          return GROUP_VALUE;
        case 20: // TOTAL_HIT_COUNT
          return TOTAL_HIT_COUNT;
        case 30: // HITS
          return HITS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALHITCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_VALUE, new org.apache.thrift.meta_data.FieldMetaData("groupValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_HIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalHitCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HITS, new org.apache.thrift.meta_data.FieldMetaData("hits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Hit.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HitsGroup.class, metaDataMap);
  }

  public HitsGroup() {
  }

  public HitsGroup(
    java.lang.String groupValue,
    long totalHitCount,
    java.util.List<Hit> hits)
  {
    this();
    this.groupValue = groupValue;
    this.totalHitCount = totalHitCount;
    setTotalHitCountIsSet(true);
    this.hits = hits;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HitsGroup(HitsGroup other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGroupValue()) {
      this.groupValue = other.groupValue;
    }
    this.totalHitCount = other.totalHitCount;
    if (other.isSetHits()) {
      java.util.List<Hit> __this__hits = new java.util.ArrayList<Hit>(other.hits.size());
      for (Hit other_element : other.hits) {
        __this__hits.add(new Hit(other_element));
      }
      this.hits = __this__hits;
    }
  }

  public HitsGroup deepCopy() {
    return new HitsGroup(this);
  }

  @Override
  public void clear() {
    this.groupValue = null;
    setTotalHitCountIsSet(false);
    this.totalHitCount = 0;
    this.hits = null;
  }

  public java.lang.String getGroupValue() {
    return this.groupValue;
  }

  public HitsGroup setGroupValue(java.lang.String groupValue) {
    this.groupValue = groupValue;
    return this;
  }

  public void unsetGroupValue() {
    this.groupValue = null;
  }

  /** Returns true if field groupValue is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupValue() {
    return this.groupValue != null;
  }

  public void setGroupValueIsSet(boolean value) {
    if (!value) {
      this.groupValue = null;
    }
  }

  public long getTotalHitCount() {
    return this.totalHitCount;
  }

  public HitsGroup setTotalHitCount(long totalHitCount) {
    this.totalHitCount = totalHitCount;
    setTotalHitCountIsSet(true);
    return this;
  }

  public void unsetTotalHitCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALHITCOUNT_ISSET_ID);
  }

  /** Returns true if field totalHitCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalHitCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALHITCOUNT_ISSET_ID);
  }

  public void setTotalHitCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALHITCOUNT_ISSET_ID, value);
  }

  public int getHitsSize() {
    return (this.hits == null) ? 0 : this.hits.size();
  }

  public java.util.Iterator<Hit> getHitsIterator() {
    return (this.hits == null) ? null : this.hits.iterator();
  }

  public void addToHits(Hit elem) {
    if (this.hits == null) {
      this.hits = new java.util.ArrayList<Hit>();
    }
    this.hits.add(elem);
  }

  public java.util.List<Hit> getHits() {
    return this.hits;
  }

  public HitsGroup setHits(java.util.List<Hit> hits) {
    this.hits = hits;
    return this;
  }

  public void unsetHits() {
    this.hits = null;
  }

  /** Returns true if field hits is set (has been assigned a value) and false otherwise */
  public boolean isSetHits() {
    return this.hits != null;
  }

  public void setHitsIsSet(boolean value) {
    if (!value) {
      this.hits = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case GROUP_VALUE:
      if (value == null) {
        unsetGroupValue();
      } else {
        setGroupValue((java.lang.String)value);
      }
      break;

    case TOTAL_HIT_COUNT:
      if (value == null) {
        unsetTotalHitCount();
      } else {
        setTotalHitCount((java.lang.Long)value);
      }
      break;

    case HITS:
      if (value == null) {
        unsetHits();
      } else {
        setHits((java.util.List<Hit>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_VALUE:
      return getGroupValue();

    case TOTAL_HIT_COUNT:
      return getTotalHitCount();

    case HITS:
      return getHits();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case GROUP_VALUE:
      return isSetGroupValue();
    case TOTAL_HIT_COUNT:
      return isSetTotalHitCount();
    case HITS:
      return isSetHits();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HitsGroup)
      return this.equals((HitsGroup)that);
    return false;
  }

  public boolean equals(HitsGroup that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_groupValue = true && this.isSetGroupValue();
    boolean that_present_groupValue = true && that.isSetGroupValue();
    if (this_present_groupValue || that_present_groupValue) {
      if (!(this_present_groupValue && that_present_groupValue))
        return false;
      if (!this.groupValue.equals(that.groupValue))
        return false;
    }

    boolean this_present_totalHitCount = true;
    boolean that_present_totalHitCount = true;
    if (this_present_totalHitCount || that_present_totalHitCount) {
      if (!(this_present_totalHitCount && that_present_totalHitCount))
        return false;
      if (this.totalHitCount != that.totalHitCount)
        return false;
    }

    boolean this_present_hits = true && this.isSetHits();
    boolean that_present_hits = true && that.isSetHits();
    if (this_present_hits || that_present_hits) {
      if (!(this_present_hits && that_present_hits))
        return false;
      if (!this.hits.equals(that.hits))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGroupValue()) ? 131071 : 524287);
    if (isSetGroupValue())
      hashCode = hashCode * 8191 + groupValue.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalHitCount);

    hashCode = hashCode * 8191 + ((isSetHits()) ? 131071 : 524287);
    if (isSetHits())
      hashCode = hashCode * 8191 + hits.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(HitsGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetGroupValue()).compareTo(other.isSetGroupValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupValue, other.groupValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalHitCount()).compareTo(other.isSetTotalHitCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalHitCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalHitCount, other.totalHitCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHits()).compareTo(other.isSetHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hits, other.hits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HitsGroup(");
    boolean first = true;

    sb.append("groupValue:");
    if (this.groupValue == null) {
      sb.append("null");
    } else {
      sb.append(this.groupValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalHitCount:");
    sb.append(this.totalHitCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hits:");
    if (this.hits == null) {
      sb.append("null");
    } else {
      sb.append(this.hits);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HitsGroupStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HitsGroupStandardScheme getScheme() {
      return new HitsGroupStandardScheme();
    }
  }

  private static class HitsGroupStandardScheme extends org.apache.thrift.scheme.StandardScheme<HitsGroup> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HitsGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10: // GROUP_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupValue = iprot.readString();
              struct.setGroupValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TOTAL_HIT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalHitCount = iprot.readI64();
              struct.setTotalHitCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // HITS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                struct.hits = new java.util.ArrayList<Hit>(_list160.size);
                Hit _elem161;
                for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                {
                  _elem161 = new Hit();
                  _elem161.read(iprot);
                  struct.hits.add(_elem161);
                }
                iprot.readListEnd();
              }
              struct.setHitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HitsGroup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.groupValue != null) {
        oprot.writeFieldBegin(GROUP_VALUE_FIELD_DESC);
        oprot.writeString(struct.groupValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_HIT_COUNT_FIELD_DESC);
      oprot.writeI64(struct.totalHitCount);
      oprot.writeFieldEnd();
      if (struct.hits != null) {
        oprot.writeFieldBegin(HITS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hits.size()));
          for (Hit _iter163 : struct.hits)
          {
            _iter163.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HitsGroupTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HitsGroupTupleScheme getScheme() {
      return new HitsGroupTupleScheme();
    }
  }

  private static class HitsGroupTupleScheme extends org.apache.thrift.scheme.TupleScheme<HitsGroup> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HitsGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGroupValue()) {
        optionals.set(0);
      }
      if (struct.isSetTotalHitCount()) {
        optionals.set(1);
      }
      if (struct.isSetHits()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetGroupValue()) {
        oprot.writeString(struct.groupValue);
      }
      if (struct.isSetTotalHitCount()) {
        oprot.writeI64(struct.totalHitCount);
      }
      if (struct.isSetHits()) {
        {
          oprot.writeI32(struct.hits.size());
          for (Hit _iter164 : struct.hits)
          {
            _iter164.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HitsGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.groupValue = iprot.readString();
        struct.setGroupValueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalHitCount = iprot.readI64();
        struct.setTotalHitCountIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.hits = new java.util.ArrayList<Hit>(_list165.size);
          Hit _elem166;
          for (int _i167 = 0; _i167 < _list165.size; ++_i167)
          {
            _elem166 = new Hit();
            _elem166.read(iprot);
            struct.hits.add(_elem166);
          }
        }
        struct.setHitsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

