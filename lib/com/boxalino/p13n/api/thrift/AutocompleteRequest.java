/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-25")
public class AutocompleteRequest implements org.apache.thrift.TBase<AutocompleteRequest, AutocompleteRequest._Fields>, java.io.Serializable, Cloneable, Comparable<AutocompleteRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AutocompleteRequest");

  private static final org.apache.thrift.protocol.TField USER_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("userRecord", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CHOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceId", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileId", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField REQUEST_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestContext", org.apache.thrift.protocol.TType.STRUCT, (short)51);
  private static final org.apache.thrift.protocol.TField EXCLUDE_VARIANT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("excludeVariantIds", org.apache.thrift.protocol.TType.SET, (short)61);
  private static final org.apache.thrift.protocol.TField AUTOCOMPLETE_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("autocompleteQuery", org.apache.thrift.protocol.TType.STRUCT, (short)71);
  private static final org.apache.thrift.protocol.TField SEARCH_CHOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("searchChoiceId", org.apache.thrift.protocol.TType.STRING, (short)81);
  private static final org.apache.thrift.protocol.TField SEARCH_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("searchQuery", org.apache.thrift.protocol.TType.STRUCT, (short)91);
  private static final org.apache.thrift.protocol.TField INCLUDE_VARIANT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeVariantIds", org.apache.thrift.protocol.TType.SET, (short)101);
  private static final org.apache.thrift.protocol.TField PROPERTY_QUERIES_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyQueries", org.apache.thrift.protocol.TType.LIST, (short)110);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AutocompleteRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AutocompleteRequestTupleSchemeFactory();

  public UserRecord userRecord; // required
  public java.lang.String scope; // required
  public java.lang.String choiceId; // required
  public java.lang.String profileId; // required
  public RequestContext requestContext; // required
  public java.util.Set<java.lang.String> excludeVariantIds; // required
  public AutocompleteQuery autocompleteQuery; // required
  public java.lang.String searchChoiceId; // required
  public SimpleSearchQuery searchQuery; // required
  public java.util.Set<java.lang.String> includeVariantIds; // required
  public java.util.List<PropertyQuery> propertyQueries; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_RECORD((short)11, "userRecord"),
    SCOPE((short)21, "scope"),
    CHOICE_ID((short)31, "choiceId"),
    PROFILE_ID((short)41, "profileId"),
    REQUEST_CONTEXT((short)51, "requestContext"),
    EXCLUDE_VARIANT_IDS((short)61, "excludeVariantIds"),
    AUTOCOMPLETE_QUERY((short)71, "autocompleteQuery"),
    SEARCH_CHOICE_ID((short)81, "searchChoiceId"),
    SEARCH_QUERY((short)91, "searchQuery"),
    INCLUDE_VARIANT_IDS((short)101, "includeVariantIds"),
    PROPERTY_QUERIES((short)110, "propertyQueries");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 11: // USER_RECORD
          return USER_RECORD;
        case 21: // SCOPE
          return SCOPE;
        case 31: // CHOICE_ID
          return CHOICE_ID;
        case 41: // PROFILE_ID
          return PROFILE_ID;
        case 51: // REQUEST_CONTEXT
          return REQUEST_CONTEXT;
        case 61: // EXCLUDE_VARIANT_IDS
          return EXCLUDE_VARIANT_IDS;
        case 71: // AUTOCOMPLETE_QUERY
          return AUTOCOMPLETE_QUERY;
        case 81: // SEARCH_CHOICE_ID
          return SEARCH_CHOICE_ID;
        case 91: // SEARCH_QUERY
          return SEARCH_QUERY;
        case 101: // INCLUDE_VARIANT_IDS
          return INCLUDE_VARIANT_IDS;
        case 110: // PROPERTY_QUERIES
          return PROPERTY_QUERIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_RECORD, new org.apache.thrift.meta_data.FieldMetaData("userRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserRecord.class)));
    tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("requestContext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestContext.class)));
    tmpMap.put(_Fields.EXCLUDE_VARIANT_IDS, new org.apache.thrift.meta_data.FieldMetaData("excludeVariantIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AUTOCOMPLETE_QUERY, new org.apache.thrift.meta_data.FieldMetaData("autocompleteQuery", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AutocompleteQuery.class)));
    tmpMap.put(_Fields.SEARCH_CHOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("searchChoiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEARCH_QUERY, new org.apache.thrift.meta_data.FieldMetaData("searchQuery", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleSearchQuery.class)));
    tmpMap.put(_Fields.INCLUDE_VARIANT_IDS, new org.apache.thrift.meta_data.FieldMetaData("includeVariantIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PROPERTY_QUERIES, new org.apache.thrift.meta_data.FieldMetaData("propertyQueries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "PropertyQuery"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AutocompleteRequest.class, metaDataMap);
  }

  public AutocompleteRequest() {
    this.scope = "system_rec";

  }

  public AutocompleteRequest(
    UserRecord userRecord,
    java.lang.String scope,
    java.lang.String choiceId,
    java.lang.String profileId,
    RequestContext requestContext,
    java.util.Set<java.lang.String> excludeVariantIds,
    AutocompleteQuery autocompleteQuery,
    java.lang.String searchChoiceId,
    SimpleSearchQuery searchQuery,
    java.util.Set<java.lang.String> includeVariantIds,
    java.util.List<PropertyQuery> propertyQueries)
  {
    this();
    this.userRecord = userRecord;
    this.scope = scope;
    this.choiceId = choiceId;
    this.profileId = profileId;
    this.requestContext = requestContext;
    this.excludeVariantIds = excludeVariantIds;
    this.autocompleteQuery = autocompleteQuery;
    this.searchChoiceId = searchChoiceId;
    this.searchQuery = searchQuery;
    this.includeVariantIds = includeVariantIds;
    this.propertyQueries = propertyQueries;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AutocompleteRequest(AutocompleteRequest other) {
    if (other.isSetUserRecord()) {
      this.userRecord = new UserRecord(other.userRecord);
    }
    if (other.isSetScope()) {
      this.scope = other.scope;
    }
    if (other.isSetChoiceId()) {
      this.choiceId = other.choiceId;
    }
    if (other.isSetProfileId()) {
      this.profileId = other.profileId;
    }
    if (other.isSetRequestContext()) {
      this.requestContext = new RequestContext(other.requestContext);
    }
    if (other.isSetExcludeVariantIds()) {
      java.util.Set<java.lang.String> __this__excludeVariantIds = new java.util.HashSet<java.lang.String>(other.excludeVariantIds);
      this.excludeVariantIds = __this__excludeVariantIds;
    }
    if (other.isSetAutocompleteQuery()) {
      this.autocompleteQuery = new AutocompleteQuery(other.autocompleteQuery);
    }
    if (other.isSetSearchChoiceId()) {
      this.searchChoiceId = other.searchChoiceId;
    }
    if (other.isSetSearchQuery()) {
      this.searchQuery = new SimpleSearchQuery(other.searchQuery);
    }
    if (other.isSetIncludeVariantIds()) {
      java.util.Set<java.lang.String> __this__includeVariantIds = new java.util.HashSet<java.lang.String>(other.includeVariantIds);
      this.includeVariantIds = __this__includeVariantIds;
    }
    if (other.isSetPropertyQueries()) {
      java.util.List<PropertyQuery> __this__propertyQueries = new java.util.ArrayList<PropertyQuery>(other.propertyQueries.size());
      for (PropertyQuery other_element : other.propertyQueries) {
        __this__propertyQueries.add(other_element);
      }
      this.propertyQueries = __this__propertyQueries;
    }
  }

  public AutocompleteRequest deepCopy() {
    return new AutocompleteRequest(this);
  }

  @Override
  public void clear() {
    this.userRecord = null;
    this.scope = "system_rec";

    this.choiceId = null;
    this.profileId = null;
    this.requestContext = null;
    this.excludeVariantIds = null;
    this.autocompleteQuery = null;
    this.searchChoiceId = null;
    this.searchQuery = null;
    this.includeVariantIds = null;
    this.propertyQueries = null;
  }

  public UserRecord getUserRecord() {
    return this.userRecord;
  }

  public AutocompleteRequest setUserRecord(UserRecord userRecord) {
    this.userRecord = userRecord;
    return this;
  }

  public void unsetUserRecord() {
    this.userRecord = null;
  }

  /** Returns true if field userRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetUserRecord() {
    return this.userRecord != null;
  }

  public void setUserRecordIsSet(boolean value) {
    if (!value) {
      this.userRecord = null;
    }
  }

  public java.lang.String getScope() {
    return this.scope;
  }

  public AutocompleteRequest setScope(java.lang.String scope) {
    this.scope = scope;
    return this;
  }

  public void unsetScope() {
    this.scope = null;
  }

  /** Returns true if field scope is set (has been assigned a value) and false otherwise */
  public boolean isSetScope() {
    return this.scope != null;
  }

  public void setScopeIsSet(boolean value) {
    if (!value) {
      this.scope = null;
    }
  }

  public java.lang.String getChoiceId() {
    return this.choiceId;
  }

  public AutocompleteRequest setChoiceId(java.lang.String choiceId) {
    this.choiceId = choiceId;
    return this;
  }

  public void unsetChoiceId() {
    this.choiceId = null;
  }

  /** Returns true if field choiceId is set (has been assigned a value) and false otherwise */
  public boolean isSetChoiceId() {
    return this.choiceId != null;
  }

  public void setChoiceIdIsSet(boolean value) {
    if (!value) {
      this.choiceId = null;
    }
  }

  public java.lang.String getProfileId() {
    return this.profileId;
  }

  public AutocompleteRequest setProfileId(java.lang.String profileId) {
    this.profileId = profileId;
    return this;
  }

  public void unsetProfileId() {
    this.profileId = null;
  }

  /** Returns true if field profileId is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileId() {
    return this.profileId != null;
  }

  public void setProfileIdIsSet(boolean value) {
    if (!value) {
      this.profileId = null;
    }
  }

  public RequestContext getRequestContext() {
    return this.requestContext;
  }

  public AutocompleteRequest setRequestContext(RequestContext requestContext) {
    this.requestContext = requestContext;
    return this;
  }

  public void unsetRequestContext() {
    this.requestContext = null;
  }

  /** Returns true if field requestContext is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestContext() {
    return this.requestContext != null;
  }

  public void setRequestContextIsSet(boolean value) {
    if (!value) {
      this.requestContext = null;
    }
  }

  public int getExcludeVariantIdsSize() {
    return (this.excludeVariantIds == null) ? 0 : this.excludeVariantIds.size();
  }

  public java.util.Iterator<java.lang.String> getExcludeVariantIdsIterator() {
    return (this.excludeVariantIds == null) ? null : this.excludeVariantIds.iterator();
  }

  public void addToExcludeVariantIds(java.lang.String elem) {
    if (this.excludeVariantIds == null) {
      this.excludeVariantIds = new java.util.HashSet<java.lang.String>();
    }
    this.excludeVariantIds.add(elem);
  }

  public java.util.Set<java.lang.String> getExcludeVariantIds() {
    return this.excludeVariantIds;
  }

  public AutocompleteRequest setExcludeVariantIds(java.util.Set<java.lang.String> excludeVariantIds) {
    this.excludeVariantIds = excludeVariantIds;
    return this;
  }

  public void unsetExcludeVariantIds() {
    this.excludeVariantIds = null;
  }

  /** Returns true if field excludeVariantIds is set (has been assigned a value) and false otherwise */
  public boolean isSetExcludeVariantIds() {
    return this.excludeVariantIds != null;
  }

  public void setExcludeVariantIdsIsSet(boolean value) {
    if (!value) {
      this.excludeVariantIds = null;
    }
  }

  public AutocompleteQuery getAutocompleteQuery() {
    return this.autocompleteQuery;
  }

  public AutocompleteRequest setAutocompleteQuery(AutocompleteQuery autocompleteQuery) {
    this.autocompleteQuery = autocompleteQuery;
    return this;
  }

  public void unsetAutocompleteQuery() {
    this.autocompleteQuery = null;
  }

  /** Returns true if field autocompleteQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetAutocompleteQuery() {
    return this.autocompleteQuery != null;
  }

  public void setAutocompleteQueryIsSet(boolean value) {
    if (!value) {
      this.autocompleteQuery = null;
    }
  }

  public java.lang.String getSearchChoiceId() {
    return this.searchChoiceId;
  }

  public AutocompleteRequest setSearchChoiceId(java.lang.String searchChoiceId) {
    this.searchChoiceId = searchChoiceId;
    return this;
  }

  public void unsetSearchChoiceId() {
    this.searchChoiceId = null;
  }

  /** Returns true if field searchChoiceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchChoiceId() {
    return this.searchChoiceId != null;
  }

  public void setSearchChoiceIdIsSet(boolean value) {
    if (!value) {
      this.searchChoiceId = null;
    }
  }

  public SimpleSearchQuery getSearchQuery() {
    return this.searchQuery;
  }

  public AutocompleteRequest setSearchQuery(SimpleSearchQuery searchQuery) {
    this.searchQuery = searchQuery;
    return this;
  }

  public void unsetSearchQuery() {
    this.searchQuery = null;
  }

  /** Returns true if field searchQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchQuery() {
    return this.searchQuery != null;
  }

  public void setSearchQueryIsSet(boolean value) {
    if (!value) {
      this.searchQuery = null;
    }
  }

  public int getIncludeVariantIdsSize() {
    return (this.includeVariantIds == null) ? 0 : this.includeVariantIds.size();
  }

  public java.util.Iterator<java.lang.String> getIncludeVariantIdsIterator() {
    return (this.includeVariantIds == null) ? null : this.includeVariantIds.iterator();
  }

  public void addToIncludeVariantIds(java.lang.String elem) {
    if (this.includeVariantIds == null) {
      this.includeVariantIds = new java.util.HashSet<java.lang.String>();
    }
    this.includeVariantIds.add(elem);
  }

  public java.util.Set<java.lang.String> getIncludeVariantIds() {
    return this.includeVariantIds;
  }

  public AutocompleteRequest setIncludeVariantIds(java.util.Set<java.lang.String> includeVariantIds) {
    this.includeVariantIds = includeVariantIds;
    return this;
  }

  public void unsetIncludeVariantIds() {
    this.includeVariantIds = null;
  }

  /** Returns true if field includeVariantIds is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeVariantIds() {
    return this.includeVariantIds != null;
  }

  public void setIncludeVariantIdsIsSet(boolean value) {
    if (!value) {
      this.includeVariantIds = null;
    }
  }

  public int getPropertyQueriesSize() {
    return (this.propertyQueries == null) ? 0 : this.propertyQueries.size();
  }

  public java.util.Iterator<PropertyQuery> getPropertyQueriesIterator() {
    return (this.propertyQueries == null) ? null : this.propertyQueries.iterator();
  }

  public void addToPropertyQueries(PropertyQuery elem) {
    if (this.propertyQueries == null) {
      this.propertyQueries = new java.util.ArrayList<PropertyQuery>();
    }
    this.propertyQueries.add(elem);
  }

  public java.util.List<PropertyQuery> getPropertyQueries() {
    return this.propertyQueries;
  }

  public AutocompleteRequest setPropertyQueries(java.util.List<PropertyQuery> propertyQueries) {
    this.propertyQueries = propertyQueries;
    return this;
  }

  public void unsetPropertyQueries() {
    this.propertyQueries = null;
  }

  /** Returns true if field propertyQueries is set (has been assigned a value) and false otherwise */
  public boolean isSetPropertyQueries() {
    return this.propertyQueries != null;
  }

  public void setPropertyQueriesIsSet(boolean value) {
    if (!value) {
      this.propertyQueries = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USER_RECORD:
      if (value == null) {
        unsetUserRecord();
      } else {
        setUserRecord((UserRecord)value);
      }
      break;

    case SCOPE:
      if (value == null) {
        unsetScope();
      } else {
        setScope((java.lang.String)value);
      }
      break;

    case CHOICE_ID:
      if (value == null) {
        unsetChoiceId();
      } else {
        setChoiceId((java.lang.String)value);
      }
      break;

    case PROFILE_ID:
      if (value == null) {
        unsetProfileId();
      } else {
        setProfileId((java.lang.String)value);
      }
      break;

    case REQUEST_CONTEXT:
      if (value == null) {
        unsetRequestContext();
      } else {
        setRequestContext((RequestContext)value);
      }
      break;

    case EXCLUDE_VARIANT_IDS:
      if (value == null) {
        unsetExcludeVariantIds();
      } else {
        setExcludeVariantIds((java.util.Set<java.lang.String>)value);
      }
      break;

    case AUTOCOMPLETE_QUERY:
      if (value == null) {
        unsetAutocompleteQuery();
      } else {
        setAutocompleteQuery((AutocompleteQuery)value);
      }
      break;

    case SEARCH_CHOICE_ID:
      if (value == null) {
        unsetSearchChoiceId();
      } else {
        setSearchChoiceId((java.lang.String)value);
      }
      break;

    case SEARCH_QUERY:
      if (value == null) {
        unsetSearchQuery();
      } else {
        setSearchQuery((SimpleSearchQuery)value);
      }
      break;

    case INCLUDE_VARIANT_IDS:
      if (value == null) {
        unsetIncludeVariantIds();
      } else {
        setIncludeVariantIds((java.util.Set<java.lang.String>)value);
      }
      break;

    case PROPERTY_QUERIES:
      if (value == null) {
        unsetPropertyQueries();
      } else {
        setPropertyQueries((java.util.List<PropertyQuery>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_RECORD:
      return getUserRecord();

    case SCOPE:
      return getScope();

    case CHOICE_ID:
      return getChoiceId();

    case PROFILE_ID:
      return getProfileId();

    case REQUEST_CONTEXT:
      return getRequestContext();

    case EXCLUDE_VARIANT_IDS:
      return getExcludeVariantIds();

    case AUTOCOMPLETE_QUERY:
      return getAutocompleteQuery();

    case SEARCH_CHOICE_ID:
      return getSearchChoiceId();

    case SEARCH_QUERY:
      return getSearchQuery();

    case INCLUDE_VARIANT_IDS:
      return getIncludeVariantIds();

    case PROPERTY_QUERIES:
      return getPropertyQueries();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER_RECORD:
      return isSetUserRecord();
    case SCOPE:
      return isSetScope();
    case CHOICE_ID:
      return isSetChoiceId();
    case PROFILE_ID:
      return isSetProfileId();
    case REQUEST_CONTEXT:
      return isSetRequestContext();
    case EXCLUDE_VARIANT_IDS:
      return isSetExcludeVariantIds();
    case AUTOCOMPLETE_QUERY:
      return isSetAutocompleteQuery();
    case SEARCH_CHOICE_ID:
      return isSetSearchChoiceId();
    case SEARCH_QUERY:
      return isSetSearchQuery();
    case INCLUDE_VARIANT_IDS:
      return isSetIncludeVariantIds();
    case PROPERTY_QUERIES:
      return isSetPropertyQueries();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AutocompleteRequest)
      return this.equals((AutocompleteRequest)that);
    return false;
  }

  public boolean equals(AutocompleteRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userRecord = true && this.isSetUserRecord();
    boolean that_present_userRecord = true && that.isSetUserRecord();
    if (this_present_userRecord || that_present_userRecord) {
      if (!(this_present_userRecord && that_present_userRecord))
        return false;
      if (!this.userRecord.equals(that.userRecord))
        return false;
    }

    boolean this_present_scope = true && this.isSetScope();
    boolean that_present_scope = true && that.isSetScope();
    if (this_present_scope || that_present_scope) {
      if (!(this_present_scope && that_present_scope))
        return false;
      if (!this.scope.equals(that.scope))
        return false;
    }

    boolean this_present_choiceId = true && this.isSetChoiceId();
    boolean that_present_choiceId = true && that.isSetChoiceId();
    if (this_present_choiceId || that_present_choiceId) {
      if (!(this_present_choiceId && that_present_choiceId))
        return false;
      if (!this.choiceId.equals(that.choiceId))
        return false;
    }

    boolean this_present_profileId = true && this.isSetProfileId();
    boolean that_present_profileId = true && that.isSetProfileId();
    if (this_present_profileId || that_present_profileId) {
      if (!(this_present_profileId && that_present_profileId))
        return false;
      if (!this.profileId.equals(that.profileId))
        return false;
    }

    boolean this_present_requestContext = true && this.isSetRequestContext();
    boolean that_present_requestContext = true && that.isSetRequestContext();
    if (this_present_requestContext || that_present_requestContext) {
      if (!(this_present_requestContext && that_present_requestContext))
        return false;
      if (!this.requestContext.equals(that.requestContext))
        return false;
    }

    boolean this_present_excludeVariantIds = true && this.isSetExcludeVariantIds();
    boolean that_present_excludeVariantIds = true && that.isSetExcludeVariantIds();
    if (this_present_excludeVariantIds || that_present_excludeVariantIds) {
      if (!(this_present_excludeVariantIds && that_present_excludeVariantIds))
        return false;
      if (!this.excludeVariantIds.equals(that.excludeVariantIds))
        return false;
    }

    boolean this_present_autocompleteQuery = true && this.isSetAutocompleteQuery();
    boolean that_present_autocompleteQuery = true && that.isSetAutocompleteQuery();
    if (this_present_autocompleteQuery || that_present_autocompleteQuery) {
      if (!(this_present_autocompleteQuery && that_present_autocompleteQuery))
        return false;
      if (!this.autocompleteQuery.equals(that.autocompleteQuery))
        return false;
    }

    boolean this_present_searchChoiceId = true && this.isSetSearchChoiceId();
    boolean that_present_searchChoiceId = true && that.isSetSearchChoiceId();
    if (this_present_searchChoiceId || that_present_searchChoiceId) {
      if (!(this_present_searchChoiceId && that_present_searchChoiceId))
        return false;
      if (!this.searchChoiceId.equals(that.searchChoiceId))
        return false;
    }

    boolean this_present_searchQuery = true && this.isSetSearchQuery();
    boolean that_present_searchQuery = true && that.isSetSearchQuery();
    if (this_present_searchQuery || that_present_searchQuery) {
      if (!(this_present_searchQuery && that_present_searchQuery))
        return false;
      if (!this.searchQuery.equals(that.searchQuery))
        return false;
    }

    boolean this_present_includeVariantIds = true && this.isSetIncludeVariantIds();
    boolean that_present_includeVariantIds = true && that.isSetIncludeVariantIds();
    if (this_present_includeVariantIds || that_present_includeVariantIds) {
      if (!(this_present_includeVariantIds && that_present_includeVariantIds))
        return false;
      if (!this.includeVariantIds.equals(that.includeVariantIds))
        return false;
    }

    boolean this_present_propertyQueries = true && this.isSetPropertyQueries();
    boolean that_present_propertyQueries = true && that.isSetPropertyQueries();
    if (this_present_propertyQueries || that_present_propertyQueries) {
      if (!(this_present_propertyQueries && that_present_propertyQueries))
        return false;
      if (!this.propertyQueries.equals(that.propertyQueries))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUserRecord()) ? 131071 : 524287);
    if (isSetUserRecord())
      hashCode = hashCode * 8191 + userRecord.hashCode();

    hashCode = hashCode * 8191 + ((isSetScope()) ? 131071 : 524287);
    if (isSetScope())
      hashCode = hashCode * 8191 + scope.hashCode();

    hashCode = hashCode * 8191 + ((isSetChoiceId()) ? 131071 : 524287);
    if (isSetChoiceId())
      hashCode = hashCode * 8191 + choiceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetProfileId()) ? 131071 : 524287);
    if (isSetProfileId())
      hashCode = hashCode * 8191 + profileId.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequestContext()) ? 131071 : 524287);
    if (isSetRequestContext())
      hashCode = hashCode * 8191 + requestContext.hashCode();

    hashCode = hashCode * 8191 + ((isSetExcludeVariantIds()) ? 131071 : 524287);
    if (isSetExcludeVariantIds())
      hashCode = hashCode * 8191 + excludeVariantIds.hashCode();

    hashCode = hashCode * 8191 + ((isSetAutocompleteQuery()) ? 131071 : 524287);
    if (isSetAutocompleteQuery())
      hashCode = hashCode * 8191 + autocompleteQuery.hashCode();

    hashCode = hashCode * 8191 + ((isSetSearchChoiceId()) ? 131071 : 524287);
    if (isSetSearchChoiceId())
      hashCode = hashCode * 8191 + searchChoiceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSearchQuery()) ? 131071 : 524287);
    if (isSetSearchQuery())
      hashCode = hashCode * 8191 + searchQuery.hashCode();

    hashCode = hashCode * 8191 + ((isSetIncludeVariantIds()) ? 131071 : 524287);
    if (isSetIncludeVariantIds())
      hashCode = hashCode * 8191 + includeVariantIds.hashCode();

    hashCode = hashCode * 8191 + ((isSetPropertyQueries()) ? 131071 : 524287);
    if (isSetPropertyQueries())
      hashCode = hashCode * 8191 + propertyQueries.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AutocompleteRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUserRecord()).compareTo(other.isSetUserRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userRecord, other.userRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScope()).compareTo(other.isSetScope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChoiceId()).compareTo(other.isSetChoiceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoiceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceId, other.choiceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProfileId()).compareTo(other.isSetProfileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileId, other.profileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequestContext()).compareTo(other.isSetRequestContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestContext, other.requestContext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExcludeVariantIds()).compareTo(other.isSetExcludeVariantIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExcludeVariantIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excludeVariantIds, other.excludeVariantIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAutocompleteQuery()).compareTo(other.isSetAutocompleteQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutocompleteQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autocompleteQuery, other.autocompleteQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSearchChoiceId()).compareTo(other.isSetSearchChoiceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchChoiceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchChoiceId, other.searchChoiceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSearchQuery()).compareTo(other.isSetSearchQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchQuery, other.searchQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIncludeVariantIds()).compareTo(other.isSetIncludeVariantIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeVariantIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeVariantIds, other.includeVariantIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPropertyQueries()).compareTo(other.isSetPropertyQueries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropertyQueries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyQueries, other.propertyQueries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AutocompleteRequest(");
    boolean first = true;

    sb.append("userRecord:");
    if (this.userRecord == null) {
      sb.append("null");
    } else {
      sb.append(this.userRecord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scope:");
    if (this.scope == null) {
      sb.append("null");
    } else {
      sb.append(this.scope);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("choiceId:");
    if (this.choiceId == null) {
      sb.append("null");
    } else {
      sb.append(this.choiceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileId:");
    if (this.profileId == null) {
      sb.append("null");
    } else {
      sb.append(this.profileId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestContext:");
    if (this.requestContext == null) {
      sb.append("null");
    } else {
      sb.append(this.requestContext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("excludeVariantIds:");
    if (this.excludeVariantIds == null) {
      sb.append("null");
    } else {
      sb.append(this.excludeVariantIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("autocompleteQuery:");
    if (this.autocompleteQuery == null) {
      sb.append("null");
    } else {
      sb.append(this.autocompleteQuery);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchChoiceId:");
    if (this.searchChoiceId == null) {
      sb.append("null");
    } else {
      sb.append(this.searchChoiceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchQuery:");
    if (this.searchQuery == null) {
      sb.append("null");
    } else {
      sb.append(this.searchQuery);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeVariantIds:");
    if (this.includeVariantIds == null) {
      sb.append("null");
    } else {
      sb.append(this.includeVariantIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("propertyQueries:");
    if (this.propertyQueries == null) {
      sb.append("null");
    } else {
      sb.append(this.propertyQueries);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (userRecord != null) {
      userRecord.validate();
    }
    if (requestContext != null) {
      requestContext.validate();
    }
    if (autocompleteQuery != null) {
      autocompleteQuery.validate();
    }
    if (searchQuery != null) {
      searchQuery.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AutocompleteRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AutocompleteRequestStandardScheme getScheme() {
      return new AutocompleteRequestStandardScheme();
    }
  }

  private static class AutocompleteRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<AutocompleteRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AutocompleteRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 11: // USER_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userRecord = new UserRecord();
              struct.userRecord.read(iprot);
              struct.setUserRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SCOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scope = iprot.readString();
              struct.setScopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // CHOICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.choiceId = iprot.readString();
              struct.setChoiceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // PROFILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileId = iprot.readString();
              struct.setProfileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // REQUEST_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.requestContext = new RequestContext();
              struct.requestContext.read(iprot);
              struct.setRequestContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // EXCLUDE_VARIANT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set282 = iprot.readSetBegin();
                struct.excludeVariantIds = new java.util.HashSet<java.lang.String>(2*_set282.size);
                java.lang.String _elem283;
                for (int _i284 = 0; _i284 < _set282.size; ++_i284)
                {
                  _elem283 = iprot.readString();
                  struct.excludeVariantIds.add(_elem283);
                }
                iprot.readSetEnd();
              }
              struct.setExcludeVariantIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // AUTOCOMPLETE_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.autocompleteQuery = new AutocompleteQuery();
              struct.autocompleteQuery.read(iprot);
              struct.setAutocompleteQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 81: // SEARCH_CHOICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.searchChoiceId = iprot.readString();
              struct.setSearchChoiceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 91: // SEARCH_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.searchQuery = new SimpleSearchQuery();
              struct.searchQuery.read(iprot);
              struct.setSearchQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // INCLUDE_VARIANT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set285 = iprot.readSetBegin();
                struct.includeVariantIds = new java.util.HashSet<java.lang.String>(2*_set285.size);
                java.lang.String _elem286;
                for (int _i287 = 0; _i287 < _set285.size; ++_i287)
                {
                  _elem286 = iprot.readString();
                  struct.includeVariantIds.add(_elem286);
                }
                iprot.readSetEnd();
              }
              struct.setIncludeVariantIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 110: // PROPERTY_QUERIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list288 = iprot.readListBegin();
                struct.propertyQueries = new java.util.ArrayList<PropertyQuery>(_list288.size);
                PropertyQuery _elem289;
                for (int _i290 = 0; _i290 < _list288.size; ++_i290)
                {
                  _elem289 = new PropertyQuery();
                  _elem289.read(iprot);
                  struct.propertyQueries.add(_elem289);
                }
                iprot.readListEnd();
              }
              struct.setPropertyQueriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AutocompleteRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userRecord != null) {
        oprot.writeFieldBegin(USER_RECORD_FIELD_DESC);
        struct.userRecord.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.scope != null) {
        oprot.writeFieldBegin(SCOPE_FIELD_DESC);
        oprot.writeString(struct.scope);
        oprot.writeFieldEnd();
      }
      if (struct.choiceId != null) {
        oprot.writeFieldBegin(CHOICE_ID_FIELD_DESC);
        oprot.writeString(struct.choiceId);
        oprot.writeFieldEnd();
      }
      if (struct.profileId != null) {
        oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
        oprot.writeString(struct.profileId);
        oprot.writeFieldEnd();
      }
      if (struct.requestContext != null) {
        oprot.writeFieldBegin(REQUEST_CONTEXT_FIELD_DESC);
        struct.requestContext.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.excludeVariantIds != null) {
        oprot.writeFieldBegin(EXCLUDE_VARIANT_IDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.excludeVariantIds.size()));
          for (java.lang.String _iter291 : struct.excludeVariantIds)
          {
            oprot.writeString(_iter291);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.autocompleteQuery != null) {
        oprot.writeFieldBegin(AUTOCOMPLETE_QUERY_FIELD_DESC);
        struct.autocompleteQuery.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.searchChoiceId != null) {
        oprot.writeFieldBegin(SEARCH_CHOICE_ID_FIELD_DESC);
        oprot.writeString(struct.searchChoiceId);
        oprot.writeFieldEnd();
      }
      if (struct.searchQuery != null) {
        oprot.writeFieldBegin(SEARCH_QUERY_FIELD_DESC);
        struct.searchQuery.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.includeVariantIds != null) {
        oprot.writeFieldBegin(INCLUDE_VARIANT_IDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.includeVariantIds.size()));
          for (java.lang.String _iter292 : struct.includeVariantIds)
          {
            oprot.writeString(_iter292);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.propertyQueries != null) {
        oprot.writeFieldBegin(PROPERTY_QUERIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.propertyQueries.size()));
          for (PropertyQuery _iter293 : struct.propertyQueries)
          {
            _iter293.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AutocompleteRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AutocompleteRequestTupleScheme getScheme() {
      return new AutocompleteRequestTupleScheme();
    }
  }

  private static class AutocompleteRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<AutocompleteRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AutocompleteRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUserRecord()) {
        optionals.set(0);
      }
      if (struct.isSetScope()) {
        optionals.set(1);
      }
      if (struct.isSetChoiceId()) {
        optionals.set(2);
      }
      if (struct.isSetProfileId()) {
        optionals.set(3);
      }
      if (struct.isSetRequestContext()) {
        optionals.set(4);
      }
      if (struct.isSetExcludeVariantIds()) {
        optionals.set(5);
      }
      if (struct.isSetAutocompleteQuery()) {
        optionals.set(6);
      }
      if (struct.isSetSearchChoiceId()) {
        optionals.set(7);
      }
      if (struct.isSetSearchQuery()) {
        optionals.set(8);
      }
      if (struct.isSetIncludeVariantIds()) {
        optionals.set(9);
      }
      if (struct.isSetPropertyQueries()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetUserRecord()) {
        struct.userRecord.write(oprot);
      }
      if (struct.isSetScope()) {
        oprot.writeString(struct.scope);
      }
      if (struct.isSetChoiceId()) {
        oprot.writeString(struct.choiceId);
      }
      if (struct.isSetProfileId()) {
        oprot.writeString(struct.profileId);
      }
      if (struct.isSetRequestContext()) {
        struct.requestContext.write(oprot);
      }
      if (struct.isSetExcludeVariantIds()) {
        {
          oprot.writeI32(struct.excludeVariantIds.size());
          for (java.lang.String _iter294 : struct.excludeVariantIds)
          {
            oprot.writeString(_iter294);
          }
        }
      }
      if (struct.isSetAutocompleteQuery()) {
        struct.autocompleteQuery.write(oprot);
      }
      if (struct.isSetSearchChoiceId()) {
        oprot.writeString(struct.searchChoiceId);
      }
      if (struct.isSetSearchQuery()) {
        struct.searchQuery.write(oprot);
      }
      if (struct.isSetIncludeVariantIds()) {
        {
          oprot.writeI32(struct.includeVariantIds.size());
          for (java.lang.String _iter295 : struct.includeVariantIds)
          {
            oprot.writeString(_iter295);
          }
        }
      }
      if (struct.isSetPropertyQueries()) {
        {
          oprot.writeI32(struct.propertyQueries.size());
          for (PropertyQuery _iter296 : struct.propertyQueries)
          {
            _iter296.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AutocompleteRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.userRecord = new UserRecord();
        struct.userRecord.read(iprot);
        struct.setUserRecordIsSet(true);
      }
      if (incoming.get(1)) {
        struct.scope = iprot.readString();
        struct.setScopeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.choiceId = iprot.readString();
        struct.setChoiceIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.profileId = iprot.readString();
        struct.setProfileIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.requestContext = new RequestContext();
        struct.requestContext.read(iprot);
        struct.setRequestContextIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set297 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.excludeVariantIds = new java.util.HashSet<java.lang.String>(2*_set297.size);
          java.lang.String _elem298;
          for (int _i299 = 0; _i299 < _set297.size; ++_i299)
          {
            _elem298 = iprot.readString();
            struct.excludeVariantIds.add(_elem298);
          }
        }
        struct.setExcludeVariantIdsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.autocompleteQuery = new AutocompleteQuery();
        struct.autocompleteQuery.read(iprot);
        struct.setAutocompleteQueryIsSet(true);
      }
      if (incoming.get(7)) {
        struct.searchChoiceId = iprot.readString();
        struct.setSearchChoiceIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.searchQuery = new SimpleSearchQuery();
        struct.searchQuery.read(iprot);
        struct.setSearchQueryIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set300 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.includeVariantIds = new java.util.HashSet<java.lang.String>(2*_set300.size);
          java.lang.String _elem301;
          for (int _i302 = 0; _i302 < _set300.size; ++_i302)
          {
            _elem301 = iprot.readString();
            struct.includeVariantIds.add(_elem301);
          }
        }
        struct.setIncludeVariantIdsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list303 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.propertyQueries = new java.util.ArrayList<PropertyQuery>(_list303.size);
          PropertyQuery _elem304;
          for (int _i305 = 0; _i305 < _list303.size; ++_i305)
          {
            _elem304 = new PropertyQuery();
            _elem304.read(iprot);
            struct.propertyQueries.add(_elem304);
          }
        }
        struct.setPropertyQueriesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

