/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-25")
public class SearchRelaxation implements org.apache.thrift.TBase<SearchRelaxation, SearchRelaxation._Fields>, java.io.Serializable, Cloneable, Comparable<SearchRelaxation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchRelaxation");

  private static final org.apache.thrift.protocol.TField SUGGESTIONS_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("suggestionsResults", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField SUBPHRASES_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("subphrasesResults", org.apache.thrift.protocol.TType.LIST, (short)20);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SearchRelaxationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SearchRelaxationTupleSchemeFactory();

  public java.util.List<SearchResult> suggestionsResults; // required
  public java.util.List<SearchResult> subphrasesResults; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUGGESTIONS_RESULTS((short)10, "suggestionsResults"),
    SUBPHRASES_RESULTS((short)20, "subphrasesResults");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // SUGGESTIONS_RESULTS
          return SUGGESTIONS_RESULTS;
        case 20: // SUBPHRASES_RESULTS
          return SUBPHRASES_RESULTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUGGESTIONS_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("suggestionsResults", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchResult.class))));
    tmpMap.put(_Fields.SUBPHRASES_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("subphrasesResults", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchResult.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchRelaxation.class, metaDataMap);
  }

  public SearchRelaxation() {
  }

  public SearchRelaxation(
    java.util.List<SearchResult> suggestionsResults,
    java.util.List<SearchResult> subphrasesResults)
  {
    this();
    this.suggestionsResults = suggestionsResults;
    this.subphrasesResults = subphrasesResults;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchRelaxation(SearchRelaxation other) {
    if (other.isSetSuggestionsResults()) {
      java.util.List<SearchResult> __this__suggestionsResults = new java.util.ArrayList<SearchResult>(other.suggestionsResults.size());
      for (SearchResult other_element : other.suggestionsResults) {
        __this__suggestionsResults.add(new SearchResult(other_element));
      }
      this.suggestionsResults = __this__suggestionsResults;
    }
    if (other.isSetSubphrasesResults()) {
      java.util.List<SearchResult> __this__subphrasesResults = new java.util.ArrayList<SearchResult>(other.subphrasesResults.size());
      for (SearchResult other_element : other.subphrasesResults) {
        __this__subphrasesResults.add(new SearchResult(other_element));
      }
      this.subphrasesResults = __this__subphrasesResults;
    }
  }

  public SearchRelaxation deepCopy() {
    return new SearchRelaxation(this);
  }

  @Override
  public void clear() {
    this.suggestionsResults = null;
    this.subphrasesResults = null;
  }

  public int getSuggestionsResultsSize() {
    return (this.suggestionsResults == null) ? 0 : this.suggestionsResults.size();
  }

  public java.util.Iterator<SearchResult> getSuggestionsResultsIterator() {
    return (this.suggestionsResults == null) ? null : this.suggestionsResults.iterator();
  }

  public void addToSuggestionsResults(SearchResult elem) {
    if (this.suggestionsResults == null) {
      this.suggestionsResults = new java.util.ArrayList<SearchResult>();
    }
    this.suggestionsResults.add(elem);
  }

  public java.util.List<SearchResult> getSuggestionsResults() {
    return this.suggestionsResults;
  }

  public SearchRelaxation setSuggestionsResults(java.util.List<SearchResult> suggestionsResults) {
    this.suggestionsResults = suggestionsResults;
    return this;
  }

  public void unsetSuggestionsResults() {
    this.suggestionsResults = null;
  }

  /** Returns true if field suggestionsResults is set (has been assigned a value) and false otherwise */
  public boolean isSetSuggestionsResults() {
    return this.suggestionsResults != null;
  }

  public void setSuggestionsResultsIsSet(boolean value) {
    if (!value) {
      this.suggestionsResults = null;
    }
  }

  public int getSubphrasesResultsSize() {
    return (this.subphrasesResults == null) ? 0 : this.subphrasesResults.size();
  }

  public java.util.Iterator<SearchResult> getSubphrasesResultsIterator() {
    return (this.subphrasesResults == null) ? null : this.subphrasesResults.iterator();
  }

  public void addToSubphrasesResults(SearchResult elem) {
    if (this.subphrasesResults == null) {
      this.subphrasesResults = new java.util.ArrayList<SearchResult>();
    }
    this.subphrasesResults.add(elem);
  }

  public java.util.List<SearchResult> getSubphrasesResults() {
    return this.subphrasesResults;
  }

  public SearchRelaxation setSubphrasesResults(java.util.List<SearchResult> subphrasesResults) {
    this.subphrasesResults = subphrasesResults;
    return this;
  }

  public void unsetSubphrasesResults() {
    this.subphrasesResults = null;
  }

  /** Returns true if field subphrasesResults is set (has been assigned a value) and false otherwise */
  public boolean isSetSubphrasesResults() {
    return this.subphrasesResults != null;
  }

  public void setSubphrasesResultsIsSet(boolean value) {
    if (!value) {
      this.subphrasesResults = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SUGGESTIONS_RESULTS:
      if (value == null) {
        unsetSuggestionsResults();
      } else {
        setSuggestionsResults((java.util.List<SearchResult>)value);
      }
      break;

    case SUBPHRASES_RESULTS:
      if (value == null) {
        unsetSubphrasesResults();
      } else {
        setSubphrasesResults((java.util.List<SearchResult>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SUGGESTIONS_RESULTS:
      return getSuggestionsResults();

    case SUBPHRASES_RESULTS:
      return getSubphrasesResults();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SUGGESTIONS_RESULTS:
      return isSetSuggestionsResults();
    case SUBPHRASES_RESULTS:
      return isSetSubphrasesResults();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchRelaxation)
      return this.equals((SearchRelaxation)that);
    return false;
  }

  public boolean equals(SearchRelaxation that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_suggestionsResults = true && this.isSetSuggestionsResults();
    boolean that_present_suggestionsResults = true && that.isSetSuggestionsResults();
    if (this_present_suggestionsResults || that_present_suggestionsResults) {
      if (!(this_present_suggestionsResults && that_present_suggestionsResults))
        return false;
      if (!this.suggestionsResults.equals(that.suggestionsResults))
        return false;
    }

    boolean this_present_subphrasesResults = true && this.isSetSubphrasesResults();
    boolean that_present_subphrasesResults = true && that.isSetSubphrasesResults();
    if (this_present_subphrasesResults || that_present_subphrasesResults) {
      if (!(this_present_subphrasesResults && that_present_subphrasesResults))
        return false;
      if (!this.subphrasesResults.equals(that.subphrasesResults))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSuggestionsResults()) ? 131071 : 524287);
    if (isSetSuggestionsResults())
      hashCode = hashCode * 8191 + suggestionsResults.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubphrasesResults()) ? 131071 : 524287);
    if (isSetSubphrasesResults())
      hashCode = hashCode * 8191 + subphrasesResults.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SearchRelaxation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSuggestionsResults()).compareTo(other.isSetSuggestionsResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuggestionsResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suggestionsResults, other.suggestionsResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubphrasesResults()).compareTo(other.isSetSubphrasesResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubphrasesResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subphrasesResults, other.subphrasesResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SearchRelaxation(");
    boolean first = true;

    sb.append("suggestionsResults:");
    if (this.suggestionsResults == null) {
      sb.append("null");
    } else {
      sb.append(this.suggestionsResults);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subphrasesResults:");
    if (this.subphrasesResults == null) {
      sb.append("null");
    } else {
      sb.append(this.subphrasesResults);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchRelaxationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SearchRelaxationStandardScheme getScheme() {
      return new SearchRelaxationStandardScheme();
    }
  }

  private static class SearchRelaxationStandardScheme extends org.apache.thrift.scheme.StandardScheme<SearchRelaxation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchRelaxation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10: // SUGGESTIONS_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                struct.suggestionsResults = new java.util.ArrayList<SearchResult>(_list192.size);
                SearchResult _elem193;
                for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                {
                  _elem193 = new SearchResult();
                  _elem193.read(iprot);
                  struct.suggestionsResults.add(_elem193);
                }
                iprot.readListEnd();
              }
              struct.setSuggestionsResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SUBPHRASES_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list195 = iprot.readListBegin();
                struct.subphrasesResults = new java.util.ArrayList<SearchResult>(_list195.size);
                SearchResult _elem196;
                for (int _i197 = 0; _i197 < _list195.size; ++_i197)
                {
                  _elem196 = new SearchResult();
                  _elem196.read(iprot);
                  struct.subphrasesResults.add(_elem196);
                }
                iprot.readListEnd();
              }
              struct.setSubphrasesResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchRelaxation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.suggestionsResults != null) {
        oprot.writeFieldBegin(SUGGESTIONS_RESULTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.suggestionsResults.size()));
          for (SearchResult _iter198 : struct.suggestionsResults)
          {
            _iter198.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.subphrasesResults != null) {
        oprot.writeFieldBegin(SUBPHRASES_RESULTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.subphrasesResults.size()));
          for (SearchResult _iter199 : struct.subphrasesResults)
          {
            _iter199.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchRelaxationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SearchRelaxationTupleScheme getScheme() {
      return new SearchRelaxationTupleScheme();
    }
  }

  private static class SearchRelaxationTupleScheme extends org.apache.thrift.scheme.TupleScheme<SearchRelaxation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchRelaxation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSuggestionsResults()) {
        optionals.set(0);
      }
      if (struct.isSetSubphrasesResults()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSuggestionsResults()) {
        {
          oprot.writeI32(struct.suggestionsResults.size());
          for (SearchResult _iter200 : struct.suggestionsResults)
          {
            _iter200.write(oprot);
          }
        }
      }
      if (struct.isSetSubphrasesResults()) {
        {
          oprot.writeI32(struct.subphrasesResults.size());
          for (SearchResult _iter201 : struct.subphrasesResults)
          {
            _iter201.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchRelaxation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list202 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.suggestionsResults = new java.util.ArrayList<SearchResult>(_list202.size);
          SearchResult _elem203;
          for (int _i204 = 0; _i204 < _list202.size; ++_i204)
          {
            _elem203 = new SearchResult();
            _elem203.read(iprot);
            struct.suggestionsResults.add(_elem203);
          }
        }
        struct.setSuggestionsResultsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.subphrasesResults = new java.util.ArrayList<SearchResult>(_list205.size);
          SearchResult _elem206;
          for (int _i207 = 0; _i207 < _list205.size; ++_i207)
          {
            _elem206 = new SearchResult();
            _elem206.read(iprot);
            struct.subphrasesResults.add(_elem206);
          }
        }
        struct.setSubphrasesResultsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

