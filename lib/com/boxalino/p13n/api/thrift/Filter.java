/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Filter to be used in query. Note that type of generated filter depends on first non-null and non-empty value in order of preference. Values of lower priority are ignored:
 * stringValues!=null && simpleValues.size()>0 => simple match, prefix!=null => prefix match, hierarchy!=null && hierarchy.size()>0 => hierarchy filter, else range filter
 * 
 * <dl>
 * <dt>negative</dt>
 * <dd>whether the filter is negative (boolean NOT)</dd>
 * 
 * <dt>fieldName</dt>
 * <dd>field name to apply filter to</dd>
 * 
 * <dt>stringValues</dt>
 * <dd>values for simple match</dd>
 * 
 * <dt>prefix</dt>
 * <dd>prefix match</dd>
 * 
 * <dt>hierarchyId</dt>
 * <dd>hierarchy filter - when corresponding hierarchical field has encoded id</dd>
 * 
 * <dt>hierarchy</dt>
 * <dd>hierarchy filter - for example categories path in top-down order</dd>
 * 
 * <dt>rangeFrom</dt>
 * <dd>lower bound for range filter</dd>
 * 
 * <dt>rangeFromInclusive</dt>
 * <dd>whether the lower bound is inclusive</dd>
 * 
 * <dt>rangeTo</dt>
 * <dd>upper bound for range filter</dd>
 * 
 * <dt>rangeToInclusive</dt>
 * <dd>whether the upper bound is inclusive</dd>
 * </dl>
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-25")
public class Filter implements org.apache.thrift.TBase<Filter, Filter._Fields>, java.io.Serializable, Cloneable, Comparable<Filter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Filter");

  private static final org.apache.thrift.protocol.TField NEGATIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("negative", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STRING_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValues", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("prefix", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField HIERARCHY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchyId", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField HIERARCHY_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchy", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField RANGE_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeFrom", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RANGE_FROM_INCLUSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeFromInclusive", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField RANGE_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeTo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RANGE_TO_INCLUSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeToInclusive", org.apache.thrift.protocol.TType.BOOL, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FilterStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FilterTupleSchemeFactory();

  public boolean negative; // required
  public java.lang.String fieldName; // required
  public java.util.List<java.lang.String> stringValues; // required
  public java.lang.String prefix; // required
  public java.lang.String hierarchyId; // required
  public java.util.List<java.lang.String> hierarchy; // required
  public java.lang.String rangeFrom; // required
  public boolean rangeFromInclusive; // required
  public java.lang.String rangeTo; // required
  public boolean rangeToInclusive; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NEGATIVE((short)1, "negative"),
    FIELD_NAME((short)2, "fieldName"),
    STRING_VALUES((short)3, "stringValues"),
    PREFIX((short)4, "prefix"),
    HIERARCHY_ID((short)41, "hierarchyId"),
    HIERARCHY((short)5, "hierarchy"),
    RANGE_FROM((short)6, "rangeFrom"),
    RANGE_FROM_INCLUSIVE((short)7, "rangeFromInclusive"),
    RANGE_TO((short)8, "rangeTo"),
    RANGE_TO_INCLUSIVE((short)9, "rangeToInclusive");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NEGATIVE
          return NEGATIVE;
        case 2: // FIELD_NAME
          return FIELD_NAME;
        case 3: // STRING_VALUES
          return STRING_VALUES;
        case 4: // PREFIX
          return PREFIX;
        case 41: // HIERARCHY_ID
          return HIERARCHY_ID;
        case 5: // HIERARCHY
          return HIERARCHY;
        case 6: // RANGE_FROM
          return RANGE_FROM;
        case 7: // RANGE_FROM_INCLUSIVE
          return RANGE_FROM_INCLUSIVE;
        case 8: // RANGE_TO
          return RANGE_TO;
        case 9: // RANGE_TO_INCLUSIVE
          return RANGE_TO_INCLUSIVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NEGATIVE_ISSET_ID = 0;
  private static final int __RANGEFROMINCLUSIVE_ISSET_ID = 1;
  private static final int __RANGETOINCLUSIVE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NEGATIVE, new org.apache.thrift.meta_data.FieldMetaData("negative", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("fieldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRING_VALUES, new org.apache.thrift.meta_data.FieldMetaData("stringValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PREFIX, new org.apache.thrift.meta_data.FieldMetaData("prefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIERARCHY_ID, new org.apache.thrift.meta_data.FieldMetaData("hierarchyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIERARCHY, new org.apache.thrift.meta_data.FieldMetaData("hierarchy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RANGE_FROM, new org.apache.thrift.meta_data.FieldMetaData("rangeFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RANGE_FROM_INCLUSIVE, new org.apache.thrift.meta_data.FieldMetaData("rangeFromInclusive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RANGE_TO, new org.apache.thrift.meta_data.FieldMetaData("rangeTo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RANGE_TO_INCLUSIVE, new org.apache.thrift.meta_data.FieldMetaData("rangeToInclusive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Filter.class, metaDataMap);
  }

  public Filter() {
  }

  public Filter(
    boolean negative,
    java.lang.String fieldName,
    java.util.List<java.lang.String> stringValues,
    java.lang.String prefix,
    java.lang.String hierarchyId,
    java.util.List<java.lang.String> hierarchy,
    java.lang.String rangeFrom,
    boolean rangeFromInclusive,
    java.lang.String rangeTo,
    boolean rangeToInclusive)
  {
    this();
    this.negative = negative;
    setNegativeIsSet(true);
    this.fieldName = fieldName;
    this.stringValues = stringValues;
    this.prefix = prefix;
    this.hierarchyId = hierarchyId;
    this.hierarchy = hierarchy;
    this.rangeFrom = rangeFrom;
    this.rangeFromInclusive = rangeFromInclusive;
    setRangeFromInclusiveIsSet(true);
    this.rangeTo = rangeTo;
    this.rangeToInclusive = rangeToInclusive;
    setRangeToInclusiveIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Filter(Filter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.negative = other.negative;
    if (other.isSetFieldName()) {
      this.fieldName = other.fieldName;
    }
    if (other.isSetStringValues()) {
      java.util.List<java.lang.String> __this__stringValues = new java.util.ArrayList<java.lang.String>(other.stringValues);
      this.stringValues = __this__stringValues;
    }
    if (other.isSetPrefix()) {
      this.prefix = other.prefix;
    }
    if (other.isSetHierarchyId()) {
      this.hierarchyId = other.hierarchyId;
    }
    if (other.isSetHierarchy()) {
      java.util.List<java.lang.String> __this__hierarchy = new java.util.ArrayList<java.lang.String>(other.hierarchy);
      this.hierarchy = __this__hierarchy;
    }
    if (other.isSetRangeFrom()) {
      this.rangeFrom = other.rangeFrom;
    }
    this.rangeFromInclusive = other.rangeFromInclusive;
    if (other.isSetRangeTo()) {
      this.rangeTo = other.rangeTo;
    }
    this.rangeToInclusive = other.rangeToInclusive;
  }

  public Filter deepCopy() {
    return new Filter(this);
  }

  @Override
  public void clear() {
    setNegativeIsSet(false);
    this.negative = false;
    this.fieldName = null;
    this.stringValues = null;
    this.prefix = null;
    this.hierarchyId = null;
    this.hierarchy = null;
    this.rangeFrom = null;
    setRangeFromInclusiveIsSet(false);
    this.rangeFromInclusive = false;
    this.rangeTo = null;
    setRangeToInclusiveIsSet(false);
    this.rangeToInclusive = false;
  }

  public boolean isNegative() {
    return this.negative;
  }

  public Filter setNegative(boolean negative) {
    this.negative = negative;
    setNegativeIsSet(true);
    return this;
  }

  public void unsetNegative() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEGATIVE_ISSET_ID);
  }

  /** Returns true if field negative is set (has been assigned a value) and false otherwise */
  public boolean isSetNegative() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEGATIVE_ISSET_ID);
  }

  public void setNegativeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEGATIVE_ISSET_ID, value);
  }

  public java.lang.String getFieldName() {
    return this.fieldName;
  }

  public Filter setFieldName(java.lang.String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  public void unsetFieldName() {
    this.fieldName = null;
  }

  /** Returns true if field fieldName is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldName() {
    return this.fieldName != null;
  }

  public void setFieldNameIsSet(boolean value) {
    if (!value) {
      this.fieldName = null;
    }
  }

  public int getStringValuesSize() {
    return (this.stringValues == null) ? 0 : this.stringValues.size();
  }

  public java.util.Iterator<java.lang.String> getStringValuesIterator() {
    return (this.stringValues == null) ? null : this.stringValues.iterator();
  }

  public void addToStringValues(java.lang.String elem) {
    if (this.stringValues == null) {
      this.stringValues = new java.util.ArrayList<java.lang.String>();
    }
    this.stringValues.add(elem);
  }

  public java.util.List<java.lang.String> getStringValues() {
    return this.stringValues;
  }

  public Filter setStringValues(java.util.List<java.lang.String> stringValues) {
    this.stringValues = stringValues;
    return this;
  }

  public void unsetStringValues() {
    this.stringValues = null;
  }

  /** Returns true if field stringValues is set (has been assigned a value) and false otherwise */
  public boolean isSetStringValues() {
    return this.stringValues != null;
  }

  public void setStringValuesIsSet(boolean value) {
    if (!value) {
      this.stringValues = null;
    }
  }

  public java.lang.String getPrefix() {
    return this.prefix;
  }

  public Filter setPrefix(java.lang.String prefix) {
    this.prefix = prefix;
    return this;
  }

  public void unsetPrefix() {
    this.prefix = null;
  }

  /** Returns true if field prefix is set (has been assigned a value) and false otherwise */
  public boolean isSetPrefix() {
    return this.prefix != null;
  }

  public void setPrefixIsSet(boolean value) {
    if (!value) {
      this.prefix = null;
    }
  }

  public java.lang.String getHierarchyId() {
    return this.hierarchyId;
  }

  public Filter setHierarchyId(java.lang.String hierarchyId) {
    this.hierarchyId = hierarchyId;
    return this;
  }

  public void unsetHierarchyId() {
    this.hierarchyId = null;
  }

  /** Returns true if field hierarchyId is set (has been assigned a value) and false otherwise */
  public boolean isSetHierarchyId() {
    return this.hierarchyId != null;
  }

  public void setHierarchyIdIsSet(boolean value) {
    if (!value) {
      this.hierarchyId = null;
    }
  }

  public int getHierarchySize() {
    return (this.hierarchy == null) ? 0 : this.hierarchy.size();
  }

  public java.util.Iterator<java.lang.String> getHierarchyIterator() {
    return (this.hierarchy == null) ? null : this.hierarchy.iterator();
  }

  public void addToHierarchy(java.lang.String elem) {
    if (this.hierarchy == null) {
      this.hierarchy = new java.util.ArrayList<java.lang.String>();
    }
    this.hierarchy.add(elem);
  }

  public java.util.List<java.lang.String> getHierarchy() {
    return this.hierarchy;
  }

  public Filter setHierarchy(java.util.List<java.lang.String> hierarchy) {
    this.hierarchy = hierarchy;
    return this;
  }

  public void unsetHierarchy() {
    this.hierarchy = null;
  }

  /** Returns true if field hierarchy is set (has been assigned a value) and false otherwise */
  public boolean isSetHierarchy() {
    return this.hierarchy != null;
  }

  public void setHierarchyIsSet(boolean value) {
    if (!value) {
      this.hierarchy = null;
    }
  }

  public java.lang.String getRangeFrom() {
    return this.rangeFrom;
  }

  public Filter setRangeFrom(java.lang.String rangeFrom) {
    this.rangeFrom = rangeFrom;
    return this;
  }

  public void unsetRangeFrom() {
    this.rangeFrom = null;
  }

  /** Returns true if field rangeFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeFrom() {
    return this.rangeFrom != null;
  }

  public void setRangeFromIsSet(boolean value) {
    if (!value) {
      this.rangeFrom = null;
    }
  }

  public boolean isRangeFromInclusive() {
    return this.rangeFromInclusive;
  }

  public Filter setRangeFromInclusive(boolean rangeFromInclusive) {
    this.rangeFromInclusive = rangeFromInclusive;
    setRangeFromInclusiveIsSet(true);
    return this;
  }

  public void unsetRangeFromInclusive() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RANGEFROMINCLUSIVE_ISSET_ID);
  }

  /** Returns true if field rangeFromInclusive is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeFromInclusive() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RANGEFROMINCLUSIVE_ISSET_ID);
  }

  public void setRangeFromInclusiveIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RANGEFROMINCLUSIVE_ISSET_ID, value);
  }

  public java.lang.String getRangeTo() {
    return this.rangeTo;
  }

  public Filter setRangeTo(java.lang.String rangeTo) {
    this.rangeTo = rangeTo;
    return this;
  }

  public void unsetRangeTo() {
    this.rangeTo = null;
  }

  /** Returns true if field rangeTo is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeTo() {
    return this.rangeTo != null;
  }

  public void setRangeToIsSet(boolean value) {
    if (!value) {
      this.rangeTo = null;
    }
  }

  public boolean isRangeToInclusive() {
    return this.rangeToInclusive;
  }

  public Filter setRangeToInclusive(boolean rangeToInclusive) {
    this.rangeToInclusive = rangeToInclusive;
    setRangeToInclusiveIsSet(true);
    return this;
  }

  public void unsetRangeToInclusive() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RANGETOINCLUSIVE_ISSET_ID);
  }

  /** Returns true if field rangeToInclusive is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeToInclusive() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RANGETOINCLUSIVE_ISSET_ID);
  }

  public void setRangeToInclusiveIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RANGETOINCLUSIVE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NEGATIVE:
      if (value == null) {
        unsetNegative();
      } else {
        setNegative((java.lang.Boolean)value);
      }
      break;

    case FIELD_NAME:
      if (value == null) {
        unsetFieldName();
      } else {
        setFieldName((java.lang.String)value);
      }
      break;

    case STRING_VALUES:
      if (value == null) {
        unsetStringValues();
      } else {
        setStringValues((java.util.List<java.lang.String>)value);
      }
      break;

    case PREFIX:
      if (value == null) {
        unsetPrefix();
      } else {
        setPrefix((java.lang.String)value);
      }
      break;

    case HIERARCHY_ID:
      if (value == null) {
        unsetHierarchyId();
      } else {
        setHierarchyId((java.lang.String)value);
      }
      break;

    case HIERARCHY:
      if (value == null) {
        unsetHierarchy();
      } else {
        setHierarchy((java.util.List<java.lang.String>)value);
      }
      break;

    case RANGE_FROM:
      if (value == null) {
        unsetRangeFrom();
      } else {
        setRangeFrom((java.lang.String)value);
      }
      break;

    case RANGE_FROM_INCLUSIVE:
      if (value == null) {
        unsetRangeFromInclusive();
      } else {
        setRangeFromInclusive((java.lang.Boolean)value);
      }
      break;

    case RANGE_TO:
      if (value == null) {
        unsetRangeTo();
      } else {
        setRangeTo((java.lang.String)value);
      }
      break;

    case RANGE_TO_INCLUSIVE:
      if (value == null) {
        unsetRangeToInclusive();
      } else {
        setRangeToInclusive((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NEGATIVE:
      return isNegative();

    case FIELD_NAME:
      return getFieldName();

    case STRING_VALUES:
      return getStringValues();

    case PREFIX:
      return getPrefix();

    case HIERARCHY_ID:
      return getHierarchyId();

    case HIERARCHY:
      return getHierarchy();

    case RANGE_FROM:
      return getRangeFrom();

    case RANGE_FROM_INCLUSIVE:
      return isRangeFromInclusive();

    case RANGE_TO:
      return getRangeTo();

    case RANGE_TO_INCLUSIVE:
      return isRangeToInclusive();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NEGATIVE:
      return isSetNegative();
    case FIELD_NAME:
      return isSetFieldName();
    case STRING_VALUES:
      return isSetStringValues();
    case PREFIX:
      return isSetPrefix();
    case HIERARCHY_ID:
      return isSetHierarchyId();
    case HIERARCHY:
      return isSetHierarchy();
    case RANGE_FROM:
      return isSetRangeFrom();
    case RANGE_FROM_INCLUSIVE:
      return isSetRangeFromInclusive();
    case RANGE_TO:
      return isSetRangeTo();
    case RANGE_TO_INCLUSIVE:
      return isSetRangeToInclusive();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Filter)
      return this.equals((Filter)that);
    return false;
  }

  public boolean equals(Filter that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_negative = true;
    boolean that_present_negative = true;
    if (this_present_negative || that_present_negative) {
      if (!(this_present_negative && that_present_negative))
        return false;
      if (this.negative != that.negative)
        return false;
    }

    boolean this_present_fieldName = true && this.isSetFieldName();
    boolean that_present_fieldName = true && that.isSetFieldName();
    if (this_present_fieldName || that_present_fieldName) {
      if (!(this_present_fieldName && that_present_fieldName))
        return false;
      if (!this.fieldName.equals(that.fieldName))
        return false;
    }

    boolean this_present_stringValues = true && this.isSetStringValues();
    boolean that_present_stringValues = true && that.isSetStringValues();
    if (this_present_stringValues || that_present_stringValues) {
      if (!(this_present_stringValues && that_present_stringValues))
        return false;
      if (!this.stringValues.equals(that.stringValues))
        return false;
    }

    boolean this_present_prefix = true && this.isSetPrefix();
    boolean that_present_prefix = true && that.isSetPrefix();
    if (this_present_prefix || that_present_prefix) {
      if (!(this_present_prefix && that_present_prefix))
        return false;
      if (!this.prefix.equals(that.prefix))
        return false;
    }

    boolean this_present_hierarchyId = true && this.isSetHierarchyId();
    boolean that_present_hierarchyId = true && that.isSetHierarchyId();
    if (this_present_hierarchyId || that_present_hierarchyId) {
      if (!(this_present_hierarchyId && that_present_hierarchyId))
        return false;
      if (!this.hierarchyId.equals(that.hierarchyId))
        return false;
    }

    boolean this_present_hierarchy = true && this.isSetHierarchy();
    boolean that_present_hierarchy = true && that.isSetHierarchy();
    if (this_present_hierarchy || that_present_hierarchy) {
      if (!(this_present_hierarchy && that_present_hierarchy))
        return false;
      if (!this.hierarchy.equals(that.hierarchy))
        return false;
    }

    boolean this_present_rangeFrom = true && this.isSetRangeFrom();
    boolean that_present_rangeFrom = true && that.isSetRangeFrom();
    if (this_present_rangeFrom || that_present_rangeFrom) {
      if (!(this_present_rangeFrom && that_present_rangeFrom))
        return false;
      if (!this.rangeFrom.equals(that.rangeFrom))
        return false;
    }

    boolean this_present_rangeFromInclusive = true;
    boolean that_present_rangeFromInclusive = true;
    if (this_present_rangeFromInclusive || that_present_rangeFromInclusive) {
      if (!(this_present_rangeFromInclusive && that_present_rangeFromInclusive))
        return false;
      if (this.rangeFromInclusive != that.rangeFromInclusive)
        return false;
    }

    boolean this_present_rangeTo = true && this.isSetRangeTo();
    boolean that_present_rangeTo = true && that.isSetRangeTo();
    if (this_present_rangeTo || that_present_rangeTo) {
      if (!(this_present_rangeTo && that_present_rangeTo))
        return false;
      if (!this.rangeTo.equals(that.rangeTo))
        return false;
    }

    boolean this_present_rangeToInclusive = true;
    boolean that_present_rangeToInclusive = true;
    if (this_present_rangeToInclusive || that_present_rangeToInclusive) {
      if (!(this_present_rangeToInclusive && that_present_rangeToInclusive))
        return false;
      if (this.rangeToInclusive != that.rangeToInclusive)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((negative) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFieldName()) ? 131071 : 524287);
    if (isSetFieldName())
      hashCode = hashCode * 8191 + fieldName.hashCode();

    hashCode = hashCode * 8191 + ((isSetStringValues()) ? 131071 : 524287);
    if (isSetStringValues())
      hashCode = hashCode * 8191 + stringValues.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrefix()) ? 131071 : 524287);
    if (isSetPrefix())
      hashCode = hashCode * 8191 + prefix.hashCode();

    hashCode = hashCode * 8191 + ((isSetHierarchyId()) ? 131071 : 524287);
    if (isSetHierarchyId())
      hashCode = hashCode * 8191 + hierarchyId.hashCode();

    hashCode = hashCode * 8191 + ((isSetHierarchy()) ? 131071 : 524287);
    if (isSetHierarchy())
      hashCode = hashCode * 8191 + hierarchy.hashCode();

    hashCode = hashCode * 8191 + ((isSetRangeFrom()) ? 131071 : 524287);
    if (isSetRangeFrom())
      hashCode = hashCode * 8191 + rangeFrom.hashCode();

    hashCode = hashCode * 8191 + ((rangeFromInclusive) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetRangeTo()) ? 131071 : 524287);
    if (isSetRangeTo())
      hashCode = hashCode * 8191 + rangeTo.hashCode();

    hashCode = hashCode * 8191 + ((rangeToInclusive) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(Filter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNegative()).compareTo(other.isSetNegative());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNegative()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.negative, other.negative);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFieldName()).compareTo(other.isSetFieldName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldName, other.fieldName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStringValues()).compareTo(other.isSetStringValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringValues, other.stringValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrefix()).compareTo(other.isSetPrefix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrefix()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefix, other.prefix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHierarchyId()).compareTo(other.isSetHierarchyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHierarchyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchyId, other.hierarchyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHierarchy()).compareTo(other.isSetHierarchy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHierarchy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchy, other.hierarchy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRangeFrom()).compareTo(other.isSetRangeFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeFrom, other.rangeFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRangeFromInclusive()).compareTo(other.isSetRangeFromInclusive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeFromInclusive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeFromInclusive, other.rangeFromInclusive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRangeTo()).compareTo(other.isSetRangeTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeTo, other.rangeTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRangeToInclusive()).compareTo(other.isSetRangeToInclusive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeToInclusive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeToInclusive, other.rangeToInclusive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Filter(");
    boolean first = true;

    sb.append("negative:");
    sb.append(this.negative);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fieldName:");
    if (this.fieldName == null) {
      sb.append("null");
    } else {
      sb.append(this.fieldName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringValues:");
    if (this.stringValues == null) {
      sb.append("null");
    } else {
      sb.append(this.stringValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("prefix:");
    if (this.prefix == null) {
      sb.append("null");
    } else {
      sb.append(this.prefix);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hierarchyId:");
    if (this.hierarchyId == null) {
      sb.append("null");
    } else {
      sb.append(this.hierarchyId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hierarchy:");
    if (this.hierarchy == null) {
      sb.append("null");
    } else {
      sb.append(this.hierarchy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rangeFrom:");
    if (this.rangeFrom == null) {
      sb.append("null");
    } else {
      sb.append(this.rangeFrom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rangeFromInclusive:");
    sb.append(this.rangeFromInclusive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rangeTo:");
    if (this.rangeTo == null) {
      sb.append("null");
    } else {
      sb.append(this.rangeTo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rangeToInclusive:");
    sb.append(this.rangeToInclusive);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FilterStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FilterStandardScheme getScheme() {
      return new FilterStandardScheme();
    }
  }

  private static class FilterStandardScheme extends org.apache.thrift.scheme.StandardScheme<Filter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Filter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NEGATIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.negative = iprot.readBool();
              struct.setNegativeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldName = iprot.readString();
              struct.setFieldNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRING_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.stringValues = new java.util.ArrayList<java.lang.String>(_list0.size);
                java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.stringValues.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setStringValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PREFIX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prefix = iprot.readString();
              struct.setPrefixIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // HIERARCHY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hierarchyId = iprot.readString();
              struct.setHierarchyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HIERARCHY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.hierarchy = new java.util.ArrayList<java.lang.String>(_list3.size);
                java.lang.String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.hierarchy.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setHierarchyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RANGE_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rangeFrom = iprot.readString();
              struct.setRangeFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RANGE_FROM_INCLUSIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.rangeFromInclusive = iprot.readBool();
              struct.setRangeFromInclusiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RANGE_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rangeTo = iprot.readString();
              struct.setRangeToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RANGE_TO_INCLUSIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.rangeToInclusive = iprot.readBool();
              struct.setRangeToInclusiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Filter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NEGATIVE_FIELD_DESC);
      oprot.writeBool(struct.negative);
      oprot.writeFieldEnd();
      if (struct.fieldName != null) {
        oprot.writeFieldBegin(FIELD_NAME_FIELD_DESC);
        oprot.writeString(struct.fieldName);
        oprot.writeFieldEnd();
      }
      if (struct.stringValues != null) {
        oprot.writeFieldBegin(STRING_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.stringValues.size()));
          for (java.lang.String _iter6 : struct.stringValues)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.prefix != null) {
        oprot.writeFieldBegin(PREFIX_FIELD_DESC);
        oprot.writeString(struct.prefix);
        oprot.writeFieldEnd();
      }
      if (struct.hierarchy != null) {
        oprot.writeFieldBegin(HIERARCHY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.hierarchy.size()));
          for (java.lang.String _iter7 : struct.hierarchy)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.rangeFrom != null) {
        oprot.writeFieldBegin(RANGE_FROM_FIELD_DESC);
        oprot.writeString(struct.rangeFrom);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RANGE_FROM_INCLUSIVE_FIELD_DESC);
      oprot.writeBool(struct.rangeFromInclusive);
      oprot.writeFieldEnd();
      if (struct.rangeTo != null) {
        oprot.writeFieldBegin(RANGE_TO_FIELD_DESC);
        oprot.writeString(struct.rangeTo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RANGE_TO_INCLUSIVE_FIELD_DESC);
      oprot.writeBool(struct.rangeToInclusive);
      oprot.writeFieldEnd();
      if (struct.hierarchyId != null) {
        oprot.writeFieldBegin(HIERARCHY_ID_FIELD_DESC);
        oprot.writeString(struct.hierarchyId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FilterTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FilterTupleScheme getScheme() {
      return new FilterTupleScheme();
    }
  }

  private static class FilterTupleScheme extends org.apache.thrift.scheme.TupleScheme<Filter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Filter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNegative()) {
        optionals.set(0);
      }
      if (struct.isSetFieldName()) {
        optionals.set(1);
      }
      if (struct.isSetStringValues()) {
        optionals.set(2);
      }
      if (struct.isSetPrefix()) {
        optionals.set(3);
      }
      if (struct.isSetHierarchyId()) {
        optionals.set(4);
      }
      if (struct.isSetHierarchy()) {
        optionals.set(5);
      }
      if (struct.isSetRangeFrom()) {
        optionals.set(6);
      }
      if (struct.isSetRangeFromInclusive()) {
        optionals.set(7);
      }
      if (struct.isSetRangeTo()) {
        optionals.set(8);
      }
      if (struct.isSetRangeToInclusive()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetNegative()) {
        oprot.writeBool(struct.negative);
      }
      if (struct.isSetFieldName()) {
        oprot.writeString(struct.fieldName);
      }
      if (struct.isSetStringValues()) {
        {
          oprot.writeI32(struct.stringValues.size());
          for (java.lang.String _iter8 : struct.stringValues)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetPrefix()) {
        oprot.writeString(struct.prefix);
      }
      if (struct.isSetHierarchyId()) {
        oprot.writeString(struct.hierarchyId);
      }
      if (struct.isSetHierarchy()) {
        {
          oprot.writeI32(struct.hierarchy.size());
          for (java.lang.String _iter9 : struct.hierarchy)
          {
            oprot.writeString(_iter9);
          }
        }
      }
      if (struct.isSetRangeFrom()) {
        oprot.writeString(struct.rangeFrom);
      }
      if (struct.isSetRangeFromInclusive()) {
        oprot.writeBool(struct.rangeFromInclusive);
      }
      if (struct.isSetRangeTo()) {
        oprot.writeString(struct.rangeTo);
      }
      if (struct.isSetRangeToInclusive()) {
        oprot.writeBool(struct.rangeToInclusive);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Filter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.negative = iprot.readBool();
        struct.setNegativeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fieldName = iprot.readString();
        struct.setFieldNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stringValues = new java.util.ArrayList<java.lang.String>(_list10.size);
          java.lang.String _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readString();
            struct.stringValues.add(_elem11);
          }
        }
        struct.setStringValuesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.prefix = iprot.readString();
        struct.setPrefixIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hierarchyId = iprot.readString();
        struct.setHierarchyIdIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.hierarchy = new java.util.ArrayList<java.lang.String>(_list13.size);
          java.lang.String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.hierarchy.add(_elem14);
          }
        }
        struct.setHierarchyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rangeFrom = iprot.readString();
        struct.setRangeFromIsSet(true);
      }
      if (incoming.get(7)) {
        struct.rangeFromInclusive = iprot.readBool();
        struct.setRangeFromInclusiveIsSet(true);
      }
      if (incoming.get(8)) {
        struct.rangeTo = iprot.readString();
        struct.setRangeToIsSet(true);
      }
      if (incoming.get(9)) {
        struct.rangeToInclusive = iprot.readBool();
        struct.setRangeToInclusiveIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

