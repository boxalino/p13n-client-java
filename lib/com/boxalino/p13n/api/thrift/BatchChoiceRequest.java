/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * <dl>
 * <dt>choiceInquiry</dt>
 * <dd><b>deprecated</b> - use choiceInquiries instead.</dd>
 * <dd>If choiceInquiries is given this field will be ignored</dd>
 * 
 * <dt>choiceInquiries</dt>
 * <dd>list of ChoiceInquiries to be executed sequentially.</dd>
 * <dd>Note that list items can depend of items before in list</dd>
 * </dl>
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-11")
public class BatchChoiceRequest implements org.apache.thrift.TBase<BatchChoiceRequest, BatchChoiceRequest._Fields>, java.io.Serializable, Cloneable, Comparable<BatchChoiceRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BatchChoiceRequest");

  private static final org.apache.thrift.protocol.TField USER_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("userRecord", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CHOICE_INQUIRY_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceInquiry", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestContext", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PROFILE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("profileIds", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField CHOICE_INQUIRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceInquiries", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BatchChoiceRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BatchChoiceRequestTupleSchemeFactory());
  }

  public UserRecord userRecord; // required
  public ChoiceInquiry choiceInquiry; // required
  public RequestContext requestContext; // required
  public List<String> profileIds; // required
  public List<ChoiceInquiry> choiceInquiries; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_RECORD((short)1, "userRecord"),
    CHOICE_INQUIRY((short)2, "choiceInquiry"),
    REQUEST_CONTEXT((short)3, "requestContext"),
    PROFILE_IDS((short)4, "profileIds"),
    CHOICE_INQUIRIES((short)5, "choiceInquiries");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_RECORD
          return USER_RECORD;
        case 2: // CHOICE_INQUIRY
          return CHOICE_INQUIRY;
        case 3: // REQUEST_CONTEXT
          return REQUEST_CONTEXT;
        case 4: // PROFILE_IDS
          return PROFILE_IDS;
        case 5: // CHOICE_INQUIRIES
          return CHOICE_INQUIRIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_RECORD, new org.apache.thrift.meta_data.FieldMetaData("userRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserRecord.class)));
    tmpMap.put(_Fields.CHOICE_INQUIRY, new org.apache.thrift.meta_data.FieldMetaData("choiceInquiry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceInquiry.class)));
    tmpMap.put(_Fields.REQUEST_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("requestContext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestContext.class)));
    tmpMap.put(_Fields.PROFILE_IDS, new org.apache.thrift.meta_data.FieldMetaData("profileIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CHOICE_INQUIRIES, new org.apache.thrift.meta_data.FieldMetaData("choiceInquiries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceInquiry.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BatchChoiceRequest.class, metaDataMap);
  }

  public BatchChoiceRequest() {
  }

  public BatchChoiceRequest(
    UserRecord userRecord,
    ChoiceInquiry choiceInquiry,
    RequestContext requestContext,
    List<String> profileIds,
    List<ChoiceInquiry> choiceInquiries)
  {
    this();
    this.userRecord = userRecord;
    this.choiceInquiry = choiceInquiry;
    this.requestContext = requestContext;
    this.profileIds = profileIds;
    this.choiceInquiries = choiceInquiries;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BatchChoiceRequest(BatchChoiceRequest other) {
    if (other.isSetUserRecord()) {
      this.userRecord = new UserRecord(other.userRecord);
    }
    if (other.isSetChoiceInquiry()) {
      this.choiceInquiry = new ChoiceInquiry(other.choiceInquiry);
    }
    if (other.isSetRequestContext()) {
      this.requestContext = new RequestContext(other.requestContext);
    }
    if (other.isSetProfileIds()) {
      List<String> __this__profileIds = new ArrayList<String>(other.profileIds);
      this.profileIds = __this__profileIds;
    }
    if (other.isSetChoiceInquiries()) {
      List<ChoiceInquiry> __this__choiceInquiries = new ArrayList<ChoiceInquiry>(other.choiceInquiries.size());
      for (ChoiceInquiry other_element : other.choiceInquiries) {
        __this__choiceInquiries.add(new ChoiceInquiry(other_element));
      }
      this.choiceInquiries = __this__choiceInquiries;
    }
  }

  public BatchChoiceRequest deepCopy() {
    return new BatchChoiceRequest(this);
  }

  @Override
  public void clear() {
    this.userRecord = null;
    this.choiceInquiry = null;
    this.requestContext = null;
    this.profileIds = null;
    this.choiceInquiries = null;
  }

  public UserRecord getUserRecord() {
    return this.userRecord;
  }

  public BatchChoiceRequest setUserRecord(UserRecord userRecord) {
    this.userRecord = userRecord;
    return this;
  }

  public void unsetUserRecord() {
    this.userRecord = null;
  }

  /** Returns true if field userRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetUserRecord() {
    return this.userRecord != null;
  }

  public void setUserRecordIsSet(boolean value) {
    if (!value) {
      this.userRecord = null;
    }
  }

  public ChoiceInquiry getChoiceInquiry() {
    return this.choiceInquiry;
  }

  public BatchChoiceRequest setChoiceInquiry(ChoiceInquiry choiceInquiry) {
    this.choiceInquiry = choiceInquiry;
    return this;
  }

  public void unsetChoiceInquiry() {
    this.choiceInquiry = null;
  }

  /** Returns true if field choiceInquiry is set (has been assigned a value) and false otherwise */
  public boolean isSetChoiceInquiry() {
    return this.choiceInquiry != null;
  }

  public void setChoiceInquiryIsSet(boolean value) {
    if (!value) {
      this.choiceInquiry = null;
    }
  }

  public RequestContext getRequestContext() {
    return this.requestContext;
  }

  public BatchChoiceRequest setRequestContext(RequestContext requestContext) {
    this.requestContext = requestContext;
    return this;
  }

  public void unsetRequestContext() {
    this.requestContext = null;
  }

  /** Returns true if field requestContext is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestContext() {
    return this.requestContext != null;
  }

  public void setRequestContextIsSet(boolean value) {
    if (!value) {
      this.requestContext = null;
    }
  }

  public int getProfileIdsSize() {
    return (this.profileIds == null) ? 0 : this.profileIds.size();
  }

  public java.util.Iterator<String> getProfileIdsIterator() {
    return (this.profileIds == null) ? null : this.profileIds.iterator();
  }

  public void addToProfileIds(String elem) {
    if (this.profileIds == null) {
      this.profileIds = new ArrayList<String>();
    }
    this.profileIds.add(elem);
  }

  public List<String> getProfileIds() {
    return this.profileIds;
  }

  public BatchChoiceRequest setProfileIds(List<String> profileIds) {
    this.profileIds = profileIds;
    return this;
  }

  public void unsetProfileIds() {
    this.profileIds = null;
  }

  /** Returns true if field profileIds is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileIds() {
    return this.profileIds != null;
  }

  public void setProfileIdsIsSet(boolean value) {
    if (!value) {
      this.profileIds = null;
    }
  }

  public int getChoiceInquiriesSize() {
    return (this.choiceInquiries == null) ? 0 : this.choiceInquiries.size();
  }

  public java.util.Iterator<ChoiceInquiry> getChoiceInquiriesIterator() {
    return (this.choiceInquiries == null) ? null : this.choiceInquiries.iterator();
  }

  public void addToChoiceInquiries(ChoiceInquiry elem) {
    if (this.choiceInquiries == null) {
      this.choiceInquiries = new ArrayList<ChoiceInquiry>();
    }
    this.choiceInquiries.add(elem);
  }

  public List<ChoiceInquiry> getChoiceInquiries() {
    return this.choiceInquiries;
  }

  public BatchChoiceRequest setChoiceInquiries(List<ChoiceInquiry> choiceInquiries) {
    this.choiceInquiries = choiceInquiries;
    return this;
  }

  public void unsetChoiceInquiries() {
    this.choiceInquiries = null;
  }

  /** Returns true if field choiceInquiries is set (has been assigned a value) and false otherwise */
  public boolean isSetChoiceInquiries() {
    return this.choiceInquiries != null;
  }

  public void setChoiceInquiriesIsSet(boolean value) {
    if (!value) {
      this.choiceInquiries = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_RECORD:
      if (value == null) {
        unsetUserRecord();
      } else {
        setUserRecord((UserRecord)value);
      }
      break;

    case CHOICE_INQUIRY:
      if (value == null) {
        unsetChoiceInquiry();
      } else {
        setChoiceInquiry((ChoiceInquiry)value);
      }
      break;

    case REQUEST_CONTEXT:
      if (value == null) {
        unsetRequestContext();
      } else {
        setRequestContext((RequestContext)value);
      }
      break;

    case PROFILE_IDS:
      if (value == null) {
        unsetProfileIds();
      } else {
        setProfileIds((List<String>)value);
      }
      break;

    case CHOICE_INQUIRIES:
      if (value == null) {
        unsetChoiceInquiries();
      } else {
        setChoiceInquiries((List<ChoiceInquiry>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_RECORD:
      return getUserRecord();

    case CHOICE_INQUIRY:
      return getChoiceInquiry();

    case REQUEST_CONTEXT:
      return getRequestContext();

    case PROFILE_IDS:
      return getProfileIds();

    case CHOICE_INQUIRIES:
      return getChoiceInquiries();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_RECORD:
      return isSetUserRecord();
    case CHOICE_INQUIRY:
      return isSetChoiceInquiry();
    case REQUEST_CONTEXT:
      return isSetRequestContext();
    case PROFILE_IDS:
      return isSetProfileIds();
    case CHOICE_INQUIRIES:
      return isSetChoiceInquiries();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BatchChoiceRequest)
      return this.equals((BatchChoiceRequest)that);
    return false;
  }

  public boolean equals(BatchChoiceRequest that) {
    if (that == null)
      return false;

    boolean this_present_userRecord = true && this.isSetUserRecord();
    boolean that_present_userRecord = true && that.isSetUserRecord();
    if (this_present_userRecord || that_present_userRecord) {
      if (!(this_present_userRecord && that_present_userRecord))
        return false;
      if (!this.userRecord.equals(that.userRecord))
        return false;
    }

    boolean this_present_choiceInquiry = true && this.isSetChoiceInquiry();
    boolean that_present_choiceInquiry = true && that.isSetChoiceInquiry();
    if (this_present_choiceInquiry || that_present_choiceInquiry) {
      if (!(this_present_choiceInquiry && that_present_choiceInquiry))
        return false;
      if (!this.choiceInquiry.equals(that.choiceInquiry))
        return false;
    }

    boolean this_present_requestContext = true && this.isSetRequestContext();
    boolean that_present_requestContext = true && that.isSetRequestContext();
    if (this_present_requestContext || that_present_requestContext) {
      if (!(this_present_requestContext && that_present_requestContext))
        return false;
      if (!this.requestContext.equals(that.requestContext))
        return false;
    }

    boolean this_present_profileIds = true && this.isSetProfileIds();
    boolean that_present_profileIds = true && that.isSetProfileIds();
    if (this_present_profileIds || that_present_profileIds) {
      if (!(this_present_profileIds && that_present_profileIds))
        return false;
      if (!this.profileIds.equals(that.profileIds))
        return false;
    }

    boolean this_present_choiceInquiries = true && this.isSetChoiceInquiries();
    boolean that_present_choiceInquiries = true && that.isSetChoiceInquiries();
    if (this_present_choiceInquiries || that_present_choiceInquiries) {
      if (!(this_present_choiceInquiries && that_present_choiceInquiries))
        return false;
      if (!this.choiceInquiries.equals(that.choiceInquiries))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userRecord = true && (isSetUserRecord());
    list.add(present_userRecord);
    if (present_userRecord)
      list.add(userRecord);

    boolean present_choiceInquiry = true && (isSetChoiceInquiry());
    list.add(present_choiceInquiry);
    if (present_choiceInquiry)
      list.add(choiceInquiry);

    boolean present_requestContext = true && (isSetRequestContext());
    list.add(present_requestContext);
    if (present_requestContext)
      list.add(requestContext);

    boolean present_profileIds = true && (isSetProfileIds());
    list.add(present_profileIds);
    if (present_profileIds)
      list.add(profileIds);

    boolean present_choiceInquiries = true && (isSetChoiceInquiries());
    list.add(present_choiceInquiries);
    if (present_choiceInquiries)
      list.add(choiceInquiries);

    return list.hashCode();
  }

  @Override
  public int compareTo(BatchChoiceRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserRecord()).compareTo(other.isSetUserRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userRecord, other.userRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChoiceInquiry()).compareTo(other.isSetChoiceInquiry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoiceInquiry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceInquiry, other.choiceInquiry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestContext()).compareTo(other.isSetRequestContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestContext, other.requestContext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileIds()).compareTo(other.isSetProfileIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileIds, other.profileIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChoiceInquiries()).compareTo(other.isSetChoiceInquiries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoiceInquiries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceInquiries, other.choiceInquiries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BatchChoiceRequest(");
    boolean first = true;

    sb.append("userRecord:");
    if (this.userRecord == null) {
      sb.append("null");
    } else {
      sb.append(this.userRecord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("choiceInquiry:");
    if (this.choiceInquiry == null) {
      sb.append("null");
    } else {
      sb.append(this.choiceInquiry);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestContext:");
    if (this.requestContext == null) {
      sb.append("null");
    } else {
      sb.append(this.requestContext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileIds:");
    if (this.profileIds == null) {
      sb.append("null");
    } else {
      sb.append(this.profileIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("choiceInquiries:");
    if (this.choiceInquiries == null) {
      sb.append("null");
    } else {
      sb.append(this.choiceInquiries);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (userRecord != null) {
      userRecord.validate();
    }
    if (choiceInquiry != null) {
      choiceInquiry.validate();
    }
    if (requestContext != null) {
      requestContext.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BatchChoiceRequestStandardSchemeFactory implements SchemeFactory {
    public BatchChoiceRequestStandardScheme getScheme() {
      return new BatchChoiceRequestStandardScheme();
    }
  }

  private static class BatchChoiceRequestStandardScheme extends StandardScheme<BatchChoiceRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BatchChoiceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userRecord = new UserRecord();
              struct.userRecord.read(iprot);
              struct.setUserRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHOICE_INQUIRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.choiceInquiry = new ChoiceInquiry();
              struct.choiceInquiry.read(iprot);
              struct.setChoiceInquiryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.requestContext = new RequestContext();
              struct.requestContext.read(iprot);
              struct.setRequestContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROFILE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list196 = iprot.readListBegin();
                struct.profileIds = new ArrayList<String>(_list196.size);
                String _elem197;
                for (int _i198 = 0; _i198 < _list196.size; ++_i198)
                {
                  _elem197 = iprot.readString();
                  struct.profileIds.add(_elem197);
                }
                iprot.readListEnd();
              }
              struct.setProfileIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHOICE_INQUIRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list199 = iprot.readListBegin();
                struct.choiceInquiries = new ArrayList<ChoiceInquiry>(_list199.size);
                ChoiceInquiry _elem200;
                for (int _i201 = 0; _i201 < _list199.size; ++_i201)
                {
                  _elem200 = new ChoiceInquiry();
                  _elem200.read(iprot);
                  struct.choiceInquiries.add(_elem200);
                }
                iprot.readListEnd();
              }
              struct.setChoiceInquiriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BatchChoiceRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userRecord != null) {
        oprot.writeFieldBegin(USER_RECORD_FIELD_DESC);
        struct.userRecord.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.choiceInquiry != null) {
        oprot.writeFieldBegin(CHOICE_INQUIRY_FIELD_DESC);
        struct.choiceInquiry.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.requestContext != null) {
        oprot.writeFieldBegin(REQUEST_CONTEXT_FIELD_DESC);
        struct.requestContext.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.profileIds != null) {
        oprot.writeFieldBegin(PROFILE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.profileIds.size()));
          for (String _iter202 : struct.profileIds)
          {
            oprot.writeString(_iter202);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.choiceInquiries != null) {
        oprot.writeFieldBegin(CHOICE_INQUIRIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.choiceInquiries.size()));
          for (ChoiceInquiry _iter203 : struct.choiceInquiries)
          {
            _iter203.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BatchChoiceRequestTupleSchemeFactory implements SchemeFactory {
    public BatchChoiceRequestTupleScheme getScheme() {
      return new BatchChoiceRequestTupleScheme();
    }
  }

  private static class BatchChoiceRequestTupleScheme extends TupleScheme<BatchChoiceRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BatchChoiceRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserRecord()) {
        optionals.set(0);
      }
      if (struct.isSetChoiceInquiry()) {
        optionals.set(1);
      }
      if (struct.isSetRequestContext()) {
        optionals.set(2);
      }
      if (struct.isSetProfileIds()) {
        optionals.set(3);
      }
      if (struct.isSetChoiceInquiries()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetUserRecord()) {
        struct.userRecord.write(oprot);
      }
      if (struct.isSetChoiceInquiry()) {
        struct.choiceInquiry.write(oprot);
      }
      if (struct.isSetRequestContext()) {
        struct.requestContext.write(oprot);
      }
      if (struct.isSetProfileIds()) {
        {
          oprot.writeI32(struct.profileIds.size());
          for (String _iter204 : struct.profileIds)
          {
            oprot.writeString(_iter204);
          }
        }
      }
      if (struct.isSetChoiceInquiries()) {
        {
          oprot.writeI32(struct.choiceInquiries.size());
          for (ChoiceInquiry _iter205 : struct.choiceInquiries)
          {
            _iter205.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BatchChoiceRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.userRecord = new UserRecord();
        struct.userRecord.read(iprot);
        struct.setUserRecordIsSet(true);
      }
      if (incoming.get(1)) {
        struct.choiceInquiry = new ChoiceInquiry();
        struct.choiceInquiry.read(iprot);
        struct.setChoiceInquiryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.requestContext = new RequestContext();
        struct.requestContext.read(iprot);
        struct.setRequestContextIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list206 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.profileIds = new ArrayList<String>(_list206.size);
          String _elem207;
          for (int _i208 = 0; _i208 < _list206.size; ++_i208)
          {
            _elem207 = iprot.readString();
            struct.profileIds.add(_elem207);
          }
        }
        struct.setProfileIdsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list209 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.choiceInquiries = new ArrayList<ChoiceInquiry>(_list209.size);
          ChoiceInquiry _elem210;
          for (int _i211 = 0; _i211 < _list209.size; ++_i211)
          {
            _elem210 = new ChoiceInquiry();
            _elem210.read(iprot);
            struct.choiceInquiries.add(_elem210);
          }
        }
        struct.setChoiceInquiriesIsSet(true);
      }
    }
  }

}

