/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * <dl>
 * <dt>choiceInquiry</dt>
 * <dd><b>deprecated</b> - use choiceInquiries instead.</dd>
 * <dd>If choiceInquiries is given this field will be ignored</dd>
 * 
 * <dt>choiceInquiries</dt>
 * <dd>list of ChoiceInquiries to be executed sequentially.</dd>
 * <dd>Note that list items can depend of items before in list</dd>
 * 
 * <dt>requestContext</dt>
 * <dd><b>deprecated</b> - use profileContexts instead.</dd>
 * 
 * <dt>profileIds</dt>
 * <dd><b>deprecated</b> - use profileContexts instead.</dd>
 * </dl>
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-25")
public class BatchChoiceRequest implements org.apache.thrift.TBase<BatchChoiceRequest, BatchChoiceRequest._Fields>, java.io.Serializable, Cloneable, Comparable<BatchChoiceRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BatchChoiceRequest");

  private static final org.apache.thrift.protocol.TField USER_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("userRecord", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CHOICE_INQUIRY_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceInquiry", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestContext", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PROFILE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("profileIds", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField CHOICE_INQUIRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceInquiries", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField PROFILE_CONTEXTS_FIELD_DESC = new org.apache.thrift.protocol.TField("profileContexts", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BatchChoiceRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BatchChoiceRequestTupleSchemeFactory();

  public UserRecord userRecord; // required
  public ChoiceInquiry choiceInquiry; // required
  public RequestContext requestContext; // required
  public java.util.List<java.lang.String> profileIds; // required
  public java.util.List<ChoiceInquiry> choiceInquiries; // required
  public java.util.List<ProfileContext> profileContexts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_RECORD((short)1, "userRecord"),
    CHOICE_INQUIRY((short)2, "choiceInquiry"),
    REQUEST_CONTEXT((short)3, "requestContext"),
    PROFILE_IDS((short)4, "profileIds"),
    CHOICE_INQUIRIES((short)5, "choiceInquiries"),
    PROFILE_CONTEXTS((short)6, "profileContexts");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_RECORD
          return USER_RECORD;
        case 2: // CHOICE_INQUIRY
          return CHOICE_INQUIRY;
        case 3: // REQUEST_CONTEXT
          return REQUEST_CONTEXT;
        case 4: // PROFILE_IDS
          return PROFILE_IDS;
        case 5: // CHOICE_INQUIRIES
          return CHOICE_INQUIRIES;
        case 6: // PROFILE_CONTEXTS
          return PROFILE_CONTEXTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_RECORD, new org.apache.thrift.meta_data.FieldMetaData("userRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserRecord.class)));
    tmpMap.put(_Fields.CHOICE_INQUIRY, new org.apache.thrift.meta_data.FieldMetaData("choiceInquiry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceInquiry.class)));
    tmpMap.put(_Fields.REQUEST_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("requestContext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestContext.class)));
    tmpMap.put(_Fields.PROFILE_IDS, new org.apache.thrift.meta_data.FieldMetaData("profileIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CHOICE_INQUIRIES, new org.apache.thrift.meta_data.FieldMetaData("choiceInquiries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceInquiry.class))));
    tmpMap.put(_Fields.PROFILE_CONTEXTS, new org.apache.thrift.meta_data.FieldMetaData("profileContexts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProfileContext.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BatchChoiceRequest.class, metaDataMap);
  }

  public BatchChoiceRequest() {
  }

  public BatchChoiceRequest(
    UserRecord userRecord,
    ChoiceInquiry choiceInquiry,
    RequestContext requestContext,
    java.util.List<java.lang.String> profileIds,
    java.util.List<ChoiceInquiry> choiceInquiries,
    java.util.List<ProfileContext> profileContexts)
  {
    this();
    this.userRecord = userRecord;
    this.choiceInquiry = choiceInquiry;
    this.requestContext = requestContext;
    this.profileIds = profileIds;
    this.choiceInquiries = choiceInquiries;
    this.profileContexts = profileContexts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BatchChoiceRequest(BatchChoiceRequest other) {
    if (other.isSetUserRecord()) {
      this.userRecord = new UserRecord(other.userRecord);
    }
    if (other.isSetChoiceInquiry()) {
      this.choiceInquiry = new ChoiceInquiry(other.choiceInquiry);
    }
    if (other.isSetRequestContext()) {
      this.requestContext = new RequestContext(other.requestContext);
    }
    if (other.isSetProfileIds()) {
      java.util.List<java.lang.String> __this__profileIds = new java.util.ArrayList<java.lang.String>(other.profileIds);
      this.profileIds = __this__profileIds;
    }
    if (other.isSetChoiceInquiries()) {
      java.util.List<ChoiceInquiry> __this__choiceInquiries = new java.util.ArrayList<ChoiceInquiry>(other.choiceInquiries.size());
      for (ChoiceInquiry other_element : other.choiceInquiries) {
        __this__choiceInquiries.add(new ChoiceInquiry(other_element));
      }
      this.choiceInquiries = __this__choiceInquiries;
    }
    if (other.isSetProfileContexts()) {
      java.util.List<ProfileContext> __this__profileContexts = new java.util.ArrayList<ProfileContext>(other.profileContexts.size());
      for (ProfileContext other_element : other.profileContexts) {
        __this__profileContexts.add(new ProfileContext(other_element));
      }
      this.profileContexts = __this__profileContexts;
    }
  }

  public BatchChoiceRequest deepCopy() {
    return new BatchChoiceRequest(this);
  }

  @Override
  public void clear() {
    this.userRecord = null;
    this.choiceInquiry = null;
    this.requestContext = null;
    this.profileIds = null;
    this.choiceInquiries = null;
    this.profileContexts = null;
  }

  public UserRecord getUserRecord() {
    return this.userRecord;
  }

  public BatchChoiceRequest setUserRecord(UserRecord userRecord) {
    this.userRecord = userRecord;
    return this;
  }

  public void unsetUserRecord() {
    this.userRecord = null;
  }

  /** Returns true if field userRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetUserRecord() {
    return this.userRecord != null;
  }

  public void setUserRecordIsSet(boolean value) {
    if (!value) {
      this.userRecord = null;
    }
  }

  public ChoiceInquiry getChoiceInquiry() {
    return this.choiceInquiry;
  }

  public BatchChoiceRequest setChoiceInquiry(ChoiceInquiry choiceInquiry) {
    this.choiceInquiry = choiceInquiry;
    return this;
  }

  public void unsetChoiceInquiry() {
    this.choiceInquiry = null;
  }

  /** Returns true if field choiceInquiry is set (has been assigned a value) and false otherwise */
  public boolean isSetChoiceInquiry() {
    return this.choiceInquiry != null;
  }

  public void setChoiceInquiryIsSet(boolean value) {
    if (!value) {
      this.choiceInquiry = null;
    }
  }

  public RequestContext getRequestContext() {
    return this.requestContext;
  }

  public BatchChoiceRequest setRequestContext(RequestContext requestContext) {
    this.requestContext = requestContext;
    return this;
  }

  public void unsetRequestContext() {
    this.requestContext = null;
  }

  /** Returns true if field requestContext is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestContext() {
    return this.requestContext != null;
  }

  public void setRequestContextIsSet(boolean value) {
    if (!value) {
      this.requestContext = null;
    }
  }

  public int getProfileIdsSize() {
    return (this.profileIds == null) ? 0 : this.profileIds.size();
  }

  public java.util.Iterator<java.lang.String> getProfileIdsIterator() {
    return (this.profileIds == null) ? null : this.profileIds.iterator();
  }

  public void addToProfileIds(java.lang.String elem) {
    if (this.profileIds == null) {
      this.profileIds = new java.util.ArrayList<java.lang.String>();
    }
    this.profileIds.add(elem);
  }

  public java.util.List<java.lang.String> getProfileIds() {
    return this.profileIds;
  }

  public BatchChoiceRequest setProfileIds(java.util.List<java.lang.String> profileIds) {
    this.profileIds = profileIds;
    return this;
  }

  public void unsetProfileIds() {
    this.profileIds = null;
  }

  /** Returns true if field profileIds is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileIds() {
    return this.profileIds != null;
  }

  public void setProfileIdsIsSet(boolean value) {
    if (!value) {
      this.profileIds = null;
    }
  }

  public int getChoiceInquiriesSize() {
    return (this.choiceInquiries == null) ? 0 : this.choiceInquiries.size();
  }

  public java.util.Iterator<ChoiceInquiry> getChoiceInquiriesIterator() {
    return (this.choiceInquiries == null) ? null : this.choiceInquiries.iterator();
  }

  public void addToChoiceInquiries(ChoiceInquiry elem) {
    if (this.choiceInquiries == null) {
      this.choiceInquiries = new java.util.ArrayList<ChoiceInquiry>();
    }
    this.choiceInquiries.add(elem);
  }

  public java.util.List<ChoiceInquiry> getChoiceInquiries() {
    return this.choiceInquiries;
  }

  public BatchChoiceRequest setChoiceInquiries(java.util.List<ChoiceInquiry> choiceInquiries) {
    this.choiceInquiries = choiceInquiries;
    return this;
  }

  public void unsetChoiceInquiries() {
    this.choiceInquiries = null;
  }

  /** Returns true if field choiceInquiries is set (has been assigned a value) and false otherwise */
  public boolean isSetChoiceInquiries() {
    return this.choiceInquiries != null;
  }

  public void setChoiceInquiriesIsSet(boolean value) {
    if (!value) {
      this.choiceInquiries = null;
    }
  }

  public int getProfileContextsSize() {
    return (this.profileContexts == null) ? 0 : this.profileContexts.size();
  }

  public java.util.Iterator<ProfileContext> getProfileContextsIterator() {
    return (this.profileContexts == null) ? null : this.profileContexts.iterator();
  }

  public void addToProfileContexts(ProfileContext elem) {
    if (this.profileContexts == null) {
      this.profileContexts = new java.util.ArrayList<ProfileContext>();
    }
    this.profileContexts.add(elem);
  }

  public java.util.List<ProfileContext> getProfileContexts() {
    return this.profileContexts;
  }

  public BatchChoiceRequest setProfileContexts(java.util.List<ProfileContext> profileContexts) {
    this.profileContexts = profileContexts;
    return this;
  }

  public void unsetProfileContexts() {
    this.profileContexts = null;
  }

  /** Returns true if field profileContexts is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileContexts() {
    return this.profileContexts != null;
  }

  public void setProfileContextsIsSet(boolean value) {
    if (!value) {
      this.profileContexts = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USER_RECORD:
      if (value == null) {
        unsetUserRecord();
      } else {
        setUserRecord((UserRecord)value);
      }
      break;

    case CHOICE_INQUIRY:
      if (value == null) {
        unsetChoiceInquiry();
      } else {
        setChoiceInquiry((ChoiceInquiry)value);
      }
      break;

    case REQUEST_CONTEXT:
      if (value == null) {
        unsetRequestContext();
      } else {
        setRequestContext((RequestContext)value);
      }
      break;

    case PROFILE_IDS:
      if (value == null) {
        unsetProfileIds();
      } else {
        setProfileIds((java.util.List<java.lang.String>)value);
      }
      break;

    case CHOICE_INQUIRIES:
      if (value == null) {
        unsetChoiceInquiries();
      } else {
        setChoiceInquiries((java.util.List<ChoiceInquiry>)value);
      }
      break;

    case PROFILE_CONTEXTS:
      if (value == null) {
        unsetProfileContexts();
      } else {
        setProfileContexts((java.util.List<ProfileContext>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_RECORD:
      return getUserRecord();

    case CHOICE_INQUIRY:
      return getChoiceInquiry();

    case REQUEST_CONTEXT:
      return getRequestContext();

    case PROFILE_IDS:
      return getProfileIds();

    case CHOICE_INQUIRIES:
      return getChoiceInquiries();

    case PROFILE_CONTEXTS:
      return getProfileContexts();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER_RECORD:
      return isSetUserRecord();
    case CHOICE_INQUIRY:
      return isSetChoiceInquiry();
    case REQUEST_CONTEXT:
      return isSetRequestContext();
    case PROFILE_IDS:
      return isSetProfileIds();
    case CHOICE_INQUIRIES:
      return isSetChoiceInquiries();
    case PROFILE_CONTEXTS:
      return isSetProfileContexts();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BatchChoiceRequest)
      return this.equals((BatchChoiceRequest)that);
    return false;
  }

  public boolean equals(BatchChoiceRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userRecord = true && this.isSetUserRecord();
    boolean that_present_userRecord = true && that.isSetUserRecord();
    if (this_present_userRecord || that_present_userRecord) {
      if (!(this_present_userRecord && that_present_userRecord))
        return false;
      if (!this.userRecord.equals(that.userRecord))
        return false;
    }

    boolean this_present_choiceInquiry = true && this.isSetChoiceInquiry();
    boolean that_present_choiceInquiry = true && that.isSetChoiceInquiry();
    if (this_present_choiceInquiry || that_present_choiceInquiry) {
      if (!(this_present_choiceInquiry && that_present_choiceInquiry))
        return false;
      if (!this.choiceInquiry.equals(that.choiceInquiry))
        return false;
    }

    boolean this_present_requestContext = true && this.isSetRequestContext();
    boolean that_present_requestContext = true && that.isSetRequestContext();
    if (this_present_requestContext || that_present_requestContext) {
      if (!(this_present_requestContext && that_present_requestContext))
        return false;
      if (!this.requestContext.equals(that.requestContext))
        return false;
    }

    boolean this_present_profileIds = true && this.isSetProfileIds();
    boolean that_present_profileIds = true && that.isSetProfileIds();
    if (this_present_profileIds || that_present_profileIds) {
      if (!(this_present_profileIds && that_present_profileIds))
        return false;
      if (!this.profileIds.equals(that.profileIds))
        return false;
    }

    boolean this_present_choiceInquiries = true && this.isSetChoiceInquiries();
    boolean that_present_choiceInquiries = true && that.isSetChoiceInquiries();
    if (this_present_choiceInquiries || that_present_choiceInquiries) {
      if (!(this_present_choiceInquiries && that_present_choiceInquiries))
        return false;
      if (!this.choiceInquiries.equals(that.choiceInquiries))
        return false;
    }

    boolean this_present_profileContexts = true && this.isSetProfileContexts();
    boolean that_present_profileContexts = true && that.isSetProfileContexts();
    if (this_present_profileContexts || that_present_profileContexts) {
      if (!(this_present_profileContexts && that_present_profileContexts))
        return false;
      if (!this.profileContexts.equals(that.profileContexts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUserRecord()) ? 131071 : 524287);
    if (isSetUserRecord())
      hashCode = hashCode * 8191 + userRecord.hashCode();

    hashCode = hashCode * 8191 + ((isSetChoiceInquiry()) ? 131071 : 524287);
    if (isSetChoiceInquiry())
      hashCode = hashCode * 8191 + choiceInquiry.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequestContext()) ? 131071 : 524287);
    if (isSetRequestContext())
      hashCode = hashCode * 8191 + requestContext.hashCode();

    hashCode = hashCode * 8191 + ((isSetProfileIds()) ? 131071 : 524287);
    if (isSetProfileIds())
      hashCode = hashCode * 8191 + profileIds.hashCode();

    hashCode = hashCode * 8191 + ((isSetChoiceInquiries()) ? 131071 : 524287);
    if (isSetChoiceInquiries())
      hashCode = hashCode * 8191 + choiceInquiries.hashCode();

    hashCode = hashCode * 8191 + ((isSetProfileContexts()) ? 131071 : 524287);
    if (isSetProfileContexts())
      hashCode = hashCode * 8191 + profileContexts.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BatchChoiceRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUserRecord()).compareTo(other.isSetUserRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userRecord, other.userRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChoiceInquiry()).compareTo(other.isSetChoiceInquiry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoiceInquiry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceInquiry, other.choiceInquiry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequestContext()).compareTo(other.isSetRequestContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestContext, other.requestContext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProfileIds()).compareTo(other.isSetProfileIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileIds, other.profileIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChoiceInquiries()).compareTo(other.isSetChoiceInquiries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoiceInquiries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceInquiries, other.choiceInquiries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProfileContexts()).compareTo(other.isSetProfileContexts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileContexts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileContexts, other.profileContexts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BatchChoiceRequest(");
    boolean first = true;

    sb.append("userRecord:");
    if (this.userRecord == null) {
      sb.append("null");
    } else {
      sb.append(this.userRecord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("choiceInquiry:");
    if (this.choiceInquiry == null) {
      sb.append("null");
    } else {
      sb.append(this.choiceInquiry);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestContext:");
    if (this.requestContext == null) {
      sb.append("null");
    } else {
      sb.append(this.requestContext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileIds:");
    if (this.profileIds == null) {
      sb.append("null");
    } else {
      sb.append(this.profileIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("choiceInquiries:");
    if (this.choiceInquiries == null) {
      sb.append("null");
    } else {
      sb.append(this.choiceInquiries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileContexts:");
    if (this.profileContexts == null) {
      sb.append("null");
    } else {
      sb.append(this.profileContexts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (userRecord != null) {
      userRecord.validate();
    }
    if (choiceInquiry != null) {
      choiceInquiry.validate();
    }
    if (requestContext != null) {
      requestContext.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BatchChoiceRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BatchChoiceRequestStandardScheme getScheme() {
      return new BatchChoiceRequestStandardScheme();
    }
  }

  private static class BatchChoiceRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<BatchChoiceRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BatchChoiceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userRecord = new UserRecord();
              struct.userRecord.read(iprot);
              struct.setUserRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHOICE_INQUIRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.choiceInquiry = new ChoiceInquiry();
              struct.choiceInquiry.read(iprot);
              struct.setChoiceInquiryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.requestContext = new RequestContext();
              struct.requestContext.read(iprot);
              struct.setRequestContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROFILE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list234 = iprot.readListBegin();
                struct.profileIds = new java.util.ArrayList<java.lang.String>(_list234.size);
                java.lang.String _elem235;
                for (int _i236 = 0; _i236 < _list234.size; ++_i236)
                {
                  _elem235 = iprot.readString();
                  struct.profileIds.add(_elem235);
                }
                iprot.readListEnd();
              }
              struct.setProfileIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHOICE_INQUIRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list237 = iprot.readListBegin();
                struct.choiceInquiries = new java.util.ArrayList<ChoiceInquiry>(_list237.size);
                ChoiceInquiry _elem238;
                for (int _i239 = 0; _i239 < _list237.size; ++_i239)
                {
                  _elem238 = new ChoiceInquiry();
                  _elem238.read(iprot);
                  struct.choiceInquiries.add(_elem238);
                }
                iprot.readListEnd();
              }
              struct.setChoiceInquiriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROFILE_CONTEXTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list240 = iprot.readListBegin();
                struct.profileContexts = new java.util.ArrayList<ProfileContext>(_list240.size);
                ProfileContext _elem241;
                for (int _i242 = 0; _i242 < _list240.size; ++_i242)
                {
                  _elem241 = new ProfileContext();
                  _elem241.read(iprot);
                  struct.profileContexts.add(_elem241);
                }
                iprot.readListEnd();
              }
              struct.setProfileContextsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BatchChoiceRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userRecord != null) {
        oprot.writeFieldBegin(USER_RECORD_FIELD_DESC);
        struct.userRecord.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.choiceInquiry != null) {
        oprot.writeFieldBegin(CHOICE_INQUIRY_FIELD_DESC);
        struct.choiceInquiry.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.requestContext != null) {
        oprot.writeFieldBegin(REQUEST_CONTEXT_FIELD_DESC);
        struct.requestContext.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.profileIds != null) {
        oprot.writeFieldBegin(PROFILE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.profileIds.size()));
          for (java.lang.String _iter243 : struct.profileIds)
          {
            oprot.writeString(_iter243);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.choiceInquiries != null) {
        oprot.writeFieldBegin(CHOICE_INQUIRIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.choiceInquiries.size()));
          for (ChoiceInquiry _iter244 : struct.choiceInquiries)
          {
            _iter244.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.profileContexts != null) {
        oprot.writeFieldBegin(PROFILE_CONTEXTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.profileContexts.size()));
          for (ProfileContext _iter245 : struct.profileContexts)
          {
            _iter245.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BatchChoiceRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BatchChoiceRequestTupleScheme getScheme() {
      return new BatchChoiceRequestTupleScheme();
    }
  }

  private static class BatchChoiceRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<BatchChoiceRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BatchChoiceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUserRecord()) {
        optionals.set(0);
      }
      if (struct.isSetChoiceInquiry()) {
        optionals.set(1);
      }
      if (struct.isSetRequestContext()) {
        optionals.set(2);
      }
      if (struct.isSetProfileIds()) {
        optionals.set(3);
      }
      if (struct.isSetChoiceInquiries()) {
        optionals.set(4);
      }
      if (struct.isSetProfileContexts()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetUserRecord()) {
        struct.userRecord.write(oprot);
      }
      if (struct.isSetChoiceInquiry()) {
        struct.choiceInquiry.write(oprot);
      }
      if (struct.isSetRequestContext()) {
        struct.requestContext.write(oprot);
      }
      if (struct.isSetProfileIds()) {
        {
          oprot.writeI32(struct.profileIds.size());
          for (java.lang.String _iter246 : struct.profileIds)
          {
            oprot.writeString(_iter246);
          }
        }
      }
      if (struct.isSetChoiceInquiries()) {
        {
          oprot.writeI32(struct.choiceInquiries.size());
          for (ChoiceInquiry _iter247 : struct.choiceInquiries)
          {
            _iter247.write(oprot);
          }
        }
      }
      if (struct.isSetProfileContexts()) {
        {
          oprot.writeI32(struct.profileContexts.size());
          for (ProfileContext _iter248 : struct.profileContexts)
          {
            _iter248.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BatchChoiceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.userRecord = new UserRecord();
        struct.userRecord.read(iprot);
        struct.setUserRecordIsSet(true);
      }
      if (incoming.get(1)) {
        struct.choiceInquiry = new ChoiceInquiry();
        struct.choiceInquiry.read(iprot);
        struct.setChoiceInquiryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.requestContext = new RequestContext();
        struct.requestContext.read(iprot);
        struct.setRequestContextIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list249 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.profileIds = new java.util.ArrayList<java.lang.String>(_list249.size);
          java.lang.String _elem250;
          for (int _i251 = 0; _i251 < _list249.size; ++_i251)
          {
            _elem250 = iprot.readString();
            struct.profileIds.add(_elem250);
          }
        }
        struct.setProfileIdsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list252 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.choiceInquiries = new java.util.ArrayList<ChoiceInquiry>(_list252.size);
          ChoiceInquiry _elem253;
          for (int _i254 = 0; _i254 < _list252.size; ++_i254)
          {
            _elem253 = new ChoiceInquiry();
            _elem253.read(iprot);
            struct.choiceInquiries.add(_elem253);
          }
        }
        struct.setChoiceInquiriesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list255 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.profileContexts = new java.util.ArrayList<ProfileContext>(_list255.size);
          ProfileContext _elem256;
          for (int _i257 = 0; _i257 < _list255.size; ++_i257)
          {
            _elem256 = new ProfileContext();
            _elem256.read(iprot);
            struct.profileContexts.add(_elem256);
          }
        }
        struct.setProfileContextsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

