/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * <dl>
 * <dt>fieldName</dt>
 * <dd>name of the field to get facet for</dd>
 * 
 * <dt>numerical</dt>
 * <dd>whether the facet is numerical</dd>
 * 
 * <dt>range</dt>
 * <dd>whether the facet is range facet</dd>
 * 
 * <dt>maxCount</dt>
 * <dd>maximum number of facets to return by given order, -1 for all of them</dd>
 * 
 * <dt>minPopulation</dt>
 * <dd>minimum facet population to return</dd>
 * 
 * <dt>dateRangeGap</dt>
 * <dd>if the corresponding field is date then the gap to be used for facet</dd>
 * 
 * <dt>sortOrder</dt>
 * <dd>sort order</dd>
 * 
 * <dt>sortAscending</dt>
 * <dd>whether the sort should be done ascending</dd>
 * 
 * <dt>selectedValues</dt>
 * <dd>values selected from the facet.</dd>
 * <dd>Note that results will be filtered by these values, but the corresponding
 * FacetResponse is as if this filter was not applied</dd>
 * 
 * <dt>andSelectedValues</dt>
 * <dd>whether selectedValues should be considered in AND logic, meaning filter
 * out those that don't contain ALL selected values - default is OR - include
 * those contianing any of selectedValue</dd>
 * 
 * <dt>boundsOnly</dt>
 * <dd>only affects numeric range facets. will always return one FacetValue with rangeFromInclusive and rangeToExclusive
 * set according to the actual minimum and maximum value</dd>
 * </dl>
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-25")
public class FacetRequest implements org.apache.thrift.TBase<FacetRequest, FacetRequest._Fields>, java.io.Serializable, Cloneable, Comparable<FacetRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FacetRequest");

  private static final org.apache.thrift.protocol.TField FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUMERICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("numerical", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("range", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MIN_POPULATION_FIELD_DESC = new org.apache.thrift.protocol.TField("minPopulation", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DATE_RANGE_GAP_FIELD_DESC = new org.apache.thrift.protocol.TField("dateRangeGap", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SORT_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sortOrder", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SORT_ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("sortAscending", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField SELECTED_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("selectedValues", org.apache.thrift.protocol.TType.LIST, (short)90);
  private static final org.apache.thrift.protocol.TField AND_SELECTED_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("andSelectedValues", org.apache.thrift.protocol.TType.BOOL, (short)100);
  private static final org.apache.thrift.protocol.TField BOUNDS_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("boundsOnly", org.apache.thrift.protocol.TType.BOOL, (short)110);
  private static final org.apache.thrift.protocol.TField EVALUATE_FIELD_DESC = new org.apache.thrift.protocol.TField("evaluate", org.apache.thrift.protocol.TType.BOOL, (short)120);
  private static final org.apache.thrift.protocol.TField DISPLAY_FIELD_DESC = new org.apache.thrift.protocol.TField("display", org.apache.thrift.protocol.TType.STRING, (short)130);
  private static final org.apache.thrift.protocol.TField EXTRA_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("extraInfo", org.apache.thrift.protocol.TType.MAP, (short)140);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FacetRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FacetRequestTupleSchemeFactory();

  public java.lang.String fieldName; // required
  public boolean numerical; // required
  public boolean range; // required
  public int maxCount; // required
  public int minPopulation; // required
  /**
   * 
   * @see DateRangeGap
   */
  public DateRangeGap dateRangeGap; // required
  /**
   * 
   * @see FacetSortOrder
   */
  public FacetSortOrder sortOrder; // required
  public boolean sortAscending; // required
  public java.util.List<FacetValue> selectedValues; // required
  public boolean andSelectedValues; // required
  public boolean boundsOnly; // required
  public boolean evaluate; // required
  public java.lang.String display; // required
  public java.util.Map<java.lang.String,java.lang.String> extraInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELD_NAME((short)1, "fieldName"),
    NUMERICAL((short)2, "numerical"),
    RANGE((short)3, "range"),
    MAX_COUNT((short)4, "maxCount"),
    MIN_POPULATION((short)5, "minPopulation"),
    /**
     * 
     * @see DateRangeGap
     */
    DATE_RANGE_GAP((short)6, "dateRangeGap"),
    /**
     * 
     * @see FacetSortOrder
     */
    SORT_ORDER((short)7, "sortOrder"),
    SORT_ASCENDING((short)8, "sortAscending"),
    SELECTED_VALUES((short)90, "selectedValues"),
    AND_SELECTED_VALUES((short)100, "andSelectedValues"),
    BOUNDS_ONLY((short)110, "boundsOnly"),
    EVALUATE((short)120, "evaluate"),
    DISPLAY((short)130, "display"),
    EXTRA_INFO((short)140, "extraInfo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD_NAME
          return FIELD_NAME;
        case 2: // NUMERICAL
          return NUMERICAL;
        case 3: // RANGE
          return RANGE;
        case 4: // MAX_COUNT
          return MAX_COUNT;
        case 5: // MIN_POPULATION
          return MIN_POPULATION;
        case 6: // DATE_RANGE_GAP
          return DATE_RANGE_GAP;
        case 7: // SORT_ORDER
          return SORT_ORDER;
        case 8: // SORT_ASCENDING
          return SORT_ASCENDING;
        case 90: // SELECTED_VALUES
          return SELECTED_VALUES;
        case 100: // AND_SELECTED_VALUES
          return AND_SELECTED_VALUES;
        case 110: // BOUNDS_ONLY
          return BOUNDS_ONLY;
        case 120: // EVALUATE
          return EVALUATE;
        case 130: // DISPLAY
          return DISPLAY;
        case 140: // EXTRA_INFO
          return EXTRA_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMERICAL_ISSET_ID = 0;
  private static final int __RANGE_ISSET_ID = 1;
  private static final int __MAXCOUNT_ISSET_ID = 2;
  private static final int __MINPOPULATION_ISSET_ID = 3;
  private static final int __SORTASCENDING_ISSET_ID = 4;
  private static final int __ANDSELECTEDVALUES_ISSET_ID = 5;
  private static final int __BOUNDSONLY_ISSET_ID = 6;
  private static final int __EVALUATE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("fieldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMERICAL, new org.apache.thrift.meta_data.FieldMetaData("numerical", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData("range", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MAX_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_POPULATION, new org.apache.thrift.meta_data.FieldMetaData("minPopulation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE_RANGE_GAP, new org.apache.thrift.meta_data.FieldMetaData("dateRangeGap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DateRangeGap.class)));
    tmpMap.put(_Fields.SORT_ORDER, new org.apache.thrift.meta_data.FieldMetaData("sortOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FacetSortOrder.class)));
    tmpMap.put(_Fields.SORT_ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("sortAscending", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SELECTED_VALUES, new org.apache.thrift.meta_data.FieldMetaData("selectedValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FacetValue.class))));
    tmpMap.put(_Fields.AND_SELECTED_VALUES, new org.apache.thrift.meta_data.FieldMetaData("andSelectedValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BOUNDS_ONLY, new org.apache.thrift.meta_data.FieldMetaData("boundsOnly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EVALUATE, new org.apache.thrift.meta_data.FieldMetaData("evaluate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISPLAY, new org.apache.thrift.meta_data.FieldMetaData("display", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTRA_INFO, new org.apache.thrift.meta_data.FieldMetaData("extraInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FacetRequest.class, metaDataMap);
  }

  public FacetRequest() {
    this.maxCount = -1;

    this.minPopulation = 1;

    this.andSelectedValues = false;

    this.boundsOnly = false;

    this.evaluate = true;

  }

  public FacetRequest(
    java.lang.String fieldName,
    boolean numerical,
    boolean range,
    int maxCount,
    int minPopulation,
    DateRangeGap dateRangeGap,
    FacetSortOrder sortOrder,
    boolean sortAscending,
    java.util.List<FacetValue> selectedValues,
    boolean andSelectedValues,
    boolean boundsOnly,
    boolean evaluate,
    java.lang.String display,
    java.util.Map<java.lang.String,java.lang.String> extraInfo)
  {
    this();
    this.fieldName = fieldName;
    this.numerical = numerical;
    setNumericalIsSet(true);
    this.range = range;
    setRangeIsSet(true);
    this.maxCount = maxCount;
    setMaxCountIsSet(true);
    this.minPopulation = minPopulation;
    setMinPopulationIsSet(true);
    this.dateRangeGap = dateRangeGap;
    this.sortOrder = sortOrder;
    this.sortAscending = sortAscending;
    setSortAscendingIsSet(true);
    this.selectedValues = selectedValues;
    this.andSelectedValues = andSelectedValues;
    setAndSelectedValuesIsSet(true);
    this.boundsOnly = boundsOnly;
    setBoundsOnlyIsSet(true);
    this.evaluate = evaluate;
    setEvaluateIsSet(true);
    this.display = display;
    this.extraInfo = extraInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FacetRequest(FacetRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFieldName()) {
      this.fieldName = other.fieldName;
    }
    this.numerical = other.numerical;
    this.range = other.range;
    this.maxCount = other.maxCount;
    this.minPopulation = other.minPopulation;
    if (other.isSetDateRangeGap()) {
      this.dateRangeGap = other.dateRangeGap;
    }
    if (other.isSetSortOrder()) {
      this.sortOrder = other.sortOrder;
    }
    this.sortAscending = other.sortAscending;
    if (other.isSetSelectedValues()) {
      java.util.List<FacetValue> __this__selectedValues = new java.util.ArrayList<FacetValue>(other.selectedValues.size());
      for (FacetValue other_element : other.selectedValues) {
        __this__selectedValues.add(new FacetValue(other_element));
      }
      this.selectedValues = __this__selectedValues;
    }
    this.andSelectedValues = other.andSelectedValues;
    this.boundsOnly = other.boundsOnly;
    this.evaluate = other.evaluate;
    if (other.isSetDisplay()) {
      this.display = other.display;
    }
    if (other.isSetExtraInfo()) {
      java.util.Map<java.lang.String,java.lang.String> __this__extraInfo = new java.util.HashMap<java.lang.String,java.lang.String>(other.extraInfo);
      this.extraInfo = __this__extraInfo;
    }
  }

  public FacetRequest deepCopy() {
    return new FacetRequest(this);
  }

  @Override
  public void clear() {
    this.fieldName = null;
    setNumericalIsSet(false);
    this.numerical = false;
    setRangeIsSet(false);
    this.range = false;
    this.maxCount = -1;

    this.minPopulation = 1;

    this.dateRangeGap = null;
    this.sortOrder = null;
    setSortAscendingIsSet(false);
    this.sortAscending = false;
    this.selectedValues = null;
    this.andSelectedValues = false;

    this.boundsOnly = false;

    this.evaluate = true;

    this.display = null;
    this.extraInfo = null;
  }

  public java.lang.String getFieldName() {
    return this.fieldName;
  }

  public FacetRequest setFieldName(java.lang.String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  public void unsetFieldName() {
    this.fieldName = null;
  }

  /** Returns true if field fieldName is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldName() {
    return this.fieldName != null;
  }

  public void setFieldNameIsSet(boolean value) {
    if (!value) {
      this.fieldName = null;
    }
  }

  public boolean isNumerical() {
    return this.numerical;
  }

  public FacetRequest setNumerical(boolean numerical) {
    this.numerical = numerical;
    setNumericalIsSet(true);
    return this;
  }

  public void unsetNumerical() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMERICAL_ISSET_ID);
  }

  /** Returns true if field numerical is set (has been assigned a value) and false otherwise */
  public boolean isSetNumerical() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMERICAL_ISSET_ID);
  }

  public void setNumericalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMERICAL_ISSET_ID, value);
  }

  public boolean isRange() {
    return this.range;
  }

  public FacetRequest setRange(boolean range) {
    this.range = range;
    setRangeIsSet(true);
    return this;
  }

  public void unsetRange() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RANGE_ISSET_ID);
  }

  /** Returns true if field range is set (has been assigned a value) and false otherwise */
  public boolean isSetRange() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RANGE_ISSET_ID);
  }

  public void setRangeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RANGE_ISSET_ID, value);
  }

  public int getMaxCount() {
    return this.maxCount;
  }

  public FacetRequest setMaxCount(int maxCount) {
    this.maxCount = maxCount;
    setMaxCountIsSet(true);
    return this;
  }

  public void unsetMaxCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXCOUNT_ISSET_ID);
  }

  /** Returns true if field maxCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXCOUNT_ISSET_ID);
  }

  public void setMaxCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXCOUNT_ISSET_ID, value);
  }

  public int getMinPopulation() {
    return this.minPopulation;
  }

  public FacetRequest setMinPopulation(int minPopulation) {
    this.minPopulation = minPopulation;
    setMinPopulationIsSet(true);
    return this;
  }

  public void unsetMinPopulation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINPOPULATION_ISSET_ID);
  }

  /** Returns true if field minPopulation is set (has been assigned a value) and false otherwise */
  public boolean isSetMinPopulation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINPOPULATION_ISSET_ID);
  }

  public void setMinPopulationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINPOPULATION_ISSET_ID, value);
  }

  /**
   * 
   * @see DateRangeGap
   */
  public DateRangeGap getDateRangeGap() {
    return this.dateRangeGap;
  }

  /**
   * 
   * @see DateRangeGap
   */
  public FacetRequest setDateRangeGap(DateRangeGap dateRangeGap) {
    this.dateRangeGap = dateRangeGap;
    return this;
  }

  public void unsetDateRangeGap() {
    this.dateRangeGap = null;
  }

  /** Returns true if field dateRangeGap is set (has been assigned a value) and false otherwise */
  public boolean isSetDateRangeGap() {
    return this.dateRangeGap != null;
  }

  public void setDateRangeGapIsSet(boolean value) {
    if (!value) {
      this.dateRangeGap = null;
    }
  }

  /**
   * 
   * @see FacetSortOrder
   */
  public FacetSortOrder getSortOrder() {
    return this.sortOrder;
  }

  /**
   * 
   * @see FacetSortOrder
   */
  public FacetRequest setSortOrder(FacetSortOrder sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  public void unsetSortOrder() {
    this.sortOrder = null;
  }

  /** Returns true if field sortOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetSortOrder() {
    return this.sortOrder != null;
  }

  public void setSortOrderIsSet(boolean value) {
    if (!value) {
      this.sortOrder = null;
    }
  }

  public boolean isSortAscending() {
    return this.sortAscending;
  }

  public FacetRequest setSortAscending(boolean sortAscending) {
    this.sortAscending = sortAscending;
    setSortAscendingIsSet(true);
    return this;
  }

  public void unsetSortAscending() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SORTASCENDING_ISSET_ID);
  }

  /** Returns true if field sortAscending is set (has been assigned a value) and false otherwise */
  public boolean isSetSortAscending() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SORTASCENDING_ISSET_ID);
  }

  public void setSortAscendingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SORTASCENDING_ISSET_ID, value);
  }

  public int getSelectedValuesSize() {
    return (this.selectedValues == null) ? 0 : this.selectedValues.size();
  }

  public java.util.Iterator<FacetValue> getSelectedValuesIterator() {
    return (this.selectedValues == null) ? null : this.selectedValues.iterator();
  }

  public void addToSelectedValues(FacetValue elem) {
    if (this.selectedValues == null) {
      this.selectedValues = new java.util.ArrayList<FacetValue>();
    }
    this.selectedValues.add(elem);
  }

  public java.util.List<FacetValue> getSelectedValues() {
    return this.selectedValues;
  }

  public FacetRequest setSelectedValues(java.util.List<FacetValue> selectedValues) {
    this.selectedValues = selectedValues;
    return this;
  }

  public void unsetSelectedValues() {
    this.selectedValues = null;
  }

  /** Returns true if field selectedValues is set (has been assigned a value) and false otherwise */
  public boolean isSetSelectedValues() {
    return this.selectedValues != null;
  }

  public void setSelectedValuesIsSet(boolean value) {
    if (!value) {
      this.selectedValues = null;
    }
  }

  public boolean isAndSelectedValues() {
    return this.andSelectedValues;
  }

  public FacetRequest setAndSelectedValues(boolean andSelectedValues) {
    this.andSelectedValues = andSelectedValues;
    setAndSelectedValuesIsSet(true);
    return this;
  }

  public void unsetAndSelectedValues() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANDSELECTEDVALUES_ISSET_ID);
  }

  /** Returns true if field andSelectedValues is set (has been assigned a value) and false otherwise */
  public boolean isSetAndSelectedValues() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANDSELECTEDVALUES_ISSET_ID);
  }

  public void setAndSelectedValuesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANDSELECTEDVALUES_ISSET_ID, value);
  }

  public boolean isBoundsOnly() {
    return this.boundsOnly;
  }

  public FacetRequest setBoundsOnly(boolean boundsOnly) {
    this.boundsOnly = boundsOnly;
    setBoundsOnlyIsSet(true);
    return this;
  }

  public void unsetBoundsOnly() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOUNDSONLY_ISSET_ID);
  }

  /** Returns true if field boundsOnly is set (has been assigned a value) and false otherwise */
  public boolean isSetBoundsOnly() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOUNDSONLY_ISSET_ID);
  }

  public void setBoundsOnlyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOUNDSONLY_ISSET_ID, value);
  }

  public boolean isEvaluate() {
    return this.evaluate;
  }

  public FacetRequest setEvaluate(boolean evaluate) {
    this.evaluate = evaluate;
    setEvaluateIsSet(true);
    return this;
  }

  public void unsetEvaluate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EVALUATE_ISSET_ID);
  }

  /** Returns true if field evaluate is set (has been assigned a value) and false otherwise */
  public boolean isSetEvaluate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EVALUATE_ISSET_ID);
  }

  public void setEvaluateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EVALUATE_ISSET_ID, value);
  }

  public java.lang.String getDisplay() {
    return this.display;
  }

  public FacetRequest setDisplay(java.lang.String display) {
    this.display = display;
    return this;
  }

  public void unsetDisplay() {
    this.display = null;
  }

  /** Returns true if field display is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplay() {
    return this.display != null;
  }

  public void setDisplayIsSet(boolean value) {
    if (!value) {
      this.display = null;
    }
  }

  public int getExtraInfoSize() {
    return (this.extraInfo == null) ? 0 : this.extraInfo.size();
  }

  public void putToExtraInfo(java.lang.String key, java.lang.String val) {
    if (this.extraInfo == null) {
      this.extraInfo = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.extraInfo.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getExtraInfo() {
    return this.extraInfo;
  }

  public FacetRequest setExtraInfo(java.util.Map<java.lang.String,java.lang.String> extraInfo) {
    this.extraInfo = extraInfo;
    return this;
  }

  public void unsetExtraInfo() {
    this.extraInfo = null;
  }

  /** Returns true if field extraInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraInfo() {
    return this.extraInfo != null;
  }

  public void setExtraInfoIsSet(boolean value) {
    if (!value) {
      this.extraInfo = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FIELD_NAME:
      if (value == null) {
        unsetFieldName();
      } else {
        setFieldName((java.lang.String)value);
      }
      break;

    case NUMERICAL:
      if (value == null) {
        unsetNumerical();
      } else {
        setNumerical((java.lang.Boolean)value);
      }
      break;

    case RANGE:
      if (value == null) {
        unsetRange();
      } else {
        setRange((java.lang.Boolean)value);
      }
      break;

    case MAX_COUNT:
      if (value == null) {
        unsetMaxCount();
      } else {
        setMaxCount((java.lang.Integer)value);
      }
      break;

    case MIN_POPULATION:
      if (value == null) {
        unsetMinPopulation();
      } else {
        setMinPopulation((java.lang.Integer)value);
      }
      break;

    case DATE_RANGE_GAP:
      if (value == null) {
        unsetDateRangeGap();
      } else {
        setDateRangeGap((DateRangeGap)value);
      }
      break;

    case SORT_ORDER:
      if (value == null) {
        unsetSortOrder();
      } else {
        setSortOrder((FacetSortOrder)value);
      }
      break;

    case SORT_ASCENDING:
      if (value == null) {
        unsetSortAscending();
      } else {
        setSortAscending((java.lang.Boolean)value);
      }
      break;

    case SELECTED_VALUES:
      if (value == null) {
        unsetSelectedValues();
      } else {
        setSelectedValues((java.util.List<FacetValue>)value);
      }
      break;

    case AND_SELECTED_VALUES:
      if (value == null) {
        unsetAndSelectedValues();
      } else {
        setAndSelectedValues((java.lang.Boolean)value);
      }
      break;

    case BOUNDS_ONLY:
      if (value == null) {
        unsetBoundsOnly();
      } else {
        setBoundsOnly((java.lang.Boolean)value);
      }
      break;

    case EVALUATE:
      if (value == null) {
        unsetEvaluate();
      } else {
        setEvaluate((java.lang.Boolean)value);
      }
      break;

    case DISPLAY:
      if (value == null) {
        unsetDisplay();
      } else {
        setDisplay((java.lang.String)value);
      }
      break;

    case EXTRA_INFO:
      if (value == null) {
        unsetExtraInfo();
      } else {
        setExtraInfo((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD_NAME:
      return getFieldName();

    case NUMERICAL:
      return isNumerical();

    case RANGE:
      return isRange();

    case MAX_COUNT:
      return getMaxCount();

    case MIN_POPULATION:
      return getMinPopulation();

    case DATE_RANGE_GAP:
      return getDateRangeGap();

    case SORT_ORDER:
      return getSortOrder();

    case SORT_ASCENDING:
      return isSortAscending();

    case SELECTED_VALUES:
      return getSelectedValues();

    case AND_SELECTED_VALUES:
      return isAndSelectedValues();

    case BOUNDS_ONLY:
      return isBoundsOnly();

    case EVALUATE:
      return isEvaluate();

    case DISPLAY:
      return getDisplay();

    case EXTRA_INFO:
      return getExtraInfo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FIELD_NAME:
      return isSetFieldName();
    case NUMERICAL:
      return isSetNumerical();
    case RANGE:
      return isSetRange();
    case MAX_COUNT:
      return isSetMaxCount();
    case MIN_POPULATION:
      return isSetMinPopulation();
    case DATE_RANGE_GAP:
      return isSetDateRangeGap();
    case SORT_ORDER:
      return isSetSortOrder();
    case SORT_ASCENDING:
      return isSetSortAscending();
    case SELECTED_VALUES:
      return isSetSelectedValues();
    case AND_SELECTED_VALUES:
      return isSetAndSelectedValues();
    case BOUNDS_ONLY:
      return isSetBoundsOnly();
    case EVALUATE:
      return isSetEvaluate();
    case DISPLAY:
      return isSetDisplay();
    case EXTRA_INFO:
      return isSetExtraInfo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof FacetRequest)
      return this.equals((FacetRequest)that);
    return false;
  }

  public boolean equals(FacetRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fieldName = true && this.isSetFieldName();
    boolean that_present_fieldName = true && that.isSetFieldName();
    if (this_present_fieldName || that_present_fieldName) {
      if (!(this_present_fieldName && that_present_fieldName))
        return false;
      if (!this.fieldName.equals(that.fieldName))
        return false;
    }

    boolean this_present_numerical = true;
    boolean that_present_numerical = true;
    if (this_present_numerical || that_present_numerical) {
      if (!(this_present_numerical && that_present_numerical))
        return false;
      if (this.numerical != that.numerical)
        return false;
    }

    boolean this_present_range = true;
    boolean that_present_range = true;
    if (this_present_range || that_present_range) {
      if (!(this_present_range && that_present_range))
        return false;
      if (this.range != that.range)
        return false;
    }

    boolean this_present_maxCount = true;
    boolean that_present_maxCount = true;
    if (this_present_maxCount || that_present_maxCount) {
      if (!(this_present_maxCount && that_present_maxCount))
        return false;
      if (this.maxCount != that.maxCount)
        return false;
    }

    boolean this_present_minPopulation = true;
    boolean that_present_minPopulation = true;
    if (this_present_minPopulation || that_present_minPopulation) {
      if (!(this_present_minPopulation && that_present_minPopulation))
        return false;
      if (this.minPopulation != that.minPopulation)
        return false;
    }

    boolean this_present_dateRangeGap = true && this.isSetDateRangeGap();
    boolean that_present_dateRangeGap = true && that.isSetDateRangeGap();
    if (this_present_dateRangeGap || that_present_dateRangeGap) {
      if (!(this_present_dateRangeGap && that_present_dateRangeGap))
        return false;
      if (!this.dateRangeGap.equals(that.dateRangeGap))
        return false;
    }

    boolean this_present_sortOrder = true && this.isSetSortOrder();
    boolean that_present_sortOrder = true && that.isSetSortOrder();
    if (this_present_sortOrder || that_present_sortOrder) {
      if (!(this_present_sortOrder && that_present_sortOrder))
        return false;
      if (!this.sortOrder.equals(that.sortOrder))
        return false;
    }

    boolean this_present_sortAscending = true;
    boolean that_present_sortAscending = true;
    if (this_present_sortAscending || that_present_sortAscending) {
      if (!(this_present_sortAscending && that_present_sortAscending))
        return false;
      if (this.sortAscending != that.sortAscending)
        return false;
    }

    boolean this_present_selectedValues = true && this.isSetSelectedValues();
    boolean that_present_selectedValues = true && that.isSetSelectedValues();
    if (this_present_selectedValues || that_present_selectedValues) {
      if (!(this_present_selectedValues && that_present_selectedValues))
        return false;
      if (!this.selectedValues.equals(that.selectedValues))
        return false;
    }

    boolean this_present_andSelectedValues = true;
    boolean that_present_andSelectedValues = true;
    if (this_present_andSelectedValues || that_present_andSelectedValues) {
      if (!(this_present_andSelectedValues && that_present_andSelectedValues))
        return false;
      if (this.andSelectedValues != that.andSelectedValues)
        return false;
    }

    boolean this_present_boundsOnly = true;
    boolean that_present_boundsOnly = true;
    if (this_present_boundsOnly || that_present_boundsOnly) {
      if (!(this_present_boundsOnly && that_present_boundsOnly))
        return false;
      if (this.boundsOnly != that.boundsOnly)
        return false;
    }

    boolean this_present_evaluate = true;
    boolean that_present_evaluate = true;
    if (this_present_evaluate || that_present_evaluate) {
      if (!(this_present_evaluate && that_present_evaluate))
        return false;
      if (this.evaluate != that.evaluate)
        return false;
    }

    boolean this_present_display = true && this.isSetDisplay();
    boolean that_present_display = true && that.isSetDisplay();
    if (this_present_display || that_present_display) {
      if (!(this_present_display && that_present_display))
        return false;
      if (!this.display.equals(that.display))
        return false;
    }

    boolean this_present_extraInfo = true && this.isSetExtraInfo();
    boolean that_present_extraInfo = true && that.isSetExtraInfo();
    if (this_present_extraInfo || that_present_extraInfo) {
      if (!(this_present_extraInfo && that_present_extraInfo))
        return false;
      if (!this.extraInfo.equals(that.extraInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFieldName()) ? 131071 : 524287);
    if (isSetFieldName())
      hashCode = hashCode * 8191 + fieldName.hashCode();

    hashCode = hashCode * 8191 + ((numerical) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((range) ? 131071 : 524287);

    hashCode = hashCode * 8191 + maxCount;

    hashCode = hashCode * 8191 + minPopulation;

    hashCode = hashCode * 8191 + ((isSetDateRangeGap()) ? 131071 : 524287);
    if (isSetDateRangeGap())
      hashCode = hashCode * 8191 + dateRangeGap.getValue();

    hashCode = hashCode * 8191 + ((isSetSortOrder()) ? 131071 : 524287);
    if (isSetSortOrder())
      hashCode = hashCode * 8191 + sortOrder.getValue();

    hashCode = hashCode * 8191 + ((sortAscending) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSelectedValues()) ? 131071 : 524287);
    if (isSetSelectedValues())
      hashCode = hashCode * 8191 + selectedValues.hashCode();

    hashCode = hashCode * 8191 + ((andSelectedValues) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((boundsOnly) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((evaluate) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDisplay()) ? 131071 : 524287);
    if (isSetDisplay())
      hashCode = hashCode * 8191 + display.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtraInfo()) ? 131071 : 524287);
    if (isSetExtraInfo())
      hashCode = hashCode * 8191 + extraInfo.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(FacetRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFieldName()).compareTo(other.isSetFieldName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldName, other.fieldName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumerical()).compareTo(other.isSetNumerical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumerical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numerical, other.numerical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRange()).compareTo(other.isSetRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range, other.range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxCount()).compareTo(other.isSetMaxCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCount, other.maxCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMinPopulation()).compareTo(other.isSetMinPopulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinPopulation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minPopulation, other.minPopulation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDateRangeGap()).compareTo(other.isSetDateRangeGap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateRangeGap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateRangeGap, other.dateRangeGap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSortOrder()).compareTo(other.isSetSortOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortOrder, other.sortOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSortAscending()).compareTo(other.isSetSortAscending());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortAscending()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortAscending, other.sortAscending);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSelectedValues()).compareTo(other.isSetSelectedValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelectedValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectedValues, other.selectedValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAndSelectedValues()).compareTo(other.isSetAndSelectedValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAndSelectedValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.andSelectedValues, other.andSelectedValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBoundsOnly()).compareTo(other.isSetBoundsOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoundsOnly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boundsOnly, other.boundsOnly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEvaluate()).compareTo(other.isSetEvaluate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvaluate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evaluate, other.evaluate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisplay()).compareTo(other.isSetDisplay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.display, other.display);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExtraInfo()).compareTo(other.isSetExtraInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraInfo, other.extraInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FacetRequest(");
    boolean first = true;

    sb.append("fieldName:");
    if (this.fieldName == null) {
      sb.append("null");
    } else {
      sb.append(this.fieldName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numerical:");
    sb.append(this.numerical);
    first = false;
    if (!first) sb.append(", ");
    sb.append("range:");
    sb.append(this.range);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxCount:");
    sb.append(this.maxCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minPopulation:");
    sb.append(this.minPopulation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateRangeGap:");
    if (this.dateRangeGap == null) {
      sb.append("null");
    } else {
      sb.append(this.dateRangeGap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortOrder:");
    if (this.sortOrder == null) {
      sb.append("null");
    } else {
      sb.append(this.sortOrder);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortAscending:");
    sb.append(this.sortAscending);
    first = false;
    if (!first) sb.append(", ");
    sb.append("selectedValues:");
    if (this.selectedValues == null) {
      sb.append("null");
    } else {
      sb.append(this.selectedValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("andSelectedValues:");
    sb.append(this.andSelectedValues);
    first = false;
    if (!first) sb.append(", ");
    sb.append("boundsOnly:");
    sb.append(this.boundsOnly);
    first = false;
    if (!first) sb.append(", ");
    sb.append("evaluate:");
    sb.append(this.evaluate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("display:");
    if (this.display == null) {
      sb.append("null");
    } else {
      sb.append(this.display);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extraInfo:");
    if (this.extraInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.extraInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FacetRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FacetRequestStandardScheme getScheme() {
      return new FacetRequestStandardScheme();
    }
  }

  private static class FacetRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<FacetRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FacetRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldName = iprot.readString();
              struct.setFieldNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUMERICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.numerical = iprot.readBool();
              struct.setNumericalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.range = iprot.readBool();
              struct.setRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxCount = iprot.readI32();
              struct.setMaxCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MIN_POPULATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minPopulation = iprot.readI32();
              struct.setMinPopulationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATE_RANGE_GAP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dateRangeGap = com.boxalino.p13n.api.thrift.DateRangeGap.findByValue(iprot.readI32());
              struct.setDateRangeGapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SORT_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortOrder = com.boxalino.p13n.api.thrift.FacetSortOrder.findByValue(iprot.readI32());
              struct.setSortOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SORT_ASCENDING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sortAscending = iprot.readBool();
              struct.setSortAscendingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 90: // SELECTED_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.selectedValues = new java.util.ArrayList<FacetValue>(_list24.size);
                FacetValue _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new FacetValue();
                  _elem25.read(iprot);
                  struct.selectedValues.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setSelectedValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // AND_SELECTED_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.andSelectedValues = iprot.readBool();
              struct.setAndSelectedValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 110: // BOUNDS_ONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boundsOnly = iprot.readBool();
              struct.setBoundsOnlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 120: // EVALUATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.evaluate = iprot.readBool();
              struct.setEvaluateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 130: // DISPLAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.display = iprot.readString();
              struct.setDisplayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 140: // EXTRA_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map27 = iprot.readMapBegin();
                struct.extraInfo = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map27.size);
                java.lang.String _key28;
                java.lang.String _val29;
                for (int _i30 = 0; _i30 < _map27.size; ++_i30)
                {
                  _key28 = iprot.readString();
                  _val29 = iprot.readString();
                  struct.extraInfo.put(_key28, _val29);
                }
                iprot.readMapEnd();
              }
              struct.setExtraInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FacetRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fieldName != null) {
        oprot.writeFieldBegin(FIELD_NAME_FIELD_DESC);
        oprot.writeString(struct.fieldName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUMERICAL_FIELD_DESC);
      oprot.writeBool(struct.numerical);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RANGE_FIELD_DESC);
      oprot.writeBool(struct.range);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_COUNT_FIELD_DESC);
      oprot.writeI32(struct.maxCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_POPULATION_FIELD_DESC);
      oprot.writeI32(struct.minPopulation);
      oprot.writeFieldEnd();
      if (struct.dateRangeGap != null) {
        oprot.writeFieldBegin(DATE_RANGE_GAP_FIELD_DESC);
        oprot.writeI32(struct.dateRangeGap.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.sortOrder != null) {
        oprot.writeFieldBegin(SORT_ORDER_FIELD_DESC);
        oprot.writeI32(struct.sortOrder.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SORT_ASCENDING_FIELD_DESC);
      oprot.writeBool(struct.sortAscending);
      oprot.writeFieldEnd();
      if (struct.selectedValues != null) {
        oprot.writeFieldBegin(SELECTED_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.selectedValues.size()));
          for (FacetValue _iter31 : struct.selectedValues)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AND_SELECTED_VALUES_FIELD_DESC);
      oprot.writeBool(struct.andSelectedValues);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOUNDS_ONLY_FIELD_DESC);
      oprot.writeBool(struct.boundsOnly);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EVALUATE_FIELD_DESC);
      oprot.writeBool(struct.evaluate);
      oprot.writeFieldEnd();
      if (struct.display != null) {
        oprot.writeFieldBegin(DISPLAY_FIELD_DESC);
        oprot.writeString(struct.display);
        oprot.writeFieldEnd();
      }
      if (struct.extraInfo != null) {
        oprot.writeFieldBegin(EXTRA_INFO_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraInfo.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter32 : struct.extraInfo.entrySet())
          {
            oprot.writeString(_iter32.getKey());
            oprot.writeString(_iter32.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FacetRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FacetRequestTupleScheme getScheme() {
      return new FacetRequestTupleScheme();
    }
  }

  private static class FacetRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<FacetRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FacetRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFieldName()) {
        optionals.set(0);
      }
      if (struct.isSetNumerical()) {
        optionals.set(1);
      }
      if (struct.isSetRange()) {
        optionals.set(2);
      }
      if (struct.isSetMaxCount()) {
        optionals.set(3);
      }
      if (struct.isSetMinPopulation()) {
        optionals.set(4);
      }
      if (struct.isSetDateRangeGap()) {
        optionals.set(5);
      }
      if (struct.isSetSortOrder()) {
        optionals.set(6);
      }
      if (struct.isSetSortAscending()) {
        optionals.set(7);
      }
      if (struct.isSetSelectedValues()) {
        optionals.set(8);
      }
      if (struct.isSetAndSelectedValues()) {
        optionals.set(9);
      }
      if (struct.isSetBoundsOnly()) {
        optionals.set(10);
      }
      if (struct.isSetEvaluate()) {
        optionals.set(11);
      }
      if (struct.isSetDisplay()) {
        optionals.set(12);
      }
      if (struct.isSetExtraInfo()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetFieldName()) {
        oprot.writeString(struct.fieldName);
      }
      if (struct.isSetNumerical()) {
        oprot.writeBool(struct.numerical);
      }
      if (struct.isSetRange()) {
        oprot.writeBool(struct.range);
      }
      if (struct.isSetMaxCount()) {
        oprot.writeI32(struct.maxCount);
      }
      if (struct.isSetMinPopulation()) {
        oprot.writeI32(struct.minPopulation);
      }
      if (struct.isSetDateRangeGap()) {
        oprot.writeI32(struct.dateRangeGap.getValue());
      }
      if (struct.isSetSortOrder()) {
        oprot.writeI32(struct.sortOrder.getValue());
      }
      if (struct.isSetSortAscending()) {
        oprot.writeBool(struct.sortAscending);
      }
      if (struct.isSetSelectedValues()) {
        {
          oprot.writeI32(struct.selectedValues.size());
          for (FacetValue _iter33 : struct.selectedValues)
          {
            _iter33.write(oprot);
          }
        }
      }
      if (struct.isSetAndSelectedValues()) {
        oprot.writeBool(struct.andSelectedValues);
      }
      if (struct.isSetBoundsOnly()) {
        oprot.writeBool(struct.boundsOnly);
      }
      if (struct.isSetEvaluate()) {
        oprot.writeBool(struct.evaluate);
      }
      if (struct.isSetDisplay()) {
        oprot.writeString(struct.display);
      }
      if (struct.isSetExtraInfo()) {
        {
          oprot.writeI32(struct.extraInfo.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter34 : struct.extraInfo.entrySet())
          {
            oprot.writeString(_iter34.getKey());
            oprot.writeString(_iter34.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FacetRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.fieldName = iprot.readString();
        struct.setFieldNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.numerical = iprot.readBool();
        struct.setNumericalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.range = iprot.readBool();
        struct.setRangeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.maxCount = iprot.readI32();
        struct.setMaxCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.minPopulation = iprot.readI32();
        struct.setMinPopulationIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dateRangeGap = com.boxalino.p13n.api.thrift.DateRangeGap.findByValue(iprot.readI32());
        struct.setDateRangeGapIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sortOrder = com.boxalino.p13n.api.thrift.FacetSortOrder.findByValue(iprot.readI32());
        struct.setSortOrderIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sortAscending = iprot.readBool();
        struct.setSortAscendingIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list35 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.selectedValues = new java.util.ArrayList<FacetValue>(_list35.size);
          FacetValue _elem36;
          for (int _i37 = 0; _i37 < _list35.size; ++_i37)
          {
            _elem36 = new FacetValue();
            _elem36.read(iprot);
            struct.selectedValues.add(_elem36);
          }
        }
        struct.setSelectedValuesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.andSelectedValues = iprot.readBool();
        struct.setAndSelectedValuesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.boundsOnly = iprot.readBool();
        struct.setBoundsOnlyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.evaluate = iprot.readBool();
        struct.setEvaluateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.display = iprot.readString();
        struct.setDisplayIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TMap _map38 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraInfo = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map38.size);
          java.lang.String _key39;
          java.lang.String _val40;
          for (int _i41 = 0; _i41 < _map38.size; ++_i41)
          {
            _key39 = iprot.readString();
            _val40 = iprot.readString();
            struct.extraInfo.put(_key39, _val40);
          }
        }
        struct.setExtraInfoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

