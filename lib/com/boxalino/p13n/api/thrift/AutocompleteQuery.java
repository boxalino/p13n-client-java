/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-11")
public class AutocompleteQuery implements org.apache.thrift.TBase<AutocompleteQuery, AutocompleteQuery._Fields>, java.io.Serializable, Cloneable, Comparable<AutocompleteQuery> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AutocompleteQuery");

  private static final org.apache.thrift.protocol.TField INDEX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("indexId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField QUERY_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryText", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField SUGGESTIONS_HIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("suggestionsHitCount", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField HIGHLIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("highlight", org.apache.thrift.protocol.TType.BOOL, (short)51);
  private static final org.apache.thrift.protocol.TField HIGHLIGHT_PRE_FIELD_DESC = new org.apache.thrift.protocol.TField("highlightPre", org.apache.thrift.protocol.TType.STRING, (short)61);
  private static final org.apache.thrift.protocol.TField HIGHLIGHT_POST_FIELD_DESC = new org.apache.thrift.protocol.TField("highlightPost", org.apache.thrift.protocol.TType.STRING, (short)71);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AutocompleteQueryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AutocompleteQueryTupleSchemeFactory());
  }

  public String indexId; // required
  public String language; // required
  public String queryText; // required
  public int suggestionsHitCount; // required
  public boolean highlight; // required
  public String highlightPre; // required
  public String highlightPost; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX_ID((short)11, "indexId"),
    LANGUAGE((short)21, "language"),
    QUERY_TEXT((short)31, "queryText"),
    SUGGESTIONS_HIT_COUNT((short)41, "suggestionsHitCount"),
    HIGHLIGHT((short)51, "highlight"),
    HIGHLIGHT_PRE((short)61, "highlightPre"),
    HIGHLIGHT_POST((short)71, "highlightPost");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 11: // INDEX_ID
          return INDEX_ID;
        case 21: // LANGUAGE
          return LANGUAGE;
        case 31: // QUERY_TEXT
          return QUERY_TEXT;
        case 41: // SUGGESTIONS_HIT_COUNT
          return SUGGESTIONS_HIT_COUNT;
        case 51: // HIGHLIGHT
          return HIGHLIGHT;
        case 61: // HIGHLIGHT_PRE
          return HIGHLIGHT_PRE;
        case 71: // HIGHLIGHT_POST
          return HIGHLIGHT_POST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUGGESTIONSHITCOUNT_ISSET_ID = 0;
  private static final int __HIGHLIGHT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX_ID, new org.apache.thrift.meta_data.FieldMetaData("indexId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_TEXT, new org.apache.thrift.meta_data.FieldMetaData("queryText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUGGESTIONS_HIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("suggestionsHitCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HIGHLIGHT, new org.apache.thrift.meta_data.FieldMetaData("highlight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HIGHLIGHT_PRE, new org.apache.thrift.meta_data.FieldMetaData("highlightPre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIGHLIGHT_POST, new org.apache.thrift.meta_data.FieldMetaData("highlightPost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AutocompleteQuery.class, metaDataMap);
  }

  public AutocompleteQuery() {
    this.highlightPre = "<em>";

    this.highlightPost = "</em>";

  }

  public AutocompleteQuery(
    String indexId,
    String language,
    String queryText,
    int suggestionsHitCount,
    boolean highlight,
    String highlightPre,
    String highlightPost)
  {
    this();
    this.indexId = indexId;
    this.language = language;
    this.queryText = queryText;
    this.suggestionsHitCount = suggestionsHitCount;
    setSuggestionsHitCountIsSet(true);
    this.highlight = highlight;
    setHighlightIsSet(true);
    this.highlightPre = highlightPre;
    this.highlightPost = highlightPost;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AutocompleteQuery(AutocompleteQuery other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIndexId()) {
      this.indexId = other.indexId;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetQueryText()) {
      this.queryText = other.queryText;
    }
    this.suggestionsHitCount = other.suggestionsHitCount;
    this.highlight = other.highlight;
    if (other.isSetHighlightPre()) {
      this.highlightPre = other.highlightPre;
    }
    if (other.isSetHighlightPost()) {
      this.highlightPost = other.highlightPost;
    }
  }

  public AutocompleteQuery deepCopy() {
    return new AutocompleteQuery(this);
  }

  @Override
  public void clear() {
    this.indexId = null;
    this.language = null;
    this.queryText = null;
    setSuggestionsHitCountIsSet(false);
    this.suggestionsHitCount = 0;
    setHighlightIsSet(false);
    this.highlight = false;
    this.highlightPre = "<em>";

    this.highlightPost = "</em>";

  }

  public String getIndexId() {
    return this.indexId;
  }

  public AutocompleteQuery setIndexId(String indexId) {
    this.indexId = indexId;
    return this;
  }

  public void unsetIndexId() {
    this.indexId = null;
  }

  /** Returns true if field indexId is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexId() {
    return this.indexId != null;
  }

  public void setIndexIdIsSet(boolean value) {
    if (!value) {
      this.indexId = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public AutocompleteQuery setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public String getQueryText() {
    return this.queryText;
  }

  public AutocompleteQuery setQueryText(String queryText) {
    this.queryText = queryText;
    return this;
  }

  public void unsetQueryText() {
    this.queryText = null;
  }

  /** Returns true if field queryText is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryText() {
    return this.queryText != null;
  }

  public void setQueryTextIsSet(boolean value) {
    if (!value) {
      this.queryText = null;
    }
  }

  public int getSuggestionsHitCount() {
    return this.suggestionsHitCount;
  }

  public AutocompleteQuery setSuggestionsHitCount(int suggestionsHitCount) {
    this.suggestionsHitCount = suggestionsHitCount;
    setSuggestionsHitCountIsSet(true);
    return this;
  }

  public void unsetSuggestionsHitCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUGGESTIONSHITCOUNT_ISSET_ID);
  }

  /** Returns true if field suggestionsHitCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSuggestionsHitCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SUGGESTIONSHITCOUNT_ISSET_ID);
  }

  public void setSuggestionsHitCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUGGESTIONSHITCOUNT_ISSET_ID, value);
  }

  public boolean isHighlight() {
    return this.highlight;
  }

  public AutocompleteQuery setHighlight(boolean highlight) {
    this.highlight = highlight;
    setHighlightIsSet(true);
    return this;
  }

  public void unsetHighlight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIGHLIGHT_ISSET_ID);
  }

  /** Returns true if field highlight is set (has been assigned a value) and false otherwise */
  public boolean isSetHighlight() {
    return EncodingUtils.testBit(__isset_bitfield, __HIGHLIGHT_ISSET_ID);
  }

  public void setHighlightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIGHLIGHT_ISSET_ID, value);
  }

  public String getHighlightPre() {
    return this.highlightPre;
  }

  public AutocompleteQuery setHighlightPre(String highlightPre) {
    this.highlightPre = highlightPre;
    return this;
  }

  public void unsetHighlightPre() {
    this.highlightPre = null;
  }

  /** Returns true if field highlightPre is set (has been assigned a value) and false otherwise */
  public boolean isSetHighlightPre() {
    return this.highlightPre != null;
  }

  public void setHighlightPreIsSet(boolean value) {
    if (!value) {
      this.highlightPre = null;
    }
  }

  public String getHighlightPost() {
    return this.highlightPost;
  }

  public AutocompleteQuery setHighlightPost(String highlightPost) {
    this.highlightPost = highlightPost;
    return this;
  }

  public void unsetHighlightPost() {
    this.highlightPost = null;
  }

  /** Returns true if field highlightPost is set (has been assigned a value) and false otherwise */
  public boolean isSetHighlightPost() {
    return this.highlightPost != null;
  }

  public void setHighlightPostIsSet(boolean value) {
    if (!value) {
      this.highlightPost = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INDEX_ID:
      if (value == null) {
        unsetIndexId();
      } else {
        setIndexId((String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case QUERY_TEXT:
      if (value == null) {
        unsetQueryText();
      } else {
        setQueryText((String)value);
      }
      break;

    case SUGGESTIONS_HIT_COUNT:
      if (value == null) {
        unsetSuggestionsHitCount();
      } else {
        setSuggestionsHitCount((Integer)value);
      }
      break;

    case HIGHLIGHT:
      if (value == null) {
        unsetHighlight();
      } else {
        setHighlight((Boolean)value);
      }
      break;

    case HIGHLIGHT_PRE:
      if (value == null) {
        unsetHighlightPre();
      } else {
        setHighlightPre((String)value);
      }
      break;

    case HIGHLIGHT_POST:
      if (value == null) {
        unsetHighlightPost();
      } else {
        setHighlightPost((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX_ID:
      return getIndexId();

    case LANGUAGE:
      return getLanguage();

    case QUERY_TEXT:
      return getQueryText();

    case SUGGESTIONS_HIT_COUNT:
      return Integer.valueOf(getSuggestionsHitCount());

    case HIGHLIGHT:
      return Boolean.valueOf(isHighlight());

    case HIGHLIGHT_PRE:
      return getHighlightPre();

    case HIGHLIGHT_POST:
      return getHighlightPost();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INDEX_ID:
      return isSetIndexId();
    case LANGUAGE:
      return isSetLanguage();
    case QUERY_TEXT:
      return isSetQueryText();
    case SUGGESTIONS_HIT_COUNT:
      return isSetSuggestionsHitCount();
    case HIGHLIGHT:
      return isSetHighlight();
    case HIGHLIGHT_PRE:
      return isSetHighlightPre();
    case HIGHLIGHT_POST:
      return isSetHighlightPost();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AutocompleteQuery)
      return this.equals((AutocompleteQuery)that);
    return false;
  }

  public boolean equals(AutocompleteQuery that) {
    if (that == null)
      return false;

    boolean this_present_indexId = true && this.isSetIndexId();
    boolean that_present_indexId = true && that.isSetIndexId();
    if (this_present_indexId || that_present_indexId) {
      if (!(this_present_indexId && that_present_indexId))
        return false;
      if (!this.indexId.equals(that.indexId))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_queryText = true && this.isSetQueryText();
    boolean that_present_queryText = true && that.isSetQueryText();
    if (this_present_queryText || that_present_queryText) {
      if (!(this_present_queryText && that_present_queryText))
        return false;
      if (!this.queryText.equals(that.queryText))
        return false;
    }

    boolean this_present_suggestionsHitCount = true;
    boolean that_present_suggestionsHitCount = true;
    if (this_present_suggestionsHitCount || that_present_suggestionsHitCount) {
      if (!(this_present_suggestionsHitCount && that_present_suggestionsHitCount))
        return false;
      if (this.suggestionsHitCount != that.suggestionsHitCount)
        return false;
    }

    boolean this_present_highlight = true;
    boolean that_present_highlight = true;
    if (this_present_highlight || that_present_highlight) {
      if (!(this_present_highlight && that_present_highlight))
        return false;
      if (this.highlight != that.highlight)
        return false;
    }

    boolean this_present_highlightPre = true && this.isSetHighlightPre();
    boolean that_present_highlightPre = true && that.isSetHighlightPre();
    if (this_present_highlightPre || that_present_highlightPre) {
      if (!(this_present_highlightPre && that_present_highlightPre))
        return false;
      if (!this.highlightPre.equals(that.highlightPre))
        return false;
    }

    boolean this_present_highlightPost = true && this.isSetHighlightPost();
    boolean that_present_highlightPost = true && that.isSetHighlightPost();
    if (this_present_highlightPost || that_present_highlightPost) {
      if (!(this_present_highlightPost && that_present_highlightPost))
        return false;
      if (!this.highlightPost.equals(that.highlightPost))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_indexId = true && (isSetIndexId());
    list.add(present_indexId);
    if (present_indexId)
      list.add(indexId);

    boolean present_language = true && (isSetLanguage());
    list.add(present_language);
    if (present_language)
      list.add(language);

    boolean present_queryText = true && (isSetQueryText());
    list.add(present_queryText);
    if (present_queryText)
      list.add(queryText);

    boolean present_suggestionsHitCount = true;
    list.add(present_suggestionsHitCount);
    if (present_suggestionsHitCount)
      list.add(suggestionsHitCount);

    boolean present_highlight = true;
    list.add(present_highlight);
    if (present_highlight)
      list.add(highlight);

    boolean present_highlightPre = true && (isSetHighlightPre());
    list.add(present_highlightPre);
    if (present_highlightPre)
      list.add(highlightPre);

    boolean present_highlightPost = true && (isSetHighlightPost());
    list.add(present_highlightPost);
    if (present_highlightPost)
      list.add(highlightPost);

    return list.hashCode();
  }

  @Override
  public int compareTo(AutocompleteQuery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIndexId()).compareTo(other.isSetIndexId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexId, other.indexId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(other.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, other.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryText()).compareTo(other.isSetQueryText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryText, other.queryText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuggestionsHitCount()).compareTo(other.isSetSuggestionsHitCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuggestionsHitCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suggestionsHitCount, other.suggestionsHitCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlight()).compareTo(other.isSetHighlight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlight, other.highlight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlightPre()).compareTo(other.isSetHighlightPre());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlightPre()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlightPre, other.highlightPre);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlightPost()).compareTo(other.isSetHighlightPost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlightPost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlightPost, other.highlightPost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AutocompleteQuery(");
    boolean first = true;

    sb.append("indexId:");
    if (this.indexId == null) {
      sb.append("null");
    } else {
      sb.append(this.indexId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryText:");
    if (this.queryText == null) {
      sb.append("null");
    } else {
      sb.append(this.queryText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("suggestionsHitCount:");
    sb.append(this.suggestionsHitCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("highlight:");
    sb.append(this.highlight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("highlightPre:");
    if (this.highlightPre == null) {
      sb.append("null");
    } else {
      sb.append(this.highlightPre);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("highlightPost:");
    if (this.highlightPost == null) {
      sb.append("null");
    } else {
      sb.append(this.highlightPost);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AutocompleteQueryStandardSchemeFactory implements SchemeFactory {
    public AutocompleteQueryStandardScheme getScheme() {
      return new AutocompleteQueryStandardScheme();
    }
  }

  private static class AutocompleteQueryStandardScheme extends StandardScheme<AutocompleteQuery> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AutocompleteQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 11: // INDEX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.indexId = iprot.readString();
              struct.setIndexIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // QUERY_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryText = iprot.readString();
              struct.setQueryTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // SUGGESTIONS_HIT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.suggestionsHitCount = iprot.readI32();
              struct.setSuggestionsHitCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // HIGHLIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.highlight = iprot.readBool();
              struct.setHighlightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // HIGHLIGHT_PRE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.highlightPre = iprot.readString();
              struct.setHighlightPreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // HIGHLIGHT_POST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.highlightPost = iprot.readString();
              struct.setHighlightPostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AutocompleteQuery struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.indexId != null) {
        oprot.writeFieldBegin(INDEX_ID_FIELD_DESC);
        oprot.writeString(struct.indexId);
        oprot.writeFieldEnd();
      }
      if (struct.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.language);
        oprot.writeFieldEnd();
      }
      if (struct.queryText != null) {
        oprot.writeFieldBegin(QUERY_TEXT_FIELD_DESC);
        oprot.writeString(struct.queryText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUGGESTIONS_HIT_COUNT_FIELD_DESC);
      oprot.writeI32(struct.suggestionsHitCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HIGHLIGHT_FIELD_DESC);
      oprot.writeBool(struct.highlight);
      oprot.writeFieldEnd();
      if (struct.highlightPre != null) {
        oprot.writeFieldBegin(HIGHLIGHT_PRE_FIELD_DESC);
        oprot.writeString(struct.highlightPre);
        oprot.writeFieldEnd();
      }
      if (struct.highlightPost != null) {
        oprot.writeFieldBegin(HIGHLIGHT_POST_FIELD_DESC);
        oprot.writeString(struct.highlightPost);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AutocompleteQueryTupleSchemeFactory implements SchemeFactory {
    public AutocompleteQueryTupleScheme getScheme() {
      return new AutocompleteQueryTupleScheme();
    }
  }

  private static class AutocompleteQueryTupleScheme extends TupleScheme<AutocompleteQuery> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AutocompleteQuery struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIndexId()) {
        optionals.set(0);
      }
      if (struct.isSetLanguage()) {
        optionals.set(1);
      }
      if (struct.isSetQueryText()) {
        optionals.set(2);
      }
      if (struct.isSetSuggestionsHitCount()) {
        optionals.set(3);
      }
      if (struct.isSetHighlight()) {
        optionals.set(4);
      }
      if (struct.isSetHighlightPre()) {
        optionals.set(5);
      }
      if (struct.isSetHighlightPost()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetIndexId()) {
        oprot.writeString(struct.indexId);
      }
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
      if (struct.isSetQueryText()) {
        oprot.writeString(struct.queryText);
      }
      if (struct.isSetSuggestionsHitCount()) {
        oprot.writeI32(struct.suggestionsHitCount);
      }
      if (struct.isSetHighlight()) {
        oprot.writeBool(struct.highlight);
      }
      if (struct.isSetHighlightPre()) {
        oprot.writeString(struct.highlightPre);
      }
      if (struct.isSetHighlightPost()) {
        oprot.writeString(struct.highlightPost);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AutocompleteQuery struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.indexId = iprot.readString();
        struct.setIndexIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.queryText = iprot.readString();
        struct.setQueryTextIsSet(true);
      }
      if (incoming.get(3)) {
        struct.suggestionsHitCount = iprot.readI32();
        struct.setSuggestionsHitCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.highlight = iprot.readBool();
        struct.setHighlightIsSet(true);
      }
      if (incoming.get(5)) {
        struct.highlightPre = iprot.readString();
        struct.setHighlightPreIsSet(true);
      }
      if (incoming.get(6)) {
        struct.highlightPost = iprot.readString();
        struct.setHighlightPostIsSet(true);
      }
    }
  }

}

