/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-25")
public class AutocompleteHit implements org.apache.thrift.TBase<AutocompleteHit, AutocompleteHit._Fields>, java.io.Serializable, Cloneable, Comparable<AutocompleteHit> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AutocompleteHit");

  private static final org.apache.thrift.protocol.TField SUGGESTION_FIELD_DESC = new org.apache.thrift.protocol.TField("suggestion", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField HIGHLIGHTED_FIELD_DESC = new org.apache.thrift.protocol.TField("highlighted", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SEARCH_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("searchResult", org.apache.thrift.protocol.TType.STRUCT, (short)31);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.DOUBLE, (short)41);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AutocompleteHitStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AutocompleteHitTupleSchemeFactory();

  public java.lang.String suggestion; // required
  public java.lang.String highlighted; // required
  public SearchResult searchResult; // required
  public double score; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUGGESTION((short)11, "suggestion"),
    HIGHLIGHTED((short)21, "highlighted"),
    SEARCH_RESULT((short)31, "searchResult"),
    SCORE((short)41, "score");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 11: // SUGGESTION
          return SUGGESTION;
        case 21: // HIGHLIGHTED
          return HIGHLIGHTED;
        case 31: // SEARCH_RESULT
          return SEARCH_RESULT;
        case 41: // SCORE
          return SCORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCORE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUGGESTION, new org.apache.thrift.meta_data.FieldMetaData("suggestion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIGHLIGHTED, new org.apache.thrift.meta_data.FieldMetaData("highlighted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEARCH_RESULT, new org.apache.thrift.meta_data.FieldMetaData("searchResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchResult.class)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AutocompleteHit.class, metaDataMap);
  }

  public AutocompleteHit() {
  }

  public AutocompleteHit(
    java.lang.String suggestion,
    java.lang.String highlighted,
    SearchResult searchResult,
    double score)
  {
    this();
    this.suggestion = suggestion;
    this.highlighted = highlighted;
    this.searchResult = searchResult;
    this.score = score;
    setScoreIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AutocompleteHit(AutocompleteHit other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSuggestion()) {
      this.suggestion = other.suggestion;
    }
    if (other.isSetHighlighted()) {
      this.highlighted = other.highlighted;
    }
    if (other.isSetSearchResult()) {
      this.searchResult = new SearchResult(other.searchResult);
    }
    this.score = other.score;
  }

  public AutocompleteHit deepCopy() {
    return new AutocompleteHit(this);
  }

  @Override
  public void clear() {
    this.suggestion = null;
    this.highlighted = null;
    this.searchResult = null;
    setScoreIsSet(false);
    this.score = 0.0;
  }

  public java.lang.String getSuggestion() {
    return this.suggestion;
  }

  public AutocompleteHit setSuggestion(java.lang.String suggestion) {
    this.suggestion = suggestion;
    return this;
  }

  public void unsetSuggestion() {
    this.suggestion = null;
  }

  /** Returns true if field suggestion is set (has been assigned a value) and false otherwise */
  public boolean isSetSuggestion() {
    return this.suggestion != null;
  }

  public void setSuggestionIsSet(boolean value) {
    if (!value) {
      this.suggestion = null;
    }
  }

  public java.lang.String getHighlighted() {
    return this.highlighted;
  }

  public AutocompleteHit setHighlighted(java.lang.String highlighted) {
    this.highlighted = highlighted;
    return this;
  }

  public void unsetHighlighted() {
    this.highlighted = null;
  }

  /** Returns true if field highlighted is set (has been assigned a value) and false otherwise */
  public boolean isSetHighlighted() {
    return this.highlighted != null;
  }

  public void setHighlightedIsSet(boolean value) {
    if (!value) {
      this.highlighted = null;
    }
  }

  public SearchResult getSearchResult() {
    return this.searchResult;
  }

  public AutocompleteHit setSearchResult(SearchResult searchResult) {
    this.searchResult = searchResult;
    return this;
  }

  public void unsetSearchResult() {
    this.searchResult = null;
  }

  /** Returns true if field searchResult is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchResult() {
    return this.searchResult != null;
  }

  public void setSearchResultIsSet(boolean value) {
    if (!value) {
      this.searchResult = null;
    }
  }

  public double getScore() {
    return this.score;
  }

  public AutocompleteHit setScore(double score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SUGGESTION:
      if (value == null) {
        unsetSuggestion();
      } else {
        setSuggestion((java.lang.String)value);
      }
      break;

    case HIGHLIGHTED:
      if (value == null) {
        unsetHighlighted();
      } else {
        setHighlighted((java.lang.String)value);
      }
      break;

    case SEARCH_RESULT:
      if (value == null) {
        unsetSearchResult();
      } else {
        setSearchResult((SearchResult)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SUGGESTION:
      return getSuggestion();

    case HIGHLIGHTED:
      return getHighlighted();

    case SEARCH_RESULT:
      return getSearchResult();

    case SCORE:
      return getScore();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SUGGESTION:
      return isSetSuggestion();
    case HIGHLIGHTED:
      return isSetHighlighted();
    case SEARCH_RESULT:
      return isSetSearchResult();
    case SCORE:
      return isSetScore();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AutocompleteHit)
      return this.equals((AutocompleteHit)that);
    return false;
  }

  public boolean equals(AutocompleteHit that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_suggestion = true && this.isSetSuggestion();
    boolean that_present_suggestion = true && that.isSetSuggestion();
    if (this_present_suggestion || that_present_suggestion) {
      if (!(this_present_suggestion && that_present_suggestion))
        return false;
      if (!this.suggestion.equals(that.suggestion))
        return false;
    }

    boolean this_present_highlighted = true && this.isSetHighlighted();
    boolean that_present_highlighted = true && that.isSetHighlighted();
    if (this_present_highlighted || that_present_highlighted) {
      if (!(this_present_highlighted && that_present_highlighted))
        return false;
      if (!this.highlighted.equals(that.highlighted))
        return false;
    }

    boolean this_present_searchResult = true && this.isSetSearchResult();
    boolean that_present_searchResult = true && that.isSetSearchResult();
    if (this_present_searchResult || that_present_searchResult) {
      if (!(this_present_searchResult && that_present_searchResult))
        return false;
      if (!this.searchResult.equals(that.searchResult))
        return false;
    }

    boolean this_present_score = true;
    boolean that_present_score = true;
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSuggestion()) ? 131071 : 524287);
    if (isSetSuggestion())
      hashCode = hashCode * 8191 + suggestion.hashCode();

    hashCode = hashCode * 8191 + ((isSetHighlighted()) ? 131071 : 524287);
    if (isSetHighlighted())
      hashCode = hashCode * 8191 + highlighted.hashCode();

    hashCode = hashCode * 8191 + ((isSetSearchResult()) ? 131071 : 524287);
    if (isSetSearchResult())
      hashCode = hashCode * 8191 + searchResult.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(score);

    return hashCode;
  }

  @Override
  public int compareTo(AutocompleteHit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSuggestion()).compareTo(other.isSetSuggestion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuggestion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suggestion, other.suggestion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHighlighted()).compareTo(other.isSetHighlighted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlighted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlighted, other.highlighted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSearchResult()).compareTo(other.isSetSearchResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchResult, other.searchResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AutocompleteHit(");
    boolean first = true;

    sb.append("suggestion:");
    if (this.suggestion == null) {
      sb.append("null");
    } else {
      sb.append(this.suggestion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("highlighted:");
    if (this.highlighted == null) {
      sb.append("null");
    } else {
      sb.append(this.highlighted);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchResult:");
    if (this.searchResult == null) {
      sb.append("null");
    } else {
      sb.append(this.searchResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("score:");
    sb.append(this.score);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (searchResult != null) {
      searchResult.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AutocompleteHitStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AutocompleteHitStandardScheme getScheme() {
      return new AutocompleteHitStandardScheme();
    }
  }

  private static class AutocompleteHitStandardScheme extends org.apache.thrift.scheme.StandardScheme<AutocompleteHit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AutocompleteHit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 11: // SUGGESTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.suggestion = iprot.readString();
              struct.setSuggestionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // HIGHLIGHTED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.highlighted = iprot.readString();
              struct.setHighlightedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // SEARCH_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.searchResult = new SearchResult();
              struct.searchResult.read(iprot);
              struct.setSearchResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score = iprot.readDouble();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AutocompleteHit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.suggestion != null) {
        oprot.writeFieldBegin(SUGGESTION_FIELD_DESC);
        oprot.writeString(struct.suggestion);
        oprot.writeFieldEnd();
      }
      if (struct.highlighted != null) {
        oprot.writeFieldBegin(HIGHLIGHTED_FIELD_DESC);
        oprot.writeString(struct.highlighted);
        oprot.writeFieldEnd();
      }
      if (struct.searchResult != null) {
        oprot.writeFieldBegin(SEARCH_RESULT_FIELD_DESC);
        struct.searchResult.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCORE_FIELD_DESC);
      oprot.writeDouble(struct.score);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AutocompleteHitTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AutocompleteHitTupleScheme getScheme() {
      return new AutocompleteHitTupleScheme();
    }
  }

  private static class AutocompleteHitTupleScheme extends org.apache.thrift.scheme.TupleScheme<AutocompleteHit> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AutocompleteHit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSuggestion()) {
        optionals.set(0);
      }
      if (struct.isSetHighlighted()) {
        optionals.set(1);
      }
      if (struct.isSetSearchResult()) {
        optionals.set(2);
      }
      if (struct.isSetScore()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSuggestion()) {
        oprot.writeString(struct.suggestion);
      }
      if (struct.isSetHighlighted()) {
        oprot.writeString(struct.highlighted);
      }
      if (struct.isSetSearchResult()) {
        struct.searchResult.write(oprot);
      }
      if (struct.isSetScore()) {
        oprot.writeDouble(struct.score);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AutocompleteHit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.suggestion = iprot.readString();
        struct.setSuggestionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.highlighted = iprot.readString();
        struct.setHighlightedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.searchResult = new SearchResult();
        struct.searchResult.read(iprot);
        struct.setSearchResultIsSet(true);
      }
      if (incoming.get(3)) {
        struct.score = iprot.readDouble();
        struct.setScoreIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

