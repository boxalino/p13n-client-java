/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class P13nService {

  public interface Iface {

    /**
     * <dl>
     * <dt>@param choiceRequest</dt>
     * <dd>the ChoiceRequest object containing your request</dd>
     * 
     * <dt>@return</dt>
     * <dd>a ChoiceResponse object containing the list of variants</dd>
     * 
     * <dt>@throws P13nServiceException</dt>
     * <dd>an exception containing an error message</dd>
     * </dl>
     * 
     * @param choiceRequest
     */
    public ChoiceResponse choose(ChoiceRequest choiceRequest) throws P13nServiceException, org.apache.thrift.TException;

    /**
     * <dl>
     * <dt>@param batchChoiceRequest</dt>
     * <dd>the BatchChoiceRequest object containing your requests</dd>
     * 
     * <dt>@return</dt>
     * <dd>a BatchChoiceResponse object containing the list of variants for each request</dd>
     * 
     * <dt>@throws P13nServiceException</dt>
     * <dd>an exception containing an error message</dd>
     * </dl>
     * 
     * @param batchChoiceRequest
     */
    public BatchChoiceResponse batchChoose(BatchChoiceRequest batchChoiceRequest) throws P13nServiceException, org.apache.thrift.TException;

    /**
     * <dl>
     * <dt>@param request</dt>
     * <dd>the AutocompleteRequest object containing your request</dd>
     * 
     * <dt>@return</dt>
     * <dd>a AutocompleteResponse object containing the list of hits</dd>
     * 
     * <dt>@throws P13nServiceException</dt>
     * <dd>an exception containing an error message</dd>
     * </dl>
     * 
     * @param request
     */
    public AutocompleteResponse autocomplete(AutocompleteRequest request) throws P13nServiceException, org.apache.thrift.TException;

    /**
     * Updating a choice or creating a new choice if choiceId is not given in choiceUpdateRequest.
     * 
     * @param choiceUpdateRequest
     */
    public ChoiceUpdateResponse updateChoice(ChoiceUpdateRequest choiceUpdateRequest) throws P13nServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void choose(ChoiceRequest choiceRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchChoose(BatchChoiceRequest batchChoiceRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void autocomplete(AutocompleteRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateChoice(ChoiceUpdateRequest choiceUpdateRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ChoiceResponse choose(ChoiceRequest choiceRequest) throws P13nServiceException, org.apache.thrift.TException
    {
      send_choose(choiceRequest);
      return recv_choose();
    }

    public void send_choose(ChoiceRequest choiceRequest) throws org.apache.thrift.TException
    {
      choose_args args = new choose_args();
      args.setChoiceRequest(choiceRequest);
      sendBase("choose", args);
    }

    public ChoiceResponse recv_choose() throws P13nServiceException, org.apache.thrift.TException
    {
      choose_result result = new choose_result();
      receiveBase(result, "choose");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.p13nServiceException != null) {
        throw result.p13nServiceException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "choose failed: unknown result");
    }

    public BatchChoiceResponse batchChoose(BatchChoiceRequest batchChoiceRequest) throws P13nServiceException, org.apache.thrift.TException
    {
      send_batchChoose(batchChoiceRequest);
      return recv_batchChoose();
    }

    public void send_batchChoose(BatchChoiceRequest batchChoiceRequest) throws org.apache.thrift.TException
    {
      batchChoose_args args = new batchChoose_args();
      args.setBatchChoiceRequest(batchChoiceRequest);
      sendBase("batchChoose", args);
    }

    public BatchChoiceResponse recv_batchChoose() throws P13nServiceException, org.apache.thrift.TException
    {
      batchChoose_result result = new batchChoose_result();
      receiveBase(result, "batchChoose");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.p13nServiceException != null) {
        throw result.p13nServiceException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchChoose failed: unknown result");
    }

    public AutocompleteResponse autocomplete(AutocompleteRequest request) throws P13nServiceException, org.apache.thrift.TException
    {
      send_autocomplete(request);
      return recv_autocomplete();
    }

    public void send_autocomplete(AutocompleteRequest request) throws org.apache.thrift.TException
    {
      autocomplete_args args = new autocomplete_args();
      args.setRequest(request);
      sendBase("autocomplete", args);
    }

    public AutocompleteResponse recv_autocomplete() throws P13nServiceException, org.apache.thrift.TException
    {
      autocomplete_result result = new autocomplete_result();
      receiveBase(result, "autocomplete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.p13nServiceException != null) {
        throw result.p13nServiceException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "autocomplete failed: unknown result");
    }

    public ChoiceUpdateResponse updateChoice(ChoiceUpdateRequest choiceUpdateRequest) throws P13nServiceException, org.apache.thrift.TException
    {
      send_updateChoice(choiceUpdateRequest);
      return recv_updateChoice();
    }

    public void send_updateChoice(ChoiceUpdateRequest choiceUpdateRequest) throws org.apache.thrift.TException
    {
      updateChoice_args args = new updateChoice_args();
      args.setChoiceUpdateRequest(choiceUpdateRequest);
      sendBase("updateChoice", args);
    }

    public ChoiceUpdateResponse recv_updateChoice() throws P13nServiceException, org.apache.thrift.TException
    {
      updateChoice_result result = new updateChoice_result();
      receiveBase(result, "updateChoice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.p13nServiceException != null) {
        throw result.p13nServiceException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateChoice failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void choose(ChoiceRequest choiceRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      choose_call method_call = new choose_call(choiceRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class choose_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ChoiceRequest choiceRequest;
      public choose_call(ChoiceRequest choiceRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.choiceRequest = choiceRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("choose", org.apache.thrift.protocol.TMessageType.CALL, 0));
        choose_args args = new choose_args();
        args.setChoiceRequest(choiceRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ChoiceResponse getResult() throws P13nServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_choose();
      }
    }

    public void batchChoose(BatchChoiceRequest batchChoiceRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchChoose_call method_call = new batchChoose_call(batchChoiceRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchChoose_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BatchChoiceRequest batchChoiceRequest;
      public batchChoose_call(BatchChoiceRequest batchChoiceRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.batchChoiceRequest = batchChoiceRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchChoose", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchChoose_args args = new batchChoose_args();
        args.setBatchChoiceRequest(batchChoiceRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BatchChoiceResponse getResult() throws P13nServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchChoose();
      }
    }

    public void autocomplete(AutocompleteRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      autocomplete_call method_call = new autocomplete_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class autocomplete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AutocompleteRequest request;
      public autocomplete_call(AutocompleteRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("autocomplete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        autocomplete_args args = new autocomplete_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AutocompleteResponse getResult() throws P13nServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_autocomplete();
      }
    }

    public void updateChoice(ChoiceUpdateRequest choiceUpdateRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateChoice_call method_call = new updateChoice_call(choiceUpdateRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateChoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ChoiceUpdateRequest choiceUpdateRequest;
      public updateChoice_call(ChoiceUpdateRequest choiceUpdateRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.choiceUpdateRequest = choiceUpdateRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateChoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateChoice_args args = new updateChoice_args();
        args.setChoiceUpdateRequest(choiceUpdateRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ChoiceUpdateResponse getResult() throws P13nServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateChoice();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("choose", new choose());
      processMap.put("batchChoose", new batchChoose());
      processMap.put("autocomplete", new autocomplete());
      processMap.put("updateChoice", new updateChoice());
      return processMap;
    }

    public static class choose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, choose_args> {
      public choose() {
        super("choose");
      }

      public choose_args getEmptyArgsInstance() {
        return new choose_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public choose_result getResult(I iface, choose_args args) throws org.apache.thrift.TException {
        choose_result result = new choose_result();
        try {
          result.success = iface.choose(args.choiceRequest);
        } catch (P13nServiceException p13nServiceException) {
          result.p13nServiceException = p13nServiceException;
        }
        return result;
      }
    }

    public static class batchChoose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchChoose_args> {
      public batchChoose() {
        super("batchChoose");
      }

      public batchChoose_args getEmptyArgsInstance() {
        return new batchChoose_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchChoose_result getResult(I iface, batchChoose_args args) throws org.apache.thrift.TException {
        batchChoose_result result = new batchChoose_result();
        try {
          result.success = iface.batchChoose(args.batchChoiceRequest);
        } catch (P13nServiceException p13nServiceException) {
          result.p13nServiceException = p13nServiceException;
        }
        return result;
      }
    }

    public static class autocomplete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, autocomplete_args> {
      public autocomplete() {
        super("autocomplete");
      }

      public autocomplete_args getEmptyArgsInstance() {
        return new autocomplete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public autocomplete_result getResult(I iface, autocomplete_args args) throws org.apache.thrift.TException {
        autocomplete_result result = new autocomplete_result();
        try {
          result.success = iface.autocomplete(args.request);
        } catch (P13nServiceException p13nServiceException) {
          result.p13nServiceException = p13nServiceException;
        }
        return result;
      }
    }

    public static class updateChoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateChoice_args> {
      public updateChoice() {
        super("updateChoice");
      }

      public updateChoice_args getEmptyArgsInstance() {
        return new updateChoice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateChoice_result getResult(I iface, updateChoice_args args) throws org.apache.thrift.TException {
        updateChoice_result result = new updateChoice_result();
        try {
          result.success = iface.updateChoice(args.choiceUpdateRequest);
        } catch (P13nServiceException p13nServiceException) {
          result.p13nServiceException = p13nServiceException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("choose", new choose());
      processMap.put("batchChoose", new batchChoose());
      processMap.put("autocomplete", new autocomplete());
      processMap.put("updateChoice", new updateChoice());
      return processMap;
    }

    public static class choose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, choose_args, ChoiceResponse> {
      public choose() {
        super("choose");
      }

      public choose_args getEmptyArgsInstance() {
        return new choose_args();
      }

      public AsyncMethodCallback<ChoiceResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ChoiceResponse>() { 
          public void onComplete(ChoiceResponse o) {
            choose_result result = new choose_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            choose_result result = new choose_result();
            if (e instanceof P13nServiceException) {
                        result.p13nServiceException = (P13nServiceException) e;
                        result.setP13nServiceExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, choose_args args, org.apache.thrift.async.AsyncMethodCallback<ChoiceResponse> resultHandler) throws TException {
        iface.choose(args.choiceRequest,resultHandler);
      }
    }

    public static class batchChoose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchChoose_args, BatchChoiceResponse> {
      public batchChoose() {
        super("batchChoose");
      }

      public batchChoose_args getEmptyArgsInstance() {
        return new batchChoose_args();
      }

      public AsyncMethodCallback<BatchChoiceResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BatchChoiceResponse>() { 
          public void onComplete(BatchChoiceResponse o) {
            batchChoose_result result = new batchChoose_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchChoose_result result = new batchChoose_result();
            if (e instanceof P13nServiceException) {
                        result.p13nServiceException = (P13nServiceException) e;
                        result.setP13nServiceExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchChoose_args args, org.apache.thrift.async.AsyncMethodCallback<BatchChoiceResponse> resultHandler) throws TException {
        iface.batchChoose(args.batchChoiceRequest,resultHandler);
      }
    }

    public static class autocomplete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, autocomplete_args, AutocompleteResponse> {
      public autocomplete() {
        super("autocomplete");
      }

      public autocomplete_args getEmptyArgsInstance() {
        return new autocomplete_args();
      }

      public AsyncMethodCallback<AutocompleteResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AutocompleteResponse>() { 
          public void onComplete(AutocompleteResponse o) {
            autocomplete_result result = new autocomplete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            autocomplete_result result = new autocomplete_result();
            if (e instanceof P13nServiceException) {
                        result.p13nServiceException = (P13nServiceException) e;
                        result.setP13nServiceExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, autocomplete_args args, org.apache.thrift.async.AsyncMethodCallback<AutocompleteResponse> resultHandler) throws TException {
        iface.autocomplete(args.request,resultHandler);
      }
    }

    public static class updateChoice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateChoice_args, ChoiceUpdateResponse> {
      public updateChoice() {
        super("updateChoice");
      }

      public updateChoice_args getEmptyArgsInstance() {
        return new updateChoice_args();
      }

      public AsyncMethodCallback<ChoiceUpdateResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ChoiceUpdateResponse>() { 
          public void onComplete(ChoiceUpdateResponse o) {
            updateChoice_result result = new updateChoice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateChoice_result result = new updateChoice_result();
            if (e instanceof P13nServiceException) {
                        result.p13nServiceException = (P13nServiceException) e;
                        result.setP13nServiceExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateChoice_args args, org.apache.thrift.async.AsyncMethodCallback<ChoiceUpdateResponse> resultHandler) throws TException {
        iface.updateChoice(args.choiceUpdateRequest,resultHandler);
      }
    }

  }

  public static class choose_args implements org.apache.thrift.TBase<choose_args, choose_args._Fields>, java.io.Serializable, Cloneable, Comparable<choose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("choose_args");

    private static final org.apache.thrift.protocol.TField CHOICE_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceRequest", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new choose_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new choose_argsTupleSchemeFactory());
    }

    public ChoiceRequest choiceRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHOICE_REQUEST((short)-1, "choiceRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // CHOICE_REQUEST
            return CHOICE_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHOICE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("choiceRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(choose_args.class, metaDataMap);
    }

    public choose_args() {
    }

    public choose_args(
      ChoiceRequest choiceRequest)
    {
      this();
      this.choiceRequest = choiceRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public choose_args(choose_args other) {
      if (other.isSetChoiceRequest()) {
        this.choiceRequest = new ChoiceRequest(other.choiceRequest);
      }
    }

    public choose_args deepCopy() {
      return new choose_args(this);
    }

    @Override
    public void clear() {
      this.choiceRequest = null;
    }

    public ChoiceRequest getChoiceRequest() {
      return this.choiceRequest;
    }

    public choose_args setChoiceRequest(ChoiceRequest choiceRequest) {
      this.choiceRequest = choiceRequest;
      return this;
    }

    public void unsetChoiceRequest() {
      this.choiceRequest = null;
    }

    /** Returns true if field choiceRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceRequest() {
      return this.choiceRequest != null;
    }

    public void setChoiceRequestIsSet(boolean value) {
      if (!value) {
        this.choiceRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHOICE_REQUEST:
        if (value == null) {
          unsetChoiceRequest();
        } else {
          setChoiceRequest((ChoiceRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHOICE_REQUEST:
        return getChoiceRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHOICE_REQUEST:
        return isSetChoiceRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof choose_args)
        return this.equals((choose_args)that);
      return false;
    }

    public boolean equals(choose_args that) {
      if (that == null)
        return false;

      boolean this_present_choiceRequest = true && this.isSetChoiceRequest();
      boolean that_present_choiceRequest = true && that.isSetChoiceRequest();
      if (this_present_choiceRequest || that_present_choiceRequest) {
        if (!(this_present_choiceRequest && that_present_choiceRequest))
          return false;
        if (!this.choiceRequest.equals(that.choiceRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(choose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChoiceRequest()).compareTo(other.isSetChoiceRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceRequest, other.choiceRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("choose_args(");
      boolean first = true;

      sb.append("choiceRequest:");
      if (this.choiceRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (choiceRequest != null) {
        choiceRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class choose_argsStandardSchemeFactory implements SchemeFactory {
      public choose_argsStandardScheme getScheme() {
        return new choose_argsStandardScheme();
      }
    }

    private static class choose_argsStandardScheme extends StandardScheme<choose_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, choose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // CHOICE_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.choiceRequest = new ChoiceRequest();
                struct.choiceRequest.read(iprot);
                struct.setChoiceRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, choose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.choiceRequest != null) {
          oprot.writeFieldBegin(CHOICE_REQUEST_FIELD_DESC);
          struct.choiceRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class choose_argsTupleSchemeFactory implements SchemeFactory {
      public choose_argsTupleScheme getScheme() {
        return new choose_argsTupleScheme();
      }
    }

    private static class choose_argsTupleScheme extends TupleScheme<choose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, choose_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChoiceRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChoiceRequest()) {
          struct.choiceRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, choose_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.choiceRequest = new ChoiceRequest();
          struct.choiceRequest.read(iprot);
          struct.setChoiceRequestIsSet(true);
        }
      }
    }

  }

  public static class choose_result implements org.apache.thrift.TBase<choose_result, choose_result._Fields>, java.io.Serializable, Cloneable, Comparable<choose_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("choose_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField P13N_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("p13nServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new choose_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new choose_resultTupleSchemeFactory());
    }

    public ChoiceResponse success; // required
    public P13nServiceException p13nServiceException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      P13N_SERVICE_EXCEPTION((short)1, "p13nServiceException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // P13N_SERVICE_EXCEPTION
            return P13N_SERVICE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceResponse.class)));
      tmpMap.put(_Fields.P13N_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("p13nServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(choose_result.class, metaDataMap);
    }

    public choose_result() {
    }

    public choose_result(
      ChoiceResponse success,
      P13nServiceException p13nServiceException)
    {
      this();
      this.success = success;
      this.p13nServiceException = p13nServiceException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public choose_result(choose_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChoiceResponse(other.success);
      }
      if (other.isSetP13nServiceException()) {
        this.p13nServiceException = new P13nServiceException(other.p13nServiceException);
      }
    }

    public choose_result deepCopy() {
      return new choose_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.p13nServiceException = null;
    }

    public ChoiceResponse getSuccess() {
      return this.success;
    }

    public choose_result setSuccess(ChoiceResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public P13nServiceException getP13nServiceException() {
      return this.p13nServiceException;
    }

    public choose_result setP13nServiceException(P13nServiceException p13nServiceException) {
      this.p13nServiceException = p13nServiceException;
      return this;
    }

    public void unsetP13nServiceException() {
      this.p13nServiceException = null;
    }

    /** Returns true if field p13nServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetP13nServiceException() {
      return this.p13nServiceException != null;
    }

    public void setP13nServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.p13nServiceException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ChoiceResponse)value);
        }
        break;

      case P13N_SERVICE_EXCEPTION:
        if (value == null) {
          unsetP13nServiceException();
        } else {
          setP13nServiceException((P13nServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case P13N_SERVICE_EXCEPTION:
        return getP13nServiceException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case P13N_SERVICE_EXCEPTION:
        return isSetP13nServiceException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof choose_result)
        return this.equals((choose_result)that);
      return false;
    }

    public boolean equals(choose_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_p13nServiceException = true && this.isSetP13nServiceException();
      boolean that_present_p13nServiceException = true && that.isSetP13nServiceException();
      if (this_present_p13nServiceException || that_present_p13nServiceException) {
        if (!(this_present_p13nServiceException && that_present_p13nServiceException))
          return false;
        if (!this.p13nServiceException.equals(that.p13nServiceException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(choose_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP13nServiceException()).compareTo(other.isSetP13nServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP13nServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p13nServiceException, other.p13nServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("choose_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p13nServiceException:");
      if (this.p13nServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.p13nServiceException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class choose_resultStandardSchemeFactory implements SchemeFactory {
      public choose_resultStandardScheme getScheme() {
        return new choose_resultStandardScheme();
      }
    }

    private static class choose_resultStandardScheme extends StandardScheme<choose_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, choose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ChoiceResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // P13N_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p13nServiceException = new P13nServiceException();
                struct.p13nServiceException.read(iprot);
                struct.setP13nServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, choose_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p13nServiceException != null) {
          oprot.writeFieldBegin(P13N_SERVICE_EXCEPTION_FIELD_DESC);
          struct.p13nServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class choose_resultTupleSchemeFactory implements SchemeFactory {
      public choose_resultTupleScheme getScheme() {
        return new choose_resultTupleScheme();
      }
    }

    private static class choose_resultTupleScheme extends TupleScheme<choose_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, choose_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetP13nServiceException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetP13nServiceException()) {
          struct.p13nServiceException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, choose_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ChoiceResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p13nServiceException = new P13nServiceException();
          struct.p13nServiceException.read(iprot);
          struct.setP13nServiceExceptionIsSet(true);
        }
      }
    }

  }

  public static class batchChoose_args implements org.apache.thrift.TBase<batchChoose_args, batchChoose_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchChoose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchChoose_args");

    private static final org.apache.thrift.protocol.TField BATCH_CHOICE_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("batchChoiceRequest", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchChoose_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchChoose_argsTupleSchemeFactory());
    }

    public BatchChoiceRequest batchChoiceRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BATCH_CHOICE_REQUEST((short)-1, "batchChoiceRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // BATCH_CHOICE_REQUEST
            return BATCH_CHOICE_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BATCH_CHOICE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("batchChoiceRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BatchChoiceRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchChoose_args.class, metaDataMap);
    }

    public batchChoose_args() {
    }

    public batchChoose_args(
      BatchChoiceRequest batchChoiceRequest)
    {
      this();
      this.batchChoiceRequest = batchChoiceRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchChoose_args(batchChoose_args other) {
      if (other.isSetBatchChoiceRequest()) {
        this.batchChoiceRequest = new BatchChoiceRequest(other.batchChoiceRequest);
      }
    }

    public batchChoose_args deepCopy() {
      return new batchChoose_args(this);
    }

    @Override
    public void clear() {
      this.batchChoiceRequest = null;
    }

    public BatchChoiceRequest getBatchChoiceRequest() {
      return this.batchChoiceRequest;
    }

    public batchChoose_args setBatchChoiceRequest(BatchChoiceRequest batchChoiceRequest) {
      this.batchChoiceRequest = batchChoiceRequest;
      return this;
    }

    public void unsetBatchChoiceRequest() {
      this.batchChoiceRequest = null;
    }

    /** Returns true if field batchChoiceRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetBatchChoiceRequest() {
      return this.batchChoiceRequest != null;
    }

    public void setBatchChoiceRequestIsSet(boolean value) {
      if (!value) {
        this.batchChoiceRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BATCH_CHOICE_REQUEST:
        if (value == null) {
          unsetBatchChoiceRequest();
        } else {
          setBatchChoiceRequest((BatchChoiceRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BATCH_CHOICE_REQUEST:
        return getBatchChoiceRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BATCH_CHOICE_REQUEST:
        return isSetBatchChoiceRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchChoose_args)
        return this.equals((batchChoose_args)that);
      return false;
    }

    public boolean equals(batchChoose_args that) {
      if (that == null)
        return false;

      boolean this_present_batchChoiceRequest = true && this.isSetBatchChoiceRequest();
      boolean that_present_batchChoiceRequest = true && that.isSetBatchChoiceRequest();
      if (this_present_batchChoiceRequest || that_present_batchChoiceRequest) {
        if (!(this_present_batchChoiceRequest && that_present_batchChoiceRequest))
          return false;
        if (!this.batchChoiceRequest.equals(that.batchChoiceRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchChoose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBatchChoiceRequest()).compareTo(other.isSetBatchChoiceRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatchChoiceRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchChoiceRequest, other.batchChoiceRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchChoose_args(");
      boolean first = true;

      sb.append("batchChoiceRequest:");
      if (this.batchChoiceRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.batchChoiceRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (batchChoiceRequest != null) {
        batchChoiceRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchChoose_argsStandardSchemeFactory implements SchemeFactory {
      public batchChoose_argsStandardScheme getScheme() {
        return new batchChoose_argsStandardScheme();
      }
    }

    private static class batchChoose_argsStandardScheme extends StandardScheme<batchChoose_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchChoose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // BATCH_CHOICE_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.batchChoiceRequest = new BatchChoiceRequest();
                struct.batchChoiceRequest.read(iprot);
                struct.setBatchChoiceRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchChoose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.batchChoiceRequest != null) {
          oprot.writeFieldBegin(BATCH_CHOICE_REQUEST_FIELD_DESC);
          struct.batchChoiceRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchChoose_argsTupleSchemeFactory implements SchemeFactory {
      public batchChoose_argsTupleScheme getScheme() {
        return new batchChoose_argsTupleScheme();
      }
    }

    private static class batchChoose_argsTupleScheme extends TupleScheme<batchChoose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchChoose_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBatchChoiceRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBatchChoiceRequest()) {
          struct.batchChoiceRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchChoose_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.batchChoiceRequest = new BatchChoiceRequest();
          struct.batchChoiceRequest.read(iprot);
          struct.setBatchChoiceRequestIsSet(true);
        }
      }
    }

  }

  public static class batchChoose_result implements org.apache.thrift.TBase<batchChoose_result, batchChoose_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchChoose_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchChoose_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField P13N_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("p13nServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchChoose_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchChoose_resultTupleSchemeFactory());
    }

    public BatchChoiceResponse success; // required
    public P13nServiceException p13nServiceException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      P13N_SERVICE_EXCEPTION((short)1, "p13nServiceException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // P13N_SERVICE_EXCEPTION
            return P13N_SERVICE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BatchChoiceResponse.class)));
      tmpMap.put(_Fields.P13N_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("p13nServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchChoose_result.class, metaDataMap);
    }

    public batchChoose_result() {
    }

    public batchChoose_result(
      BatchChoiceResponse success,
      P13nServiceException p13nServiceException)
    {
      this();
      this.success = success;
      this.p13nServiceException = p13nServiceException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchChoose_result(batchChoose_result other) {
      if (other.isSetSuccess()) {
        this.success = new BatchChoiceResponse(other.success);
      }
      if (other.isSetP13nServiceException()) {
        this.p13nServiceException = new P13nServiceException(other.p13nServiceException);
      }
    }

    public batchChoose_result deepCopy() {
      return new batchChoose_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.p13nServiceException = null;
    }

    public BatchChoiceResponse getSuccess() {
      return this.success;
    }

    public batchChoose_result setSuccess(BatchChoiceResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public P13nServiceException getP13nServiceException() {
      return this.p13nServiceException;
    }

    public batchChoose_result setP13nServiceException(P13nServiceException p13nServiceException) {
      this.p13nServiceException = p13nServiceException;
      return this;
    }

    public void unsetP13nServiceException() {
      this.p13nServiceException = null;
    }

    /** Returns true if field p13nServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetP13nServiceException() {
      return this.p13nServiceException != null;
    }

    public void setP13nServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.p13nServiceException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BatchChoiceResponse)value);
        }
        break;

      case P13N_SERVICE_EXCEPTION:
        if (value == null) {
          unsetP13nServiceException();
        } else {
          setP13nServiceException((P13nServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case P13N_SERVICE_EXCEPTION:
        return getP13nServiceException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case P13N_SERVICE_EXCEPTION:
        return isSetP13nServiceException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchChoose_result)
        return this.equals((batchChoose_result)that);
      return false;
    }

    public boolean equals(batchChoose_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_p13nServiceException = true && this.isSetP13nServiceException();
      boolean that_present_p13nServiceException = true && that.isSetP13nServiceException();
      if (this_present_p13nServiceException || that_present_p13nServiceException) {
        if (!(this_present_p13nServiceException && that_present_p13nServiceException))
          return false;
        if (!this.p13nServiceException.equals(that.p13nServiceException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchChoose_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP13nServiceException()).compareTo(other.isSetP13nServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP13nServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p13nServiceException, other.p13nServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchChoose_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p13nServiceException:");
      if (this.p13nServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.p13nServiceException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchChoose_resultStandardSchemeFactory implements SchemeFactory {
      public batchChoose_resultStandardScheme getScheme() {
        return new batchChoose_resultStandardScheme();
      }
    }

    private static class batchChoose_resultStandardScheme extends StandardScheme<batchChoose_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchChoose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BatchChoiceResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // P13N_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p13nServiceException = new P13nServiceException();
                struct.p13nServiceException.read(iprot);
                struct.setP13nServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchChoose_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p13nServiceException != null) {
          oprot.writeFieldBegin(P13N_SERVICE_EXCEPTION_FIELD_DESC);
          struct.p13nServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchChoose_resultTupleSchemeFactory implements SchemeFactory {
      public batchChoose_resultTupleScheme getScheme() {
        return new batchChoose_resultTupleScheme();
      }
    }

    private static class batchChoose_resultTupleScheme extends TupleScheme<batchChoose_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchChoose_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetP13nServiceException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetP13nServiceException()) {
          struct.p13nServiceException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchChoose_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new BatchChoiceResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p13nServiceException = new P13nServiceException();
          struct.p13nServiceException.read(iprot);
          struct.setP13nServiceExceptionIsSet(true);
        }
      }
    }

  }

  public static class autocomplete_args implements org.apache.thrift.TBase<autocomplete_args, autocomplete_args._Fields>, java.io.Serializable, Cloneable, Comparable<autocomplete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("autocomplete_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new autocomplete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new autocomplete_argsTupleSchemeFactory());
    }

    public AutocompleteRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)-1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AutocompleteRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(autocomplete_args.class, metaDataMap);
    }

    public autocomplete_args() {
    }

    public autocomplete_args(
      AutocompleteRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public autocomplete_args(autocomplete_args other) {
      if (other.isSetRequest()) {
        this.request = new AutocompleteRequest(other.request);
      }
    }

    public autocomplete_args deepCopy() {
      return new autocomplete_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public AutocompleteRequest getRequest() {
      return this.request;
    }

    public autocomplete_args setRequest(AutocompleteRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((AutocompleteRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof autocomplete_args)
        return this.equals((autocomplete_args)that);
      return false;
    }

    public boolean equals(autocomplete_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(autocomplete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("autocomplete_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class autocomplete_argsStandardSchemeFactory implements SchemeFactory {
      public autocomplete_argsStandardScheme getScheme() {
        return new autocomplete_argsStandardScheme();
      }
    }

    private static class autocomplete_argsStandardScheme extends StandardScheme<autocomplete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, autocomplete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new AutocompleteRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, autocomplete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class autocomplete_argsTupleSchemeFactory implements SchemeFactory {
      public autocomplete_argsTupleScheme getScheme() {
        return new autocomplete_argsTupleScheme();
      }
    }

    private static class autocomplete_argsTupleScheme extends TupleScheme<autocomplete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, autocomplete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, autocomplete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new AutocompleteRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class autocomplete_result implements org.apache.thrift.TBase<autocomplete_result, autocomplete_result._Fields>, java.io.Serializable, Cloneable, Comparable<autocomplete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("autocomplete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField P13N_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("p13nServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new autocomplete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new autocomplete_resultTupleSchemeFactory());
    }

    public AutocompleteResponse success; // required
    public P13nServiceException p13nServiceException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      P13N_SERVICE_EXCEPTION((short)1, "p13nServiceException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // P13N_SERVICE_EXCEPTION
            return P13N_SERVICE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AutocompleteResponse.class)));
      tmpMap.put(_Fields.P13N_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("p13nServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(autocomplete_result.class, metaDataMap);
    }

    public autocomplete_result() {
    }

    public autocomplete_result(
      AutocompleteResponse success,
      P13nServiceException p13nServiceException)
    {
      this();
      this.success = success;
      this.p13nServiceException = p13nServiceException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public autocomplete_result(autocomplete_result other) {
      if (other.isSetSuccess()) {
        this.success = new AutocompleteResponse(other.success);
      }
      if (other.isSetP13nServiceException()) {
        this.p13nServiceException = new P13nServiceException(other.p13nServiceException);
      }
    }

    public autocomplete_result deepCopy() {
      return new autocomplete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.p13nServiceException = null;
    }

    public AutocompleteResponse getSuccess() {
      return this.success;
    }

    public autocomplete_result setSuccess(AutocompleteResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public P13nServiceException getP13nServiceException() {
      return this.p13nServiceException;
    }

    public autocomplete_result setP13nServiceException(P13nServiceException p13nServiceException) {
      this.p13nServiceException = p13nServiceException;
      return this;
    }

    public void unsetP13nServiceException() {
      this.p13nServiceException = null;
    }

    /** Returns true if field p13nServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetP13nServiceException() {
      return this.p13nServiceException != null;
    }

    public void setP13nServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.p13nServiceException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AutocompleteResponse)value);
        }
        break;

      case P13N_SERVICE_EXCEPTION:
        if (value == null) {
          unsetP13nServiceException();
        } else {
          setP13nServiceException((P13nServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case P13N_SERVICE_EXCEPTION:
        return getP13nServiceException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case P13N_SERVICE_EXCEPTION:
        return isSetP13nServiceException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof autocomplete_result)
        return this.equals((autocomplete_result)that);
      return false;
    }

    public boolean equals(autocomplete_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_p13nServiceException = true && this.isSetP13nServiceException();
      boolean that_present_p13nServiceException = true && that.isSetP13nServiceException();
      if (this_present_p13nServiceException || that_present_p13nServiceException) {
        if (!(this_present_p13nServiceException && that_present_p13nServiceException))
          return false;
        if (!this.p13nServiceException.equals(that.p13nServiceException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(autocomplete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP13nServiceException()).compareTo(other.isSetP13nServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP13nServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p13nServiceException, other.p13nServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("autocomplete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p13nServiceException:");
      if (this.p13nServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.p13nServiceException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class autocomplete_resultStandardSchemeFactory implements SchemeFactory {
      public autocomplete_resultStandardScheme getScheme() {
        return new autocomplete_resultStandardScheme();
      }
    }

    private static class autocomplete_resultStandardScheme extends StandardScheme<autocomplete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, autocomplete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AutocompleteResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // P13N_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p13nServiceException = new P13nServiceException();
                struct.p13nServiceException.read(iprot);
                struct.setP13nServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, autocomplete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p13nServiceException != null) {
          oprot.writeFieldBegin(P13N_SERVICE_EXCEPTION_FIELD_DESC);
          struct.p13nServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class autocomplete_resultTupleSchemeFactory implements SchemeFactory {
      public autocomplete_resultTupleScheme getScheme() {
        return new autocomplete_resultTupleScheme();
      }
    }

    private static class autocomplete_resultTupleScheme extends TupleScheme<autocomplete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, autocomplete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetP13nServiceException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetP13nServiceException()) {
          struct.p13nServiceException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, autocomplete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new AutocompleteResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p13nServiceException = new P13nServiceException();
          struct.p13nServiceException.read(iprot);
          struct.setP13nServiceExceptionIsSet(true);
        }
      }
    }

  }

  public static class updateChoice_args implements org.apache.thrift.TBase<updateChoice_args, updateChoice_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateChoice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateChoice_args");

    private static final org.apache.thrift.protocol.TField CHOICE_UPDATE_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceUpdateRequest", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateChoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateChoice_argsTupleSchemeFactory());
    }

    public ChoiceUpdateRequest choiceUpdateRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHOICE_UPDATE_REQUEST((short)-1, "choiceUpdateRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // CHOICE_UPDATE_REQUEST
            return CHOICE_UPDATE_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHOICE_UPDATE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("choiceUpdateRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceUpdateRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateChoice_args.class, metaDataMap);
    }

    public updateChoice_args() {
    }

    public updateChoice_args(
      ChoiceUpdateRequest choiceUpdateRequest)
    {
      this();
      this.choiceUpdateRequest = choiceUpdateRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateChoice_args(updateChoice_args other) {
      if (other.isSetChoiceUpdateRequest()) {
        this.choiceUpdateRequest = new ChoiceUpdateRequest(other.choiceUpdateRequest);
      }
    }

    public updateChoice_args deepCopy() {
      return new updateChoice_args(this);
    }

    @Override
    public void clear() {
      this.choiceUpdateRequest = null;
    }

    public ChoiceUpdateRequest getChoiceUpdateRequest() {
      return this.choiceUpdateRequest;
    }

    public updateChoice_args setChoiceUpdateRequest(ChoiceUpdateRequest choiceUpdateRequest) {
      this.choiceUpdateRequest = choiceUpdateRequest;
      return this;
    }

    public void unsetChoiceUpdateRequest() {
      this.choiceUpdateRequest = null;
    }

    /** Returns true if field choiceUpdateRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceUpdateRequest() {
      return this.choiceUpdateRequest != null;
    }

    public void setChoiceUpdateRequestIsSet(boolean value) {
      if (!value) {
        this.choiceUpdateRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHOICE_UPDATE_REQUEST:
        if (value == null) {
          unsetChoiceUpdateRequest();
        } else {
          setChoiceUpdateRequest((ChoiceUpdateRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHOICE_UPDATE_REQUEST:
        return getChoiceUpdateRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHOICE_UPDATE_REQUEST:
        return isSetChoiceUpdateRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateChoice_args)
        return this.equals((updateChoice_args)that);
      return false;
    }

    public boolean equals(updateChoice_args that) {
      if (that == null)
        return false;

      boolean this_present_choiceUpdateRequest = true && this.isSetChoiceUpdateRequest();
      boolean that_present_choiceUpdateRequest = true && that.isSetChoiceUpdateRequest();
      if (this_present_choiceUpdateRequest || that_present_choiceUpdateRequest) {
        if (!(this_present_choiceUpdateRequest && that_present_choiceUpdateRequest))
          return false;
        if (!this.choiceUpdateRequest.equals(that.choiceUpdateRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateChoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChoiceUpdateRequest()).compareTo(other.isSetChoiceUpdateRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceUpdateRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceUpdateRequest, other.choiceUpdateRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateChoice_args(");
      boolean first = true;

      sb.append("choiceUpdateRequest:");
      if (this.choiceUpdateRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceUpdateRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (choiceUpdateRequest != null) {
        choiceUpdateRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateChoice_argsStandardSchemeFactory implements SchemeFactory {
      public updateChoice_argsStandardScheme getScheme() {
        return new updateChoice_argsStandardScheme();
      }
    }

    private static class updateChoice_argsStandardScheme extends StandardScheme<updateChoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateChoice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // CHOICE_UPDATE_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.choiceUpdateRequest = new ChoiceUpdateRequest();
                struct.choiceUpdateRequest.read(iprot);
                struct.setChoiceUpdateRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateChoice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.choiceUpdateRequest != null) {
          oprot.writeFieldBegin(CHOICE_UPDATE_REQUEST_FIELD_DESC);
          struct.choiceUpdateRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateChoice_argsTupleSchemeFactory implements SchemeFactory {
      public updateChoice_argsTupleScheme getScheme() {
        return new updateChoice_argsTupleScheme();
      }
    }

    private static class updateChoice_argsTupleScheme extends TupleScheme<updateChoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateChoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChoiceUpdateRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChoiceUpdateRequest()) {
          struct.choiceUpdateRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateChoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.choiceUpdateRequest = new ChoiceUpdateRequest();
          struct.choiceUpdateRequest.read(iprot);
          struct.setChoiceUpdateRequestIsSet(true);
        }
      }
    }

  }

  public static class updateChoice_result implements org.apache.thrift.TBase<updateChoice_result, updateChoice_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateChoice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateChoice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField P13N_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("p13nServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateChoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateChoice_resultTupleSchemeFactory());
    }

    public ChoiceUpdateResponse success; // required
    public P13nServiceException p13nServiceException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      P13N_SERVICE_EXCEPTION((short)1, "p13nServiceException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // P13N_SERVICE_EXCEPTION
            return P13N_SERVICE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceUpdateResponse.class)));
      tmpMap.put(_Fields.P13N_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("p13nServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateChoice_result.class, metaDataMap);
    }

    public updateChoice_result() {
    }

    public updateChoice_result(
      ChoiceUpdateResponse success,
      P13nServiceException p13nServiceException)
    {
      this();
      this.success = success;
      this.p13nServiceException = p13nServiceException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateChoice_result(updateChoice_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChoiceUpdateResponse(other.success);
      }
      if (other.isSetP13nServiceException()) {
        this.p13nServiceException = new P13nServiceException(other.p13nServiceException);
      }
    }

    public updateChoice_result deepCopy() {
      return new updateChoice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.p13nServiceException = null;
    }

    public ChoiceUpdateResponse getSuccess() {
      return this.success;
    }

    public updateChoice_result setSuccess(ChoiceUpdateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public P13nServiceException getP13nServiceException() {
      return this.p13nServiceException;
    }

    public updateChoice_result setP13nServiceException(P13nServiceException p13nServiceException) {
      this.p13nServiceException = p13nServiceException;
      return this;
    }

    public void unsetP13nServiceException() {
      this.p13nServiceException = null;
    }

    /** Returns true if field p13nServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetP13nServiceException() {
      return this.p13nServiceException != null;
    }

    public void setP13nServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.p13nServiceException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ChoiceUpdateResponse)value);
        }
        break;

      case P13N_SERVICE_EXCEPTION:
        if (value == null) {
          unsetP13nServiceException();
        } else {
          setP13nServiceException((P13nServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case P13N_SERVICE_EXCEPTION:
        return getP13nServiceException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case P13N_SERVICE_EXCEPTION:
        return isSetP13nServiceException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateChoice_result)
        return this.equals((updateChoice_result)that);
      return false;
    }

    public boolean equals(updateChoice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_p13nServiceException = true && this.isSetP13nServiceException();
      boolean that_present_p13nServiceException = true && that.isSetP13nServiceException();
      if (this_present_p13nServiceException || that_present_p13nServiceException) {
        if (!(this_present_p13nServiceException && that_present_p13nServiceException))
          return false;
        if (!this.p13nServiceException.equals(that.p13nServiceException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateChoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP13nServiceException()).compareTo(other.isSetP13nServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP13nServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p13nServiceException, other.p13nServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateChoice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p13nServiceException:");
      if (this.p13nServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.p13nServiceException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateChoice_resultStandardSchemeFactory implements SchemeFactory {
      public updateChoice_resultStandardScheme getScheme() {
        return new updateChoice_resultStandardScheme();
      }
    }

    private static class updateChoice_resultStandardScheme extends StandardScheme<updateChoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateChoice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ChoiceUpdateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // P13N_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p13nServiceException = new P13nServiceException();
                struct.p13nServiceException.read(iprot);
                struct.setP13nServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateChoice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p13nServiceException != null) {
          oprot.writeFieldBegin(P13N_SERVICE_EXCEPTION_FIELD_DESC);
          struct.p13nServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateChoice_resultTupleSchemeFactory implements SchemeFactory {
      public updateChoice_resultTupleScheme getScheme() {
        return new updateChoice_resultTupleScheme();
      }
    }

    private static class updateChoice_resultTupleScheme extends TupleScheme<updateChoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateChoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetP13nServiceException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetP13nServiceException()) {
          struct.p13nServiceException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateChoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ChoiceUpdateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p13nServiceException = new P13nServiceException();
          struct.p13nServiceException.read(iprot);
          struct.setP13nServiceExceptionIsSet(true);
        }
      }
    }

  }

}
