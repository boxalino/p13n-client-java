/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Request object for changing the choice, that is changing possible variants
 * or their random distribution
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-11")
public class ChoiceUpdateRequest implements org.apache.thrift.TBase<ChoiceUpdateRequest, ChoiceUpdateRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ChoiceUpdateRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChoiceUpdateRequest");

  private static final org.apache.thrift.protocol.TField USER_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("userRecord", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField CHOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceId", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField VARIANT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("variantIds", org.apache.thrift.protocol.TType.MAP, (short)31);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChoiceUpdateRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChoiceUpdateRequestTupleSchemeFactory());
  }

  /**
   * user record identifying the client
   */
  public UserRecord userRecord; // required
  /**
   * Identifier of the choice to be changed. If it is not given, a new choice will be created
   */
  public String choiceId; // required
  /**
   * Map containing variant identifier and corresponding positive integer weight.
   * If for a choice there is no learned rule which can be applied, weights of
   * variants will be used for variants random distribution.
   * Higher weight makes corresponding variant more probable.
   */
  public Map<String,Integer> variantIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * user record identifying the client
     */
    USER_RECORD((short)11, "userRecord"),
    /**
     * Identifier of the choice to be changed. If it is not given, a new choice will be created
     */
    CHOICE_ID((short)21, "choiceId"),
    /**
     * Map containing variant identifier and corresponding positive integer weight.
     * If for a choice there is no learned rule which can be applied, weights of
     * variants will be used for variants random distribution.
     * Higher weight makes corresponding variant more probable.
     */
    VARIANT_IDS((short)31, "variantIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 11: // USER_RECORD
          return USER_RECORD;
        case 21: // CHOICE_ID
          return CHOICE_ID;
        case 31: // VARIANT_IDS
          return VARIANT_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_RECORD, new org.apache.thrift.meta_data.FieldMetaData("userRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserRecord.class)));
    tmpMap.put(_Fields.CHOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VARIANT_IDS, new org.apache.thrift.meta_data.FieldMetaData("variantIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChoiceUpdateRequest.class, metaDataMap);
  }

  public ChoiceUpdateRequest() {
  }

  public ChoiceUpdateRequest(
    UserRecord userRecord,
    String choiceId,
    Map<String,Integer> variantIds)
  {
    this();
    this.userRecord = userRecord;
    this.choiceId = choiceId;
    this.variantIds = variantIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChoiceUpdateRequest(ChoiceUpdateRequest other) {
    if (other.isSetUserRecord()) {
      this.userRecord = new UserRecord(other.userRecord);
    }
    if (other.isSetChoiceId()) {
      this.choiceId = other.choiceId;
    }
    if (other.isSetVariantIds()) {
      Map<String,Integer> __this__variantIds = new HashMap<String,Integer>(other.variantIds);
      this.variantIds = __this__variantIds;
    }
  }

  public ChoiceUpdateRequest deepCopy() {
    return new ChoiceUpdateRequest(this);
  }

  @Override
  public void clear() {
    this.userRecord = null;
    this.choiceId = null;
    this.variantIds = null;
  }

  /**
   * user record identifying the client
   */
  public UserRecord getUserRecord() {
    return this.userRecord;
  }

  /**
   * user record identifying the client
   */
  public ChoiceUpdateRequest setUserRecord(UserRecord userRecord) {
    this.userRecord = userRecord;
    return this;
  }

  public void unsetUserRecord() {
    this.userRecord = null;
  }

  /** Returns true if field userRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetUserRecord() {
    return this.userRecord != null;
  }

  public void setUserRecordIsSet(boolean value) {
    if (!value) {
      this.userRecord = null;
    }
  }

  /**
   * Identifier of the choice to be changed. If it is not given, a new choice will be created
   */
  public String getChoiceId() {
    return this.choiceId;
  }

  /**
   * Identifier of the choice to be changed. If it is not given, a new choice will be created
   */
  public ChoiceUpdateRequest setChoiceId(String choiceId) {
    this.choiceId = choiceId;
    return this;
  }

  public void unsetChoiceId() {
    this.choiceId = null;
  }

  /** Returns true if field choiceId is set (has been assigned a value) and false otherwise */
  public boolean isSetChoiceId() {
    return this.choiceId != null;
  }

  public void setChoiceIdIsSet(boolean value) {
    if (!value) {
      this.choiceId = null;
    }
  }

  public int getVariantIdsSize() {
    return (this.variantIds == null) ? 0 : this.variantIds.size();
  }

  public void putToVariantIds(String key, int val) {
    if (this.variantIds == null) {
      this.variantIds = new HashMap<String,Integer>();
    }
    this.variantIds.put(key, val);
  }

  /**
   * Map containing variant identifier and corresponding positive integer weight.
   * If for a choice there is no learned rule which can be applied, weights of
   * variants will be used for variants random distribution.
   * Higher weight makes corresponding variant more probable.
   */
  public Map<String,Integer> getVariantIds() {
    return this.variantIds;
  }

  /**
   * Map containing variant identifier and corresponding positive integer weight.
   * If for a choice there is no learned rule which can be applied, weights of
   * variants will be used for variants random distribution.
   * Higher weight makes corresponding variant more probable.
   */
  public ChoiceUpdateRequest setVariantIds(Map<String,Integer> variantIds) {
    this.variantIds = variantIds;
    return this;
  }

  public void unsetVariantIds() {
    this.variantIds = null;
  }

  /** Returns true if field variantIds is set (has been assigned a value) and false otherwise */
  public boolean isSetVariantIds() {
    return this.variantIds != null;
  }

  public void setVariantIdsIsSet(boolean value) {
    if (!value) {
      this.variantIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_RECORD:
      if (value == null) {
        unsetUserRecord();
      } else {
        setUserRecord((UserRecord)value);
      }
      break;

    case CHOICE_ID:
      if (value == null) {
        unsetChoiceId();
      } else {
        setChoiceId((String)value);
      }
      break;

    case VARIANT_IDS:
      if (value == null) {
        unsetVariantIds();
      } else {
        setVariantIds((Map<String,Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_RECORD:
      return getUserRecord();

    case CHOICE_ID:
      return getChoiceId();

    case VARIANT_IDS:
      return getVariantIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_RECORD:
      return isSetUserRecord();
    case CHOICE_ID:
      return isSetChoiceId();
    case VARIANT_IDS:
      return isSetVariantIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChoiceUpdateRequest)
      return this.equals((ChoiceUpdateRequest)that);
    return false;
  }

  public boolean equals(ChoiceUpdateRequest that) {
    if (that == null)
      return false;

    boolean this_present_userRecord = true && this.isSetUserRecord();
    boolean that_present_userRecord = true && that.isSetUserRecord();
    if (this_present_userRecord || that_present_userRecord) {
      if (!(this_present_userRecord && that_present_userRecord))
        return false;
      if (!this.userRecord.equals(that.userRecord))
        return false;
    }

    boolean this_present_choiceId = true && this.isSetChoiceId();
    boolean that_present_choiceId = true && that.isSetChoiceId();
    if (this_present_choiceId || that_present_choiceId) {
      if (!(this_present_choiceId && that_present_choiceId))
        return false;
      if (!this.choiceId.equals(that.choiceId))
        return false;
    }

    boolean this_present_variantIds = true && this.isSetVariantIds();
    boolean that_present_variantIds = true && that.isSetVariantIds();
    if (this_present_variantIds || that_present_variantIds) {
      if (!(this_present_variantIds && that_present_variantIds))
        return false;
      if (!this.variantIds.equals(that.variantIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userRecord = true && (isSetUserRecord());
    list.add(present_userRecord);
    if (present_userRecord)
      list.add(userRecord);

    boolean present_choiceId = true && (isSetChoiceId());
    list.add(present_choiceId);
    if (present_choiceId)
      list.add(choiceId);

    boolean present_variantIds = true && (isSetVariantIds());
    list.add(present_variantIds);
    if (present_variantIds)
      list.add(variantIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(ChoiceUpdateRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserRecord()).compareTo(other.isSetUserRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userRecord, other.userRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChoiceId()).compareTo(other.isSetChoiceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoiceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceId, other.choiceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVariantIds()).compareTo(other.isSetVariantIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariantIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variantIds, other.variantIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChoiceUpdateRequest(");
    boolean first = true;

    sb.append("userRecord:");
    if (this.userRecord == null) {
      sb.append("null");
    } else {
      sb.append(this.userRecord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("choiceId:");
    if (this.choiceId == null) {
      sb.append("null");
    } else {
      sb.append(this.choiceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("variantIds:");
    if (this.variantIds == null) {
      sb.append("null");
    } else {
      sb.append(this.variantIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (userRecord != null) {
      userRecord.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChoiceUpdateRequestStandardSchemeFactory implements SchemeFactory {
    public ChoiceUpdateRequestStandardScheme getScheme() {
      return new ChoiceUpdateRequestStandardScheme();
    }
  }

  private static class ChoiceUpdateRequestStandardScheme extends StandardScheme<ChoiceUpdateRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChoiceUpdateRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 11: // USER_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userRecord = new UserRecord();
              struct.userRecord.read(iprot);
              struct.setUserRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CHOICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.choiceId = iprot.readString();
              struct.setChoiceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // VARIANT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map252 = iprot.readMapBegin();
                struct.variantIds = new HashMap<String,Integer>(2*_map252.size);
                String _key253;
                int _val254;
                for (int _i255 = 0; _i255 < _map252.size; ++_i255)
                {
                  _key253 = iprot.readString();
                  _val254 = iprot.readI32();
                  struct.variantIds.put(_key253, _val254);
                }
                iprot.readMapEnd();
              }
              struct.setVariantIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChoiceUpdateRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userRecord != null) {
        oprot.writeFieldBegin(USER_RECORD_FIELD_DESC);
        struct.userRecord.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.choiceId != null) {
        oprot.writeFieldBegin(CHOICE_ID_FIELD_DESC);
        oprot.writeString(struct.choiceId);
        oprot.writeFieldEnd();
      }
      if (struct.variantIds != null) {
        oprot.writeFieldBegin(VARIANT_IDS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.variantIds.size()));
          for (Map.Entry<String, Integer> _iter256 : struct.variantIds.entrySet())
          {
            oprot.writeString(_iter256.getKey());
            oprot.writeI32(_iter256.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChoiceUpdateRequestTupleSchemeFactory implements SchemeFactory {
    public ChoiceUpdateRequestTupleScheme getScheme() {
      return new ChoiceUpdateRequestTupleScheme();
    }
  }

  private static class ChoiceUpdateRequestTupleScheme extends TupleScheme<ChoiceUpdateRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChoiceUpdateRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserRecord()) {
        optionals.set(0);
      }
      if (struct.isSetChoiceId()) {
        optionals.set(1);
      }
      if (struct.isSetVariantIds()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetUserRecord()) {
        struct.userRecord.write(oprot);
      }
      if (struct.isSetChoiceId()) {
        oprot.writeString(struct.choiceId);
      }
      if (struct.isSetVariantIds()) {
        {
          oprot.writeI32(struct.variantIds.size());
          for (Map.Entry<String, Integer> _iter257 : struct.variantIds.entrySet())
          {
            oprot.writeString(_iter257.getKey());
            oprot.writeI32(_iter257.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChoiceUpdateRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.userRecord = new UserRecord();
        struct.userRecord.read(iprot);
        struct.setUserRecordIsSet(true);
      }
      if (incoming.get(1)) {
        struct.choiceId = iprot.readString();
        struct.setChoiceIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map258 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.variantIds = new HashMap<String,Integer>(2*_map258.size);
          String _key259;
          int _val260;
          for (int _i261 = 0; _i261 < _map258.size; ++_i261)
          {
            _key259 = iprot.readString();
            _val260 = iprot.readI32();
            struct.variantIds.put(_key259, _val260);
          }
        }
        struct.setVariantIdsIsSet(true);
      }
    }
  }

}

