/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * <dl>
 * <dt>stringValue</dt>
 * <dd>corresponding value of the facet</dd>
 * 
 * <dt>rangeFromInclusive</dt>
 * <dd>if range facets lower bound (inclusive)</dd>
 * 
 * <dt>rangeToExclusive</dt>
 * <dd>if range facets upper bound (inclusive)</dd>
 * 
 * <dt>hitCount</dt>
 * <dd>number of hits found</dd>
 * 
 * <dt>hierarchyId</dt>
 * <dd>id of hierarchy if corresponding field is hierarchical</dd>
 * 
 * <dt>hierarchy</dt>
 * <dd>hierarchy if corresponding field is hierarchical</dd>
 * 
 * <dt>selected</dt>
 * <dd>whether the facet value has been selected in corresponding FacetRequest</dd>
 * </dl>
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-25")
public class FacetValue implements org.apache.thrift.TBase<FacetValue, FacetValue._Fields>, java.io.Serializable, Cloneable, Comparable<FacetValue> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FacetValue");

  private static final org.apache.thrift.protocol.TField STRING_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValue", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RANGE_FROM_INCLUSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeFromInclusive", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RANGE_TO_EXCLUSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeToExclusive", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("hitCount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField HIERARCHY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchyId", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField HIERARCHY_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchy", org.apache.thrift.protocol.TType.LIST, (short)60);
  private static final org.apache.thrift.protocol.TField SELECTED_FIELD_DESC = new org.apache.thrift.protocol.TField("selected", org.apache.thrift.protocol.TType.BOOL, (short)70);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FacetValueStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FacetValueTupleSchemeFactory();

  public java.lang.String stringValue; // required
  public java.lang.String rangeFromInclusive; // required
  public java.lang.String rangeToExclusive; // required
  public long hitCount; // required
  public java.lang.String hierarchyId; // required
  public java.util.List<java.lang.String> hierarchy; // required
  public boolean selected; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRING_VALUE((short)1, "stringValue"),
    RANGE_FROM_INCLUSIVE((short)2, "rangeFromInclusive"),
    RANGE_TO_EXCLUSIVE((short)3, "rangeToExclusive"),
    HIT_COUNT((short)4, "hitCount"),
    HIERARCHY_ID((short)50, "hierarchyId"),
    HIERARCHY((short)60, "hierarchy"),
    SELECTED((short)70, "selected");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRING_VALUE
          return STRING_VALUE;
        case 2: // RANGE_FROM_INCLUSIVE
          return RANGE_FROM_INCLUSIVE;
        case 3: // RANGE_TO_EXCLUSIVE
          return RANGE_TO_EXCLUSIVE;
        case 4: // HIT_COUNT
          return HIT_COUNT;
        case 50: // HIERARCHY_ID
          return HIERARCHY_ID;
        case 60: // HIERARCHY
          return HIERARCHY;
        case 70: // SELECTED
          return SELECTED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HITCOUNT_ISSET_ID = 0;
  private static final int __SELECTED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRING_VALUE, new org.apache.thrift.meta_data.FieldMetaData("stringValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RANGE_FROM_INCLUSIVE, new org.apache.thrift.meta_data.FieldMetaData("rangeFromInclusive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RANGE_TO_EXCLUSIVE, new org.apache.thrift.meta_data.FieldMetaData("rangeToExclusive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("hitCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HIERARCHY_ID, new org.apache.thrift.meta_data.FieldMetaData("hierarchyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIERARCHY, new org.apache.thrift.meta_data.FieldMetaData("hierarchy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SELECTED, new org.apache.thrift.meta_data.FieldMetaData("selected", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FacetValue.class, metaDataMap);
  }

  public FacetValue() {
  }

  public FacetValue(
    java.lang.String stringValue,
    java.lang.String rangeFromInclusive,
    java.lang.String rangeToExclusive,
    long hitCount,
    java.lang.String hierarchyId,
    java.util.List<java.lang.String> hierarchy,
    boolean selected)
  {
    this();
    this.stringValue = stringValue;
    this.rangeFromInclusive = rangeFromInclusive;
    this.rangeToExclusive = rangeToExclusive;
    this.hitCount = hitCount;
    setHitCountIsSet(true);
    this.hierarchyId = hierarchyId;
    this.hierarchy = hierarchy;
    this.selected = selected;
    setSelectedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FacetValue(FacetValue other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStringValue()) {
      this.stringValue = other.stringValue;
    }
    if (other.isSetRangeFromInclusive()) {
      this.rangeFromInclusive = other.rangeFromInclusive;
    }
    if (other.isSetRangeToExclusive()) {
      this.rangeToExclusive = other.rangeToExclusive;
    }
    this.hitCount = other.hitCount;
    if (other.isSetHierarchyId()) {
      this.hierarchyId = other.hierarchyId;
    }
    if (other.isSetHierarchy()) {
      java.util.List<java.lang.String> __this__hierarchy = new java.util.ArrayList<java.lang.String>(other.hierarchy);
      this.hierarchy = __this__hierarchy;
    }
    this.selected = other.selected;
  }

  public FacetValue deepCopy() {
    return new FacetValue(this);
  }

  @Override
  public void clear() {
    this.stringValue = null;
    this.rangeFromInclusive = null;
    this.rangeToExclusive = null;
    setHitCountIsSet(false);
    this.hitCount = 0;
    this.hierarchyId = null;
    this.hierarchy = null;
    setSelectedIsSet(false);
    this.selected = false;
  }

  public java.lang.String getStringValue() {
    return this.stringValue;
  }

  public FacetValue setStringValue(java.lang.String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  public void unsetStringValue() {
    this.stringValue = null;
  }

  /** Returns true if field stringValue is set (has been assigned a value) and false otherwise */
  public boolean isSetStringValue() {
    return this.stringValue != null;
  }

  public void setStringValueIsSet(boolean value) {
    if (!value) {
      this.stringValue = null;
    }
  }

  public java.lang.String getRangeFromInclusive() {
    return this.rangeFromInclusive;
  }

  public FacetValue setRangeFromInclusive(java.lang.String rangeFromInclusive) {
    this.rangeFromInclusive = rangeFromInclusive;
    return this;
  }

  public void unsetRangeFromInclusive() {
    this.rangeFromInclusive = null;
  }

  /** Returns true if field rangeFromInclusive is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeFromInclusive() {
    return this.rangeFromInclusive != null;
  }

  public void setRangeFromInclusiveIsSet(boolean value) {
    if (!value) {
      this.rangeFromInclusive = null;
    }
  }

  public java.lang.String getRangeToExclusive() {
    return this.rangeToExclusive;
  }

  public FacetValue setRangeToExclusive(java.lang.String rangeToExclusive) {
    this.rangeToExclusive = rangeToExclusive;
    return this;
  }

  public void unsetRangeToExclusive() {
    this.rangeToExclusive = null;
  }

  /** Returns true if field rangeToExclusive is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeToExclusive() {
    return this.rangeToExclusive != null;
  }

  public void setRangeToExclusiveIsSet(boolean value) {
    if (!value) {
      this.rangeToExclusive = null;
    }
  }

  public long getHitCount() {
    return this.hitCount;
  }

  public FacetValue setHitCount(long hitCount) {
    this.hitCount = hitCount;
    setHitCountIsSet(true);
    return this;
  }

  public void unsetHitCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HITCOUNT_ISSET_ID);
  }

  /** Returns true if field hitCount is set (has been assigned a value) and false otherwise */
  public boolean isSetHitCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HITCOUNT_ISSET_ID);
  }

  public void setHitCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HITCOUNT_ISSET_ID, value);
  }

  public java.lang.String getHierarchyId() {
    return this.hierarchyId;
  }

  public FacetValue setHierarchyId(java.lang.String hierarchyId) {
    this.hierarchyId = hierarchyId;
    return this;
  }

  public void unsetHierarchyId() {
    this.hierarchyId = null;
  }

  /** Returns true if field hierarchyId is set (has been assigned a value) and false otherwise */
  public boolean isSetHierarchyId() {
    return this.hierarchyId != null;
  }

  public void setHierarchyIdIsSet(boolean value) {
    if (!value) {
      this.hierarchyId = null;
    }
  }

  public int getHierarchySize() {
    return (this.hierarchy == null) ? 0 : this.hierarchy.size();
  }

  public java.util.Iterator<java.lang.String> getHierarchyIterator() {
    return (this.hierarchy == null) ? null : this.hierarchy.iterator();
  }

  public void addToHierarchy(java.lang.String elem) {
    if (this.hierarchy == null) {
      this.hierarchy = new java.util.ArrayList<java.lang.String>();
    }
    this.hierarchy.add(elem);
  }

  public java.util.List<java.lang.String> getHierarchy() {
    return this.hierarchy;
  }

  public FacetValue setHierarchy(java.util.List<java.lang.String> hierarchy) {
    this.hierarchy = hierarchy;
    return this;
  }

  public void unsetHierarchy() {
    this.hierarchy = null;
  }

  /** Returns true if field hierarchy is set (has been assigned a value) and false otherwise */
  public boolean isSetHierarchy() {
    return this.hierarchy != null;
  }

  public void setHierarchyIsSet(boolean value) {
    if (!value) {
      this.hierarchy = null;
    }
  }

  public boolean isSelected() {
    return this.selected;
  }

  public FacetValue setSelected(boolean selected) {
    this.selected = selected;
    setSelectedIsSet(true);
    return this;
  }

  public void unsetSelected() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SELECTED_ISSET_ID);
  }

  /** Returns true if field selected is set (has been assigned a value) and false otherwise */
  public boolean isSetSelected() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SELECTED_ISSET_ID);
  }

  public void setSelectedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SELECTED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case STRING_VALUE:
      if (value == null) {
        unsetStringValue();
      } else {
        setStringValue((java.lang.String)value);
      }
      break;

    case RANGE_FROM_INCLUSIVE:
      if (value == null) {
        unsetRangeFromInclusive();
      } else {
        setRangeFromInclusive((java.lang.String)value);
      }
      break;

    case RANGE_TO_EXCLUSIVE:
      if (value == null) {
        unsetRangeToExclusive();
      } else {
        setRangeToExclusive((java.lang.String)value);
      }
      break;

    case HIT_COUNT:
      if (value == null) {
        unsetHitCount();
      } else {
        setHitCount((java.lang.Long)value);
      }
      break;

    case HIERARCHY_ID:
      if (value == null) {
        unsetHierarchyId();
      } else {
        setHierarchyId((java.lang.String)value);
      }
      break;

    case HIERARCHY:
      if (value == null) {
        unsetHierarchy();
      } else {
        setHierarchy((java.util.List<java.lang.String>)value);
      }
      break;

    case SELECTED:
      if (value == null) {
        unsetSelected();
      } else {
        setSelected((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STRING_VALUE:
      return getStringValue();

    case RANGE_FROM_INCLUSIVE:
      return getRangeFromInclusive();

    case RANGE_TO_EXCLUSIVE:
      return getRangeToExclusive();

    case HIT_COUNT:
      return getHitCount();

    case HIERARCHY_ID:
      return getHierarchyId();

    case HIERARCHY:
      return getHierarchy();

    case SELECTED:
      return isSelected();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STRING_VALUE:
      return isSetStringValue();
    case RANGE_FROM_INCLUSIVE:
      return isSetRangeFromInclusive();
    case RANGE_TO_EXCLUSIVE:
      return isSetRangeToExclusive();
    case HIT_COUNT:
      return isSetHitCount();
    case HIERARCHY_ID:
      return isSetHierarchyId();
    case HIERARCHY:
      return isSetHierarchy();
    case SELECTED:
      return isSetSelected();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof FacetValue)
      return this.equals((FacetValue)that);
    return false;
  }

  public boolean equals(FacetValue that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_stringValue = true && this.isSetStringValue();
    boolean that_present_stringValue = true && that.isSetStringValue();
    if (this_present_stringValue || that_present_stringValue) {
      if (!(this_present_stringValue && that_present_stringValue))
        return false;
      if (!this.stringValue.equals(that.stringValue))
        return false;
    }

    boolean this_present_rangeFromInclusive = true && this.isSetRangeFromInclusive();
    boolean that_present_rangeFromInclusive = true && that.isSetRangeFromInclusive();
    if (this_present_rangeFromInclusive || that_present_rangeFromInclusive) {
      if (!(this_present_rangeFromInclusive && that_present_rangeFromInclusive))
        return false;
      if (!this.rangeFromInclusive.equals(that.rangeFromInclusive))
        return false;
    }

    boolean this_present_rangeToExclusive = true && this.isSetRangeToExclusive();
    boolean that_present_rangeToExclusive = true && that.isSetRangeToExclusive();
    if (this_present_rangeToExclusive || that_present_rangeToExclusive) {
      if (!(this_present_rangeToExclusive && that_present_rangeToExclusive))
        return false;
      if (!this.rangeToExclusive.equals(that.rangeToExclusive))
        return false;
    }

    boolean this_present_hitCount = true;
    boolean that_present_hitCount = true;
    if (this_present_hitCount || that_present_hitCount) {
      if (!(this_present_hitCount && that_present_hitCount))
        return false;
      if (this.hitCount != that.hitCount)
        return false;
    }

    boolean this_present_hierarchyId = true && this.isSetHierarchyId();
    boolean that_present_hierarchyId = true && that.isSetHierarchyId();
    if (this_present_hierarchyId || that_present_hierarchyId) {
      if (!(this_present_hierarchyId && that_present_hierarchyId))
        return false;
      if (!this.hierarchyId.equals(that.hierarchyId))
        return false;
    }

    boolean this_present_hierarchy = true && this.isSetHierarchy();
    boolean that_present_hierarchy = true && that.isSetHierarchy();
    if (this_present_hierarchy || that_present_hierarchy) {
      if (!(this_present_hierarchy && that_present_hierarchy))
        return false;
      if (!this.hierarchy.equals(that.hierarchy))
        return false;
    }

    boolean this_present_selected = true;
    boolean that_present_selected = true;
    if (this_present_selected || that_present_selected) {
      if (!(this_present_selected && that_present_selected))
        return false;
      if (this.selected != that.selected)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStringValue()) ? 131071 : 524287);
    if (isSetStringValue())
      hashCode = hashCode * 8191 + stringValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetRangeFromInclusive()) ? 131071 : 524287);
    if (isSetRangeFromInclusive())
      hashCode = hashCode * 8191 + rangeFromInclusive.hashCode();

    hashCode = hashCode * 8191 + ((isSetRangeToExclusive()) ? 131071 : 524287);
    if (isSetRangeToExclusive())
      hashCode = hashCode * 8191 + rangeToExclusive.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(hitCount);

    hashCode = hashCode * 8191 + ((isSetHierarchyId()) ? 131071 : 524287);
    if (isSetHierarchyId())
      hashCode = hashCode * 8191 + hierarchyId.hashCode();

    hashCode = hashCode * 8191 + ((isSetHierarchy()) ? 131071 : 524287);
    if (isSetHierarchy())
      hashCode = hashCode * 8191 + hierarchy.hashCode();

    hashCode = hashCode * 8191 + ((selected) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(FacetValue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStringValue()).compareTo(other.isSetStringValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringValue, other.stringValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRangeFromInclusive()).compareTo(other.isSetRangeFromInclusive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeFromInclusive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeFromInclusive, other.rangeFromInclusive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRangeToExclusive()).compareTo(other.isSetRangeToExclusive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeToExclusive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeToExclusive, other.rangeToExclusive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHitCount()).compareTo(other.isSetHitCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHitCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hitCount, other.hitCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHierarchyId()).compareTo(other.isSetHierarchyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHierarchyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchyId, other.hierarchyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHierarchy()).compareTo(other.isSetHierarchy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHierarchy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchy, other.hierarchy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSelected()).compareTo(other.isSetSelected());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelected()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selected, other.selected);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FacetValue(");
    boolean first = true;

    sb.append("stringValue:");
    if (this.stringValue == null) {
      sb.append("null");
    } else {
      sb.append(this.stringValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rangeFromInclusive:");
    if (this.rangeFromInclusive == null) {
      sb.append("null");
    } else {
      sb.append(this.rangeFromInclusive);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rangeToExclusive:");
    if (this.rangeToExclusive == null) {
      sb.append("null");
    } else {
      sb.append(this.rangeToExclusive);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hitCount:");
    sb.append(this.hitCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hierarchyId:");
    if (this.hierarchyId == null) {
      sb.append("null");
    } else {
      sb.append(this.hierarchyId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hierarchy:");
    if (this.hierarchy == null) {
      sb.append("null");
    } else {
      sb.append(this.hierarchy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("selected:");
    sb.append(this.selected);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FacetValueStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FacetValueStandardScheme getScheme() {
      return new FacetValueStandardScheme();
    }
  }

  private static class FacetValueStandardScheme extends org.apache.thrift.scheme.StandardScheme<FacetValue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FacetValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STRING_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringValue = iprot.readString();
              struct.setStringValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RANGE_FROM_INCLUSIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rangeFromInclusive = iprot.readString();
              struct.setRangeFromInclusiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RANGE_TO_EXCLUSIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rangeToExclusive = iprot.readString();
              struct.setRangeToExclusiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HIT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.hitCount = iprot.readI64();
              struct.setHitCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // HIERARCHY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hierarchyId = iprot.readString();
              struct.setHierarchyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // HIERARCHY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.hierarchy = new java.util.ArrayList<java.lang.String>(_list16.size);
                java.lang.String _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readString();
                  struct.hierarchy.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setHierarchyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // SELECTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.selected = iprot.readBool();
              struct.setSelectedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FacetValue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stringValue != null) {
        oprot.writeFieldBegin(STRING_VALUE_FIELD_DESC);
        oprot.writeString(struct.stringValue);
        oprot.writeFieldEnd();
      }
      if (struct.rangeFromInclusive != null) {
        oprot.writeFieldBegin(RANGE_FROM_INCLUSIVE_FIELD_DESC);
        oprot.writeString(struct.rangeFromInclusive);
        oprot.writeFieldEnd();
      }
      if (struct.rangeToExclusive != null) {
        oprot.writeFieldBegin(RANGE_TO_EXCLUSIVE_FIELD_DESC);
        oprot.writeString(struct.rangeToExclusive);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HIT_COUNT_FIELD_DESC);
      oprot.writeI64(struct.hitCount);
      oprot.writeFieldEnd();
      if (struct.hierarchyId != null) {
        oprot.writeFieldBegin(HIERARCHY_ID_FIELD_DESC);
        oprot.writeString(struct.hierarchyId);
        oprot.writeFieldEnd();
      }
      if (struct.hierarchy != null) {
        oprot.writeFieldBegin(HIERARCHY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.hierarchy.size()));
          for (java.lang.String _iter19 : struct.hierarchy)
          {
            oprot.writeString(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SELECTED_FIELD_DESC);
      oprot.writeBool(struct.selected);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FacetValueTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FacetValueTupleScheme getScheme() {
      return new FacetValueTupleScheme();
    }
  }

  private static class FacetValueTupleScheme extends org.apache.thrift.scheme.TupleScheme<FacetValue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FacetValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStringValue()) {
        optionals.set(0);
      }
      if (struct.isSetRangeFromInclusive()) {
        optionals.set(1);
      }
      if (struct.isSetRangeToExclusive()) {
        optionals.set(2);
      }
      if (struct.isSetHitCount()) {
        optionals.set(3);
      }
      if (struct.isSetHierarchyId()) {
        optionals.set(4);
      }
      if (struct.isSetHierarchy()) {
        optionals.set(5);
      }
      if (struct.isSetSelected()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetStringValue()) {
        oprot.writeString(struct.stringValue);
      }
      if (struct.isSetRangeFromInclusive()) {
        oprot.writeString(struct.rangeFromInclusive);
      }
      if (struct.isSetRangeToExclusive()) {
        oprot.writeString(struct.rangeToExclusive);
      }
      if (struct.isSetHitCount()) {
        oprot.writeI64(struct.hitCount);
      }
      if (struct.isSetHierarchyId()) {
        oprot.writeString(struct.hierarchyId);
      }
      if (struct.isSetHierarchy()) {
        {
          oprot.writeI32(struct.hierarchy.size());
          for (java.lang.String _iter20 : struct.hierarchy)
          {
            oprot.writeString(_iter20);
          }
        }
      }
      if (struct.isSetSelected()) {
        oprot.writeBool(struct.selected);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FacetValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.stringValue = iprot.readString();
        struct.setStringValueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rangeFromInclusive = iprot.readString();
        struct.setRangeFromInclusiveIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rangeToExclusive = iprot.readString();
        struct.setRangeToExclusiveIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hitCount = iprot.readI64();
        struct.setHitCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hierarchyId = iprot.readString();
        struct.setHierarchyIdIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.hierarchy = new java.util.ArrayList<java.lang.String>(_list21.size);
          java.lang.String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.hierarchy.add(_elem22);
          }
        }
        struct.setHierarchyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.selected = iprot.readBool();
        struct.setSelectedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

