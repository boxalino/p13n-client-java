/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * <dl>
 * <dt>indexId</dt>
 * <dd>id of the index to fetch context item data from</dd>
 * 
 * <dt>fieldName</dt>
 * <dd>the field name of the item's unique identifier within the items index</dd>
 * <dd>for example: 'sku' for items 'products'</dd>
 * 
 * <dt>contextItemId</dt>
 * <dd>actual item's identifier</dd>
 * <dd>for example: actual sku of the product</dd>
 * 
 * <dt>role</dt>
 * <dd>role of the item within the context, used to address the item in the
 * recommendation script.</dd>
 * <dd>for example: 'main product' for recommendations within product detail
 * page</dd>
 * </dl>
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-25")
public class ContextItem implements org.apache.thrift.TBase<ContextItem, ContextItem._Fields>, java.io.Serializable, Cloneable, Comparable<ContextItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContextItem");

  private static final org.apache.thrift.protocol.TField INDEX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("indexId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTEXT_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contextItemId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ContextItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ContextItemTupleSchemeFactory();

  public java.lang.String indexId; // required
  public java.lang.String fieldName; // required
  public java.lang.String contextItemId; // required
  public java.lang.String role; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX_ID((short)1, "indexId"),
    FIELD_NAME((short)2, "fieldName"),
    CONTEXT_ITEM_ID((short)3, "contextItemId"),
    ROLE((short)4, "role");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX_ID
          return INDEX_ID;
        case 2: // FIELD_NAME
          return FIELD_NAME;
        case 3: // CONTEXT_ITEM_ID
          return CONTEXT_ITEM_ID;
        case 4: // ROLE
          return ROLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX_ID, new org.apache.thrift.meta_data.FieldMetaData("indexId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("fieldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTEXT_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("contextItemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContextItem.class, metaDataMap);
  }

  public ContextItem() {
  }

  public ContextItem(
    java.lang.String indexId,
    java.lang.String fieldName,
    java.lang.String contextItemId,
    java.lang.String role)
  {
    this();
    this.indexId = indexId;
    this.fieldName = fieldName;
    this.contextItemId = contextItemId;
    this.role = role;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContextItem(ContextItem other) {
    if (other.isSetIndexId()) {
      this.indexId = other.indexId;
    }
    if (other.isSetFieldName()) {
      this.fieldName = other.fieldName;
    }
    if (other.isSetContextItemId()) {
      this.contextItemId = other.contextItemId;
    }
    if (other.isSetRole()) {
      this.role = other.role;
    }
  }

  public ContextItem deepCopy() {
    return new ContextItem(this);
  }

  @Override
  public void clear() {
    this.indexId = null;
    this.fieldName = null;
    this.contextItemId = null;
    this.role = null;
  }

  public java.lang.String getIndexId() {
    return this.indexId;
  }

  public ContextItem setIndexId(java.lang.String indexId) {
    this.indexId = indexId;
    return this;
  }

  public void unsetIndexId() {
    this.indexId = null;
  }

  /** Returns true if field indexId is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexId() {
    return this.indexId != null;
  }

  public void setIndexIdIsSet(boolean value) {
    if (!value) {
      this.indexId = null;
    }
  }

  public java.lang.String getFieldName() {
    return this.fieldName;
  }

  public ContextItem setFieldName(java.lang.String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  public void unsetFieldName() {
    this.fieldName = null;
  }

  /** Returns true if field fieldName is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldName() {
    return this.fieldName != null;
  }

  public void setFieldNameIsSet(boolean value) {
    if (!value) {
      this.fieldName = null;
    }
  }

  public java.lang.String getContextItemId() {
    return this.contextItemId;
  }

  public ContextItem setContextItemId(java.lang.String contextItemId) {
    this.contextItemId = contextItemId;
    return this;
  }

  public void unsetContextItemId() {
    this.contextItemId = null;
  }

  /** Returns true if field contextItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetContextItemId() {
    return this.contextItemId != null;
  }

  public void setContextItemIdIsSet(boolean value) {
    if (!value) {
      this.contextItemId = null;
    }
  }

  public java.lang.String getRole() {
    return this.role;
  }

  public ContextItem setRole(java.lang.String role) {
    this.role = role;
    return this;
  }

  public void unsetRole() {
    this.role = null;
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return this.role != null;
  }

  public void setRoleIsSet(boolean value) {
    if (!value) {
      this.role = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case INDEX_ID:
      if (value == null) {
        unsetIndexId();
      } else {
        setIndexId((java.lang.String)value);
      }
      break;

    case FIELD_NAME:
      if (value == null) {
        unsetFieldName();
      } else {
        setFieldName((java.lang.String)value);
      }
      break;

    case CONTEXT_ITEM_ID:
      if (value == null) {
        unsetContextItemId();
      } else {
        setContextItemId((java.lang.String)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX_ID:
      return getIndexId();

    case FIELD_NAME:
      return getFieldName();

    case CONTEXT_ITEM_ID:
      return getContextItemId();

    case ROLE:
      return getRole();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INDEX_ID:
      return isSetIndexId();
    case FIELD_NAME:
      return isSetFieldName();
    case CONTEXT_ITEM_ID:
      return isSetContextItemId();
    case ROLE:
      return isSetRole();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ContextItem)
      return this.equals((ContextItem)that);
    return false;
  }

  public boolean equals(ContextItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_indexId = true && this.isSetIndexId();
    boolean that_present_indexId = true && that.isSetIndexId();
    if (this_present_indexId || that_present_indexId) {
      if (!(this_present_indexId && that_present_indexId))
        return false;
      if (!this.indexId.equals(that.indexId))
        return false;
    }

    boolean this_present_fieldName = true && this.isSetFieldName();
    boolean that_present_fieldName = true && that.isSetFieldName();
    if (this_present_fieldName || that_present_fieldName) {
      if (!(this_present_fieldName && that_present_fieldName))
        return false;
      if (!this.fieldName.equals(that.fieldName))
        return false;
    }

    boolean this_present_contextItemId = true && this.isSetContextItemId();
    boolean that_present_contextItemId = true && that.isSetContextItemId();
    if (this_present_contextItemId || that_present_contextItemId) {
      if (!(this_present_contextItemId && that_present_contextItemId))
        return false;
      if (!this.contextItemId.equals(that.contextItemId))
        return false;
    }

    boolean this_present_role = true && this.isSetRole();
    boolean that_present_role = true && that.isSetRole();
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (!this.role.equals(that.role))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIndexId()) ? 131071 : 524287);
    if (isSetIndexId())
      hashCode = hashCode * 8191 + indexId.hashCode();

    hashCode = hashCode * 8191 + ((isSetFieldName()) ? 131071 : 524287);
    if (isSetFieldName())
      hashCode = hashCode * 8191 + fieldName.hashCode();

    hashCode = hashCode * 8191 + ((isSetContextItemId()) ? 131071 : 524287);
    if (isSetContextItemId())
      hashCode = hashCode * 8191 + contextItemId.hashCode();

    hashCode = hashCode * 8191 + ((isSetRole()) ? 131071 : 524287);
    if (isSetRole())
      hashCode = hashCode * 8191 + role.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ContextItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetIndexId()).compareTo(other.isSetIndexId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexId, other.indexId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFieldName()).compareTo(other.isSetFieldName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldName, other.fieldName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContextItemId()).compareTo(other.isSetContextItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContextItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contextItemId, other.contextItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ContextItem(");
    boolean first = true;

    sb.append("indexId:");
    if (this.indexId == null) {
      sb.append("null");
    } else {
      sb.append(this.indexId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fieldName:");
    if (this.fieldName == null) {
      sb.append("null");
    } else {
      sb.append(this.fieldName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contextItemId:");
    if (this.contextItemId == null) {
      sb.append("null");
    } else {
      sb.append(this.contextItemId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("role:");
    if (this.role == null) {
      sb.append("null");
    } else {
      sb.append(this.role);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContextItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ContextItemStandardScheme getScheme() {
      return new ContextItemStandardScheme();
    }
  }

  private static class ContextItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<ContextItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContextItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INDEX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.indexId = iprot.readString();
              struct.setIndexIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldName = iprot.readString();
              struct.setFieldNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTEXT_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contextItemId = iprot.readString();
              struct.setContextItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.role = iprot.readString();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContextItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.indexId != null) {
        oprot.writeFieldBegin(INDEX_ID_FIELD_DESC);
        oprot.writeString(struct.indexId);
        oprot.writeFieldEnd();
      }
      if (struct.fieldName != null) {
        oprot.writeFieldBegin(FIELD_NAME_FIELD_DESC);
        oprot.writeString(struct.fieldName);
        oprot.writeFieldEnd();
      }
      if (struct.contextItemId != null) {
        oprot.writeFieldBegin(CONTEXT_ITEM_ID_FIELD_DESC);
        oprot.writeString(struct.contextItemId);
        oprot.writeFieldEnd();
      }
      if (struct.role != null) {
        oprot.writeFieldBegin(ROLE_FIELD_DESC);
        oprot.writeString(struct.role);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContextItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ContextItemTupleScheme getScheme() {
      return new ContextItemTupleScheme();
    }
  }

  private static class ContextItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<ContextItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContextItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIndexId()) {
        optionals.set(0);
      }
      if (struct.isSetFieldName()) {
        optionals.set(1);
      }
      if (struct.isSetContextItemId()) {
        optionals.set(2);
      }
      if (struct.isSetRole()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetIndexId()) {
        oprot.writeString(struct.indexId);
      }
      if (struct.isSetFieldName()) {
        oprot.writeString(struct.fieldName);
      }
      if (struct.isSetContextItemId()) {
        oprot.writeString(struct.contextItemId);
      }
      if (struct.isSetRole()) {
        oprot.writeString(struct.role);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContextItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.indexId = iprot.readString();
        struct.setIndexIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fieldName = iprot.readString();
        struct.setFieldNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contextItemId = iprot.readString();
        struct.setContextItemIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.role = iprot.readString();
        struct.setRoleIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

