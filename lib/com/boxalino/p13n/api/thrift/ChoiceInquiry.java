/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * <dl>
 * <dt>choiceId</dt>
 * <dd>personalization choice identificator</dd>
 * 
 * <dt>simpleSearchQuery</dt>
 * <dd>search query in a case of recommendation and search inquiries</dd>
 * 
 * <dt>contextItems</dt>
 * <dd>context items for recommendations</dd>
 * 
 * <dt>minHitCount</dt>
 * <dd>minimal hit count to return for recommendations.</dd>
 * <dd>if higher priority recommendation strategy yields less results, next
 * strategy is tried</dd>
 * 
 * <dt>excludeVariantIds</dt>
 * <dd>set of variantIds to be excluded from result</dd>
 * 
 * <dt>scope</dt>
 * <dd>choice source to be used</dd>
 * 
 * <dt>withRelaxation</dt>
 * <dd>if search relaxation should be used</dd>
 * </dl>
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-11")
public class ChoiceInquiry implements org.apache.thrift.TBase<ChoiceInquiry, ChoiceInquiry._Fields>, java.io.Serializable, Cloneable, Comparable<ChoiceInquiry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChoiceInquiry");

  private static final org.apache.thrift.protocol.TField CHOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SIMPLE_SEARCH_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("simpleSearchQuery", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CONTEXT_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("contextItems", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField MIN_HIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("minHitCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField EXCLUDE_VARIANT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("excludeVariantIds", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField WITH_RELAXATION_FIELD_DESC = new org.apache.thrift.protocol.TField("withRelaxation", org.apache.thrift.protocol.TType.BOOL, (short)70);
  private static final org.apache.thrift.protocol.TField WITH_SEMANTIC_FILTERING_FIELD_DESC = new org.apache.thrift.protocol.TField("withSemanticFiltering", org.apache.thrift.protocol.TType.BOOL, (short)80);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChoiceInquiryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChoiceInquiryTupleSchemeFactory());
  }

  public String choiceId; // required
  public SimpleSearchQuery simpleSearchQuery; // required
  public List<ContextItem> contextItems; // required
  public int minHitCount; // required
  public Set<String> excludeVariantIds; // required
  public String scope; // required
  public boolean withRelaxation; // required
  public boolean withSemanticFiltering; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHOICE_ID((short)1, "choiceId"),
    SIMPLE_SEARCH_QUERY((short)2, "simpleSearchQuery"),
    CONTEXT_ITEMS((short)3, "contextItems"),
    MIN_HIT_COUNT((short)4, "minHitCount"),
    EXCLUDE_VARIANT_IDS((short)5, "excludeVariantIds"),
    SCOPE((short)6, "scope"),
    WITH_RELAXATION((short)70, "withRelaxation"),
    WITH_SEMANTIC_FILTERING((short)80, "withSemanticFiltering");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHOICE_ID
          return CHOICE_ID;
        case 2: // SIMPLE_SEARCH_QUERY
          return SIMPLE_SEARCH_QUERY;
        case 3: // CONTEXT_ITEMS
          return CONTEXT_ITEMS;
        case 4: // MIN_HIT_COUNT
          return MIN_HIT_COUNT;
        case 5: // EXCLUDE_VARIANT_IDS
          return EXCLUDE_VARIANT_IDS;
        case 6: // SCOPE
          return SCOPE;
        case 70: // WITH_RELAXATION
          return WITH_RELAXATION;
        case 80: // WITH_SEMANTIC_FILTERING
          return WITH_SEMANTIC_FILTERING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MINHITCOUNT_ISSET_ID = 0;
  private static final int __WITHRELAXATION_ISSET_ID = 1;
  private static final int __WITHSEMANTICFILTERING_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIMPLE_SEARCH_QUERY, new org.apache.thrift.meta_data.FieldMetaData("simpleSearchQuery", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleSearchQuery.class)));
    tmpMap.put(_Fields.CONTEXT_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("contextItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContextItem.class))));
    tmpMap.put(_Fields.MIN_HIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("minHitCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCLUDE_VARIANT_IDS, new org.apache.thrift.meta_data.FieldMetaData("excludeVariantIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WITH_RELAXATION, new org.apache.thrift.meta_data.FieldMetaData("withRelaxation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WITH_SEMANTIC_FILTERING, new org.apache.thrift.meta_data.FieldMetaData("withSemanticFiltering", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChoiceInquiry.class, metaDataMap);
  }

  public ChoiceInquiry() {
    this.scope = "system_rec";

    this.withRelaxation = false;

    this.withSemanticFiltering = false;

  }

  public ChoiceInquiry(
    String choiceId,
    SimpleSearchQuery simpleSearchQuery,
    List<ContextItem> contextItems,
    int minHitCount,
    Set<String> excludeVariantIds,
    String scope,
    boolean withRelaxation,
    boolean withSemanticFiltering)
  {
    this();
    this.choiceId = choiceId;
    this.simpleSearchQuery = simpleSearchQuery;
    this.contextItems = contextItems;
    this.minHitCount = minHitCount;
    setMinHitCountIsSet(true);
    this.excludeVariantIds = excludeVariantIds;
    this.scope = scope;
    this.withRelaxation = withRelaxation;
    setWithRelaxationIsSet(true);
    this.withSemanticFiltering = withSemanticFiltering;
    setWithSemanticFilteringIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChoiceInquiry(ChoiceInquiry other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetChoiceId()) {
      this.choiceId = other.choiceId;
    }
    if (other.isSetSimpleSearchQuery()) {
      this.simpleSearchQuery = new SimpleSearchQuery(other.simpleSearchQuery);
    }
    if (other.isSetContextItems()) {
      List<ContextItem> __this__contextItems = new ArrayList<ContextItem>(other.contextItems.size());
      for (ContextItem other_element : other.contextItems) {
        __this__contextItems.add(new ContextItem(other_element));
      }
      this.contextItems = __this__contextItems;
    }
    this.minHitCount = other.minHitCount;
    if (other.isSetExcludeVariantIds()) {
      Set<String> __this__excludeVariantIds = new HashSet<String>(other.excludeVariantIds);
      this.excludeVariantIds = __this__excludeVariantIds;
    }
    if (other.isSetScope()) {
      this.scope = other.scope;
    }
    this.withRelaxation = other.withRelaxation;
    this.withSemanticFiltering = other.withSemanticFiltering;
  }

  public ChoiceInquiry deepCopy() {
    return new ChoiceInquiry(this);
  }

  @Override
  public void clear() {
    this.choiceId = null;
    this.simpleSearchQuery = null;
    this.contextItems = null;
    setMinHitCountIsSet(false);
    this.minHitCount = 0;
    this.excludeVariantIds = null;
    this.scope = "system_rec";

    this.withRelaxation = false;

    this.withSemanticFiltering = false;

  }

  public String getChoiceId() {
    return this.choiceId;
  }

  public ChoiceInquiry setChoiceId(String choiceId) {
    this.choiceId = choiceId;
    return this;
  }

  public void unsetChoiceId() {
    this.choiceId = null;
  }

  /** Returns true if field choiceId is set (has been assigned a value) and false otherwise */
  public boolean isSetChoiceId() {
    return this.choiceId != null;
  }

  public void setChoiceIdIsSet(boolean value) {
    if (!value) {
      this.choiceId = null;
    }
  }

  public SimpleSearchQuery getSimpleSearchQuery() {
    return this.simpleSearchQuery;
  }

  public ChoiceInquiry setSimpleSearchQuery(SimpleSearchQuery simpleSearchQuery) {
    this.simpleSearchQuery = simpleSearchQuery;
    return this;
  }

  public void unsetSimpleSearchQuery() {
    this.simpleSearchQuery = null;
  }

  /** Returns true if field simpleSearchQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetSimpleSearchQuery() {
    return this.simpleSearchQuery != null;
  }

  public void setSimpleSearchQueryIsSet(boolean value) {
    if (!value) {
      this.simpleSearchQuery = null;
    }
  }

  public int getContextItemsSize() {
    return (this.contextItems == null) ? 0 : this.contextItems.size();
  }

  public java.util.Iterator<ContextItem> getContextItemsIterator() {
    return (this.contextItems == null) ? null : this.contextItems.iterator();
  }

  public void addToContextItems(ContextItem elem) {
    if (this.contextItems == null) {
      this.contextItems = new ArrayList<ContextItem>();
    }
    this.contextItems.add(elem);
  }

  public List<ContextItem> getContextItems() {
    return this.contextItems;
  }

  public ChoiceInquiry setContextItems(List<ContextItem> contextItems) {
    this.contextItems = contextItems;
    return this;
  }

  public void unsetContextItems() {
    this.contextItems = null;
  }

  /** Returns true if field contextItems is set (has been assigned a value) and false otherwise */
  public boolean isSetContextItems() {
    return this.contextItems != null;
  }

  public void setContextItemsIsSet(boolean value) {
    if (!value) {
      this.contextItems = null;
    }
  }

  public int getMinHitCount() {
    return this.minHitCount;
  }

  public ChoiceInquiry setMinHitCount(int minHitCount) {
    this.minHitCount = minHitCount;
    setMinHitCountIsSet(true);
    return this;
  }

  public void unsetMinHitCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINHITCOUNT_ISSET_ID);
  }

  /** Returns true if field minHitCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMinHitCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MINHITCOUNT_ISSET_ID);
  }

  public void setMinHitCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINHITCOUNT_ISSET_ID, value);
  }

  public int getExcludeVariantIdsSize() {
    return (this.excludeVariantIds == null) ? 0 : this.excludeVariantIds.size();
  }

  public java.util.Iterator<String> getExcludeVariantIdsIterator() {
    return (this.excludeVariantIds == null) ? null : this.excludeVariantIds.iterator();
  }

  public void addToExcludeVariantIds(String elem) {
    if (this.excludeVariantIds == null) {
      this.excludeVariantIds = new HashSet<String>();
    }
    this.excludeVariantIds.add(elem);
  }

  public Set<String> getExcludeVariantIds() {
    return this.excludeVariantIds;
  }

  public ChoiceInquiry setExcludeVariantIds(Set<String> excludeVariantIds) {
    this.excludeVariantIds = excludeVariantIds;
    return this;
  }

  public void unsetExcludeVariantIds() {
    this.excludeVariantIds = null;
  }

  /** Returns true if field excludeVariantIds is set (has been assigned a value) and false otherwise */
  public boolean isSetExcludeVariantIds() {
    return this.excludeVariantIds != null;
  }

  public void setExcludeVariantIdsIsSet(boolean value) {
    if (!value) {
      this.excludeVariantIds = null;
    }
  }

  public String getScope() {
    return this.scope;
  }

  public ChoiceInquiry setScope(String scope) {
    this.scope = scope;
    return this;
  }

  public void unsetScope() {
    this.scope = null;
  }

  /** Returns true if field scope is set (has been assigned a value) and false otherwise */
  public boolean isSetScope() {
    return this.scope != null;
  }

  public void setScopeIsSet(boolean value) {
    if (!value) {
      this.scope = null;
    }
  }

  public boolean isWithRelaxation() {
    return this.withRelaxation;
  }

  public ChoiceInquiry setWithRelaxation(boolean withRelaxation) {
    this.withRelaxation = withRelaxation;
    setWithRelaxationIsSet(true);
    return this;
  }

  public void unsetWithRelaxation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHRELAXATION_ISSET_ID);
  }

  /** Returns true if field withRelaxation is set (has been assigned a value) and false otherwise */
  public boolean isSetWithRelaxation() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHRELAXATION_ISSET_ID);
  }

  public void setWithRelaxationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHRELAXATION_ISSET_ID, value);
  }

  public boolean isWithSemanticFiltering() {
    return this.withSemanticFiltering;
  }

  public ChoiceInquiry setWithSemanticFiltering(boolean withSemanticFiltering) {
    this.withSemanticFiltering = withSemanticFiltering;
    setWithSemanticFilteringIsSet(true);
    return this;
  }

  public void unsetWithSemanticFiltering() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHSEMANTICFILTERING_ISSET_ID);
  }

  /** Returns true if field withSemanticFiltering is set (has been assigned a value) and false otherwise */
  public boolean isSetWithSemanticFiltering() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHSEMANTICFILTERING_ISSET_ID);
  }

  public void setWithSemanticFilteringIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHSEMANTICFILTERING_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHOICE_ID:
      if (value == null) {
        unsetChoiceId();
      } else {
        setChoiceId((String)value);
      }
      break;

    case SIMPLE_SEARCH_QUERY:
      if (value == null) {
        unsetSimpleSearchQuery();
      } else {
        setSimpleSearchQuery((SimpleSearchQuery)value);
      }
      break;

    case CONTEXT_ITEMS:
      if (value == null) {
        unsetContextItems();
      } else {
        setContextItems((List<ContextItem>)value);
      }
      break;

    case MIN_HIT_COUNT:
      if (value == null) {
        unsetMinHitCount();
      } else {
        setMinHitCount((Integer)value);
      }
      break;

    case EXCLUDE_VARIANT_IDS:
      if (value == null) {
        unsetExcludeVariantIds();
      } else {
        setExcludeVariantIds((Set<String>)value);
      }
      break;

    case SCOPE:
      if (value == null) {
        unsetScope();
      } else {
        setScope((String)value);
      }
      break;

    case WITH_RELAXATION:
      if (value == null) {
        unsetWithRelaxation();
      } else {
        setWithRelaxation((Boolean)value);
      }
      break;

    case WITH_SEMANTIC_FILTERING:
      if (value == null) {
        unsetWithSemanticFiltering();
      } else {
        setWithSemanticFiltering((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHOICE_ID:
      return getChoiceId();

    case SIMPLE_SEARCH_QUERY:
      return getSimpleSearchQuery();

    case CONTEXT_ITEMS:
      return getContextItems();

    case MIN_HIT_COUNT:
      return Integer.valueOf(getMinHitCount());

    case EXCLUDE_VARIANT_IDS:
      return getExcludeVariantIds();

    case SCOPE:
      return getScope();

    case WITH_RELAXATION:
      return Boolean.valueOf(isWithRelaxation());

    case WITH_SEMANTIC_FILTERING:
      return Boolean.valueOf(isWithSemanticFiltering());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHOICE_ID:
      return isSetChoiceId();
    case SIMPLE_SEARCH_QUERY:
      return isSetSimpleSearchQuery();
    case CONTEXT_ITEMS:
      return isSetContextItems();
    case MIN_HIT_COUNT:
      return isSetMinHitCount();
    case EXCLUDE_VARIANT_IDS:
      return isSetExcludeVariantIds();
    case SCOPE:
      return isSetScope();
    case WITH_RELAXATION:
      return isSetWithRelaxation();
    case WITH_SEMANTIC_FILTERING:
      return isSetWithSemanticFiltering();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChoiceInquiry)
      return this.equals((ChoiceInquiry)that);
    return false;
  }

  public boolean equals(ChoiceInquiry that) {
    if (that == null)
      return false;

    boolean this_present_choiceId = true && this.isSetChoiceId();
    boolean that_present_choiceId = true && that.isSetChoiceId();
    if (this_present_choiceId || that_present_choiceId) {
      if (!(this_present_choiceId && that_present_choiceId))
        return false;
      if (!this.choiceId.equals(that.choiceId))
        return false;
    }

    boolean this_present_simpleSearchQuery = true && this.isSetSimpleSearchQuery();
    boolean that_present_simpleSearchQuery = true && that.isSetSimpleSearchQuery();
    if (this_present_simpleSearchQuery || that_present_simpleSearchQuery) {
      if (!(this_present_simpleSearchQuery && that_present_simpleSearchQuery))
        return false;
      if (!this.simpleSearchQuery.equals(that.simpleSearchQuery))
        return false;
    }

    boolean this_present_contextItems = true && this.isSetContextItems();
    boolean that_present_contextItems = true && that.isSetContextItems();
    if (this_present_contextItems || that_present_contextItems) {
      if (!(this_present_contextItems && that_present_contextItems))
        return false;
      if (!this.contextItems.equals(that.contextItems))
        return false;
    }

    boolean this_present_minHitCount = true;
    boolean that_present_minHitCount = true;
    if (this_present_minHitCount || that_present_minHitCount) {
      if (!(this_present_minHitCount && that_present_minHitCount))
        return false;
      if (this.minHitCount != that.minHitCount)
        return false;
    }

    boolean this_present_excludeVariantIds = true && this.isSetExcludeVariantIds();
    boolean that_present_excludeVariantIds = true && that.isSetExcludeVariantIds();
    if (this_present_excludeVariantIds || that_present_excludeVariantIds) {
      if (!(this_present_excludeVariantIds && that_present_excludeVariantIds))
        return false;
      if (!this.excludeVariantIds.equals(that.excludeVariantIds))
        return false;
    }

    boolean this_present_scope = true && this.isSetScope();
    boolean that_present_scope = true && that.isSetScope();
    if (this_present_scope || that_present_scope) {
      if (!(this_present_scope && that_present_scope))
        return false;
      if (!this.scope.equals(that.scope))
        return false;
    }

    boolean this_present_withRelaxation = true;
    boolean that_present_withRelaxation = true;
    if (this_present_withRelaxation || that_present_withRelaxation) {
      if (!(this_present_withRelaxation && that_present_withRelaxation))
        return false;
      if (this.withRelaxation != that.withRelaxation)
        return false;
    }

    boolean this_present_withSemanticFiltering = true;
    boolean that_present_withSemanticFiltering = true;
    if (this_present_withSemanticFiltering || that_present_withSemanticFiltering) {
      if (!(this_present_withSemanticFiltering && that_present_withSemanticFiltering))
        return false;
      if (this.withSemanticFiltering != that.withSemanticFiltering)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_choiceId = true && (isSetChoiceId());
    list.add(present_choiceId);
    if (present_choiceId)
      list.add(choiceId);

    boolean present_simpleSearchQuery = true && (isSetSimpleSearchQuery());
    list.add(present_simpleSearchQuery);
    if (present_simpleSearchQuery)
      list.add(simpleSearchQuery);

    boolean present_contextItems = true && (isSetContextItems());
    list.add(present_contextItems);
    if (present_contextItems)
      list.add(contextItems);

    boolean present_minHitCount = true;
    list.add(present_minHitCount);
    if (present_minHitCount)
      list.add(minHitCount);

    boolean present_excludeVariantIds = true && (isSetExcludeVariantIds());
    list.add(present_excludeVariantIds);
    if (present_excludeVariantIds)
      list.add(excludeVariantIds);

    boolean present_scope = true && (isSetScope());
    list.add(present_scope);
    if (present_scope)
      list.add(scope);

    boolean present_withRelaxation = true;
    list.add(present_withRelaxation);
    if (present_withRelaxation)
      list.add(withRelaxation);

    boolean present_withSemanticFiltering = true;
    list.add(present_withSemanticFiltering);
    if (present_withSemanticFiltering)
      list.add(withSemanticFiltering);

    return list.hashCode();
  }

  @Override
  public int compareTo(ChoiceInquiry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChoiceId()).compareTo(other.isSetChoiceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoiceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceId, other.choiceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSimpleSearchQuery()).compareTo(other.isSetSimpleSearchQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimpleSearchQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simpleSearchQuery, other.simpleSearchQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContextItems()).compareTo(other.isSetContextItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContextItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contextItems, other.contextItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinHitCount()).compareTo(other.isSetMinHitCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinHitCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minHitCount, other.minHitCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExcludeVariantIds()).compareTo(other.isSetExcludeVariantIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExcludeVariantIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excludeVariantIds, other.excludeVariantIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScope()).compareTo(other.isSetScope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithRelaxation()).compareTo(other.isSetWithRelaxation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithRelaxation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withRelaxation, other.withRelaxation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithSemanticFiltering()).compareTo(other.isSetWithSemanticFiltering());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithSemanticFiltering()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withSemanticFiltering, other.withSemanticFiltering);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChoiceInquiry(");
    boolean first = true;

    sb.append("choiceId:");
    if (this.choiceId == null) {
      sb.append("null");
    } else {
      sb.append(this.choiceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("simpleSearchQuery:");
    if (this.simpleSearchQuery == null) {
      sb.append("null");
    } else {
      sb.append(this.simpleSearchQuery);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contextItems:");
    if (this.contextItems == null) {
      sb.append("null");
    } else {
      sb.append(this.contextItems);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minHitCount:");
    sb.append(this.minHitCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("excludeVariantIds:");
    if (this.excludeVariantIds == null) {
      sb.append("null");
    } else {
      sb.append(this.excludeVariantIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scope:");
    if (this.scope == null) {
      sb.append("null");
    } else {
      sb.append(this.scope);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("withRelaxation:");
    sb.append(this.withRelaxation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("withSemanticFiltering:");
    sb.append(this.withSemanticFiltering);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (simpleSearchQuery != null) {
      simpleSearchQuery.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChoiceInquiryStandardSchemeFactory implements SchemeFactory {
    public ChoiceInquiryStandardScheme getScheme() {
      return new ChoiceInquiryStandardScheme();
    }
  }

  private static class ChoiceInquiryStandardScheme extends StandardScheme<ChoiceInquiry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChoiceInquiry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHOICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.choiceId = iprot.readString();
              struct.setChoiceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SIMPLE_SEARCH_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.simpleSearchQuery = new SimpleSearchQuery();
              struct.simpleSearchQuery.read(iprot);
              struct.setSimpleSearchQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTEXT_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.contextItems = new ArrayList<ContextItem>(_list64.size);
                ContextItem _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = new ContextItem();
                  _elem65.read(iprot);
                  struct.contextItems.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setContextItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIN_HIT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minHitCount = iprot.readI32();
              struct.setMinHitCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXCLUDE_VARIANT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set67 = iprot.readSetBegin();
                struct.excludeVariantIds = new HashSet<String>(2*_set67.size);
                String _elem68;
                for (int _i69 = 0; _i69 < _set67.size; ++_i69)
                {
                  _elem68 = iprot.readString();
                  struct.excludeVariantIds.add(_elem68);
                }
                iprot.readSetEnd();
              }
              struct.setExcludeVariantIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SCOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scope = iprot.readString();
              struct.setScopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // WITH_RELAXATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.withRelaxation = iprot.readBool();
              struct.setWithRelaxationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 80: // WITH_SEMANTIC_FILTERING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.withSemanticFiltering = iprot.readBool();
              struct.setWithSemanticFilteringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChoiceInquiry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.choiceId != null) {
        oprot.writeFieldBegin(CHOICE_ID_FIELD_DESC);
        oprot.writeString(struct.choiceId);
        oprot.writeFieldEnd();
      }
      if (struct.simpleSearchQuery != null) {
        oprot.writeFieldBegin(SIMPLE_SEARCH_QUERY_FIELD_DESC);
        struct.simpleSearchQuery.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.contextItems != null) {
        oprot.writeFieldBegin(CONTEXT_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.contextItems.size()));
          for (ContextItem _iter70 : struct.contextItems)
          {
            _iter70.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_HIT_COUNT_FIELD_DESC);
      oprot.writeI32(struct.minHitCount);
      oprot.writeFieldEnd();
      if (struct.excludeVariantIds != null) {
        oprot.writeFieldBegin(EXCLUDE_VARIANT_IDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.excludeVariantIds.size()));
          for (String _iter71 : struct.excludeVariantIds)
          {
            oprot.writeString(_iter71);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.scope != null) {
        oprot.writeFieldBegin(SCOPE_FIELD_DESC);
        oprot.writeString(struct.scope);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WITH_RELAXATION_FIELD_DESC);
      oprot.writeBool(struct.withRelaxation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_SEMANTIC_FILTERING_FIELD_DESC);
      oprot.writeBool(struct.withSemanticFiltering);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChoiceInquiryTupleSchemeFactory implements SchemeFactory {
    public ChoiceInquiryTupleScheme getScheme() {
      return new ChoiceInquiryTupleScheme();
    }
  }

  private static class ChoiceInquiryTupleScheme extends TupleScheme<ChoiceInquiry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChoiceInquiry struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChoiceId()) {
        optionals.set(0);
      }
      if (struct.isSetSimpleSearchQuery()) {
        optionals.set(1);
      }
      if (struct.isSetContextItems()) {
        optionals.set(2);
      }
      if (struct.isSetMinHitCount()) {
        optionals.set(3);
      }
      if (struct.isSetExcludeVariantIds()) {
        optionals.set(4);
      }
      if (struct.isSetScope()) {
        optionals.set(5);
      }
      if (struct.isSetWithRelaxation()) {
        optionals.set(6);
      }
      if (struct.isSetWithSemanticFiltering()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetChoiceId()) {
        oprot.writeString(struct.choiceId);
      }
      if (struct.isSetSimpleSearchQuery()) {
        struct.simpleSearchQuery.write(oprot);
      }
      if (struct.isSetContextItems()) {
        {
          oprot.writeI32(struct.contextItems.size());
          for (ContextItem _iter72 : struct.contextItems)
          {
            _iter72.write(oprot);
          }
        }
      }
      if (struct.isSetMinHitCount()) {
        oprot.writeI32(struct.minHitCount);
      }
      if (struct.isSetExcludeVariantIds()) {
        {
          oprot.writeI32(struct.excludeVariantIds.size());
          for (String _iter73 : struct.excludeVariantIds)
          {
            oprot.writeString(_iter73);
          }
        }
      }
      if (struct.isSetScope()) {
        oprot.writeString(struct.scope);
      }
      if (struct.isSetWithRelaxation()) {
        oprot.writeBool(struct.withRelaxation);
      }
      if (struct.isSetWithSemanticFiltering()) {
        oprot.writeBool(struct.withSemanticFiltering);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChoiceInquiry struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.choiceId = iprot.readString();
        struct.setChoiceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.simpleSearchQuery = new SimpleSearchQuery();
        struct.simpleSearchQuery.read(iprot);
        struct.setSimpleSearchQueryIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.contextItems = new ArrayList<ContextItem>(_list74.size);
          ContextItem _elem75;
          for (int _i76 = 0; _i76 < _list74.size; ++_i76)
          {
            _elem75 = new ContextItem();
            _elem75.read(iprot);
            struct.contextItems.add(_elem75);
          }
        }
        struct.setContextItemsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.minHitCount = iprot.readI32();
        struct.setMinHitCountIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set77 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.excludeVariantIds = new HashSet<String>(2*_set77.size);
          String _elem78;
          for (int _i79 = 0; _i79 < _set77.size; ++_i79)
          {
            _elem78 = iprot.readString();
            struct.excludeVariantIds.add(_elem78);
          }
        }
        struct.setExcludeVariantIdsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.scope = iprot.readString();
        struct.setScopeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.withRelaxation = iprot.readBool();
        struct.setWithRelaxationIsSet(true);
      }
      if (incoming.get(7)) {
        struct.withSemanticFiltering = iprot.readBool();
        struct.setWithSemanticFilteringIsSet(true);
      }
    }
  }

}

