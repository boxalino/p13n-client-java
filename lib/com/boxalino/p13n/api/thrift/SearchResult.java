/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * <dl>
 * <dt>hits</dt>
 * <dd>list of hits found for given SimpleSearchQuery</dd>
 * 
 * <dt>facetResponses</dt>
 * <dd>list of requested facets or null if none requested</dd>
 * 
 * <dt>totalHitCount</dt>
 * <dd>total number of hits; -1 in case of mixed recommendation strategy</dd>
 * 
 * <dt>queryText</dt>
 * <dd>relaxation query text for relaxation results or requested queryText for a
 * regular SearchResult</dd>
 * 
 * <dt>hitsGroups</dt>
 * <dd>grouped hits; not null when corresponding SimplSearchQuery has
 * groupBy!=null </dd>
 * </dl>
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-25")
public class SearchResult implements org.apache.thrift.TBase<SearchResult, SearchResult._Fields>, java.io.Serializable, Cloneable, Comparable<SearchResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchResult");

  private static final org.apache.thrift.protocol.TField HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("hits", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FACET_RESPONSES_FIELD_DESC = new org.apache.thrift.protocol.TField("facetResponses", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_HIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalHitCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField QUERY_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryText", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField HITS_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hitsGroups", org.apache.thrift.protocol.TType.LIST, (short)50);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SearchResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SearchResultTupleSchemeFactory();

  public java.util.List<Hit> hits; // required
  public java.util.List<FacetResponse> facetResponses; // required
  public long totalHitCount; // required
  public java.lang.String queryText; // required
  public java.util.List<HitsGroup> hitsGroups; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HITS((short)1, "hits"),
    FACET_RESPONSES((short)2, "facetResponses"),
    TOTAL_HIT_COUNT((short)3, "totalHitCount"),
    QUERY_TEXT((short)40, "queryText"),
    HITS_GROUPS((short)50, "hitsGroups");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HITS
          return HITS;
        case 2: // FACET_RESPONSES
          return FACET_RESPONSES;
        case 3: // TOTAL_HIT_COUNT
          return TOTAL_HIT_COUNT;
        case 40: // QUERY_TEXT
          return QUERY_TEXT;
        case 50: // HITS_GROUPS
          return HITS_GROUPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALHITCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HITS, new org.apache.thrift.meta_data.FieldMetaData("hits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Hit.class))));
    tmpMap.put(_Fields.FACET_RESPONSES, new org.apache.thrift.meta_data.FieldMetaData("facetResponses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FacetResponse.class))));
    tmpMap.put(_Fields.TOTAL_HIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalHitCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_TEXT, new org.apache.thrift.meta_data.FieldMetaData("queryText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HITS_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("hitsGroups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HitsGroup.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchResult.class, metaDataMap);
  }

  public SearchResult() {
  }

  public SearchResult(
    java.util.List<Hit> hits,
    java.util.List<FacetResponse> facetResponses,
    long totalHitCount,
    java.lang.String queryText,
    java.util.List<HitsGroup> hitsGroups)
  {
    this();
    this.hits = hits;
    this.facetResponses = facetResponses;
    this.totalHitCount = totalHitCount;
    setTotalHitCountIsSet(true);
    this.queryText = queryText;
    this.hitsGroups = hitsGroups;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchResult(SearchResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHits()) {
      java.util.List<Hit> __this__hits = new java.util.ArrayList<Hit>(other.hits.size());
      for (Hit other_element : other.hits) {
        __this__hits.add(new Hit(other_element));
      }
      this.hits = __this__hits;
    }
    if (other.isSetFacetResponses()) {
      java.util.List<FacetResponse> __this__facetResponses = new java.util.ArrayList<FacetResponse>(other.facetResponses.size());
      for (FacetResponse other_element : other.facetResponses) {
        __this__facetResponses.add(new FacetResponse(other_element));
      }
      this.facetResponses = __this__facetResponses;
    }
    this.totalHitCount = other.totalHitCount;
    if (other.isSetQueryText()) {
      this.queryText = other.queryText;
    }
    if (other.isSetHitsGroups()) {
      java.util.List<HitsGroup> __this__hitsGroups = new java.util.ArrayList<HitsGroup>(other.hitsGroups.size());
      for (HitsGroup other_element : other.hitsGroups) {
        __this__hitsGroups.add(new HitsGroup(other_element));
      }
      this.hitsGroups = __this__hitsGroups;
    }
  }

  public SearchResult deepCopy() {
    return new SearchResult(this);
  }

  @Override
  public void clear() {
    this.hits = null;
    this.facetResponses = null;
    setTotalHitCountIsSet(false);
    this.totalHitCount = 0;
    this.queryText = null;
    this.hitsGroups = null;
  }

  public int getHitsSize() {
    return (this.hits == null) ? 0 : this.hits.size();
  }

  public java.util.Iterator<Hit> getHitsIterator() {
    return (this.hits == null) ? null : this.hits.iterator();
  }

  public void addToHits(Hit elem) {
    if (this.hits == null) {
      this.hits = new java.util.ArrayList<Hit>();
    }
    this.hits.add(elem);
  }

  public java.util.List<Hit> getHits() {
    return this.hits;
  }

  public SearchResult setHits(java.util.List<Hit> hits) {
    this.hits = hits;
    return this;
  }

  public void unsetHits() {
    this.hits = null;
  }

  /** Returns true if field hits is set (has been assigned a value) and false otherwise */
  public boolean isSetHits() {
    return this.hits != null;
  }

  public void setHitsIsSet(boolean value) {
    if (!value) {
      this.hits = null;
    }
  }

  public int getFacetResponsesSize() {
    return (this.facetResponses == null) ? 0 : this.facetResponses.size();
  }

  public java.util.Iterator<FacetResponse> getFacetResponsesIterator() {
    return (this.facetResponses == null) ? null : this.facetResponses.iterator();
  }

  public void addToFacetResponses(FacetResponse elem) {
    if (this.facetResponses == null) {
      this.facetResponses = new java.util.ArrayList<FacetResponse>();
    }
    this.facetResponses.add(elem);
  }

  public java.util.List<FacetResponse> getFacetResponses() {
    return this.facetResponses;
  }

  public SearchResult setFacetResponses(java.util.List<FacetResponse> facetResponses) {
    this.facetResponses = facetResponses;
    return this;
  }

  public void unsetFacetResponses() {
    this.facetResponses = null;
  }

  /** Returns true if field facetResponses is set (has been assigned a value) and false otherwise */
  public boolean isSetFacetResponses() {
    return this.facetResponses != null;
  }

  public void setFacetResponsesIsSet(boolean value) {
    if (!value) {
      this.facetResponses = null;
    }
  }

  public long getTotalHitCount() {
    return this.totalHitCount;
  }

  public SearchResult setTotalHitCount(long totalHitCount) {
    this.totalHitCount = totalHitCount;
    setTotalHitCountIsSet(true);
    return this;
  }

  public void unsetTotalHitCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALHITCOUNT_ISSET_ID);
  }

  /** Returns true if field totalHitCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalHitCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALHITCOUNT_ISSET_ID);
  }

  public void setTotalHitCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALHITCOUNT_ISSET_ID, value);
  }

  public java.lang.String getQueryText() {
    return this.queryText;
  }

  public SearchResult setQueryText(java.lang.String queryText) {
    this.queryText = queryText;
    return this;
  }

  public void unsetQueryText() {
    this.queryText = null;
  }

  /** Returns true if field queryText is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryText() {
    return this.queryText != null;
  }

  public void setQueryTextIsSet(boolean value) {
    if (!value) {
      this.queryText = null;
    }
  }

  public int getHitsGroupsSize() {
    return (this.hitsGroups == null) ? 0 : this.hitsGroups.size();
  }

  public java.util.Iterator<HitsGroup> getHitsGroupsIterator() {
    return (this.hitsGroups == null) ? null : this.hitsGroups.iterator();
  }

  public void addToHitsGroups(HitsGroup elem) {
    if (this.hitsGroups == null) {
      this.hitsGroups = new java.util.ArrayList<HitsGroup>();
    }
    this.hitsGroups.add(elem);
  }

  public java.util.List<HitsGroup> getHitsGroups() {
    return this.hitsGroups;
  }

  public SearchResult setHitsGroups(java.util.List<HitsGroup> hitsGroups) {
    this.hitsGroups = hitsGroups;
    return this;
  }

  public void unsetHitsGroups() {
    this.hitsGroups = null;
  }

  /** Returns true if field hitsGroups is set (has been assigned a value) and false otherwise */
  public boolean isSetHitsGroups() {
    return this.hitsGroups != null;
  }

  public void setHitsGroupsIsSet(boolean value) {
    if (!value) {
      this.hitsGroups = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case HITS:
      if (value == null) {
        unsetHits();
      } else {
        setHits((java.util.List<Hit>)value);
      }
      break;

    case FACET_RESPONSES:
      if (value == null) {
        unsetFacetResponses();
      } else {
        setFacetResponses((java.util.List<FacetResponse>)value);
      }
      break;

    case TOTAL_HIT_COUNT:
      if (value == null) {
        unsetTotalHitCount();
      } else {
        setTotalHitCount((java.lang.Long)value);
      }
      break;

    case QUERY_TEXT:
      if (value == null) {
        unsetQueryText();
      } else {
        setQueryText((java.lang.String)value);
      }
      break;

    case HITS_GROUPS:
      if (value == null) {
        unsetHitsGroups();
      } else {
        setHitsGroups((java.util.List<HitsGroup>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HITS:
      return getHits();

    case FACET_RESPONSES:
      return getFacetResponses();

    case TOTAL_HIT_COUNT:
      return getTotalHitCount();

    case QUERY_TEXT:
      return getQueryText();

    case HITS_GROUPS:
      return getHitsGroups();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HITS:
      return isSetHits();
    case FACET_RESPONSES:
      return isSetFacetResponses();
    case TOTAL_HIT_COUNT:
      return isSetTotalHitCount();
    case QUERY_TEXT:
      return isSetQueryText();
    case HITS_GROUPS:
      return isSetHitsGroups();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchResult)
      return this.equals((SearchResult)that);
    return false;
  }

  public boolean equals(SearchResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hits = true && this.isSetHits();
    boolean that_present_hits = true && that.isSetHits();
    if (this_present_hits || that_present_hits) {
      if (!(this_present_hits && that_present_hits))
        return false;
      if (!this.hits.equals(that.hits))
        return false;
    }

    boolean this_present_facetResponses = true && this.isSetFacetResponses();
    boolean that_present_facetResponses = true && that.isSetFacetResponses();
    if (this_present_facetResponses || that_present_facetResponses) {
      if (!(this_present_facetResponses && that_present_facetResponses))
        return false;
      if (!this.facetResponses.equals(that.facetResponses))
        return false;
    }

    boolean this_present_totalHitCount = true;
    boolean that_present_totalHitCount = true;
    if (this_present_totalHitCount || that_present_totalHitCount) {
      if (!(this_present_totalHitCount && that_present_totalHitCount))
        return false;
      if (this.totalHitCount != that.totalHitCount)
        return false;
    }

    boolean this_present_queryText = true && this.isSetQueryText();
    boolean that_present_queryText = true && that.isSetQueryText();
    if (this_present_queryText || that_present_queryText) {
      if (!(this_present_queryText && that_present_queryText))
        return false;
      if (!this.queryText.equals(that.queryText))
        return false;
    }

    boolean this_present_hitsGroups = true && this.isSetHitsGroups();
    boolean that_present_hitsGroups = true && that.isSetHitsGroups();
    if (this_present_hitsGroups || that_present_hitsGroups) {
      if (!(this_present_hitsGroups && that_present_hitsGroups))
        return false;
      if (!this.hitsGroups.equals(that.hitsGroups))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHits()) ? 131071 : 524287);
    if (isSetHits())
      hashCode = hashCode * 8191 + hits.hashCode();

    hashCode = hashCode * 8191 + ((isSetFacetResponses()) ? 131071 : 524287);
    if (isSetFacetResponses())
      hashCode = hashCode * 8191 + facetResponses.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalHitCount);

    hashCode = hashCode * 8191 + ((isSetQueryText()) ? 131071 : 524287);
    if (isSetQueryText())
      hashCode = hashCode * 8191 + queryText.hashCode();

    hashCode = hashCode * 8191 + ((isSetHitsGroups()) ? 131071 : 524287);
    if (isSetHitsGroups())
      hashCode = hashCode * 8191 + hitsGroups.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SearchResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetHits()).compareTo(other.isSetHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hits, other.hits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFacetResponses()).compareTo(other.isSetFacetResponses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacetResponses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facetResponses, other.facetResponses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalHitCount()).compareTo(other.isSetTotalHitCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalHitCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalHitCount, other.totalHitCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQueryText()).compareTo(other.isSetQueryText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryText, other.queryText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHitsGroups()).compareTo(other.isSetHitsGroups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHitsGroups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hitsGroups, other.hitsGroups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SearchResult(");
    boolean first = true;

    sb.append("hits:");
    if (this.hits == null) {
      sb.append("null");
    } else {
      sb.append(this.hits);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("facetResponses:");
    if (this.facetResponses == null) {
      sb.append("null");
    } else {
      sb.append(this.facetResponses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalHitCount:");
    sb.append(this.totalHitCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryText:");
    if (this.queryText == null) {
      sb.append("null");
    } else {
      sb.append(this.queryText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hitsGroups:");
    if (this.hitsGroups == null) {
      sb.append("null");
    } else {
      sb.append(this.hitsGroups);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SearchResultStandardScheme getScheme() {
      return new SearchResultStandardScheme();
    }
  }

  private static class SearchResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<SearchResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HITS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                struct.hits = new java.util.ArrayList<Hit>(_list168.size);
                Hit _elem169;
                for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                {
                  _elem169 = new Hit();
                  _elem169.read(iprot);
                  struct.hits.add(_elem169);
                }
                iprot.readListEnd();
              }
              struct.setHitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FACET_RESPONSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list171 = iprot.readListBegin();
                struct.facetResponses = new java.util.ArrayList<FacetResponse>(_list171.size);
                FacetResponse _elem172;
                for (int _i173 = 0; _i173 < _list171.size; ++_i173)
                {
                  _elem172 = new FacetResponse();
                  _elem172.read(iprot);
                  struct.facetResponses.add(_elem172);
                }
                iprot.readListEnd();
              }
              struct.setFacetResponsesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_HIT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalHitCount = iprot.readI64();
              struct.setTotalHitCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // QUERY_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryText = iprot.readString();
              struct.setQueryTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // HITS_GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list174 = iprot.readListBegin();
                struct.hitsGroups = new java.util.ArrayList<HitsGroup>(_list174.size);
                HitsGroup _elem175;
                for (int _i176 = 0; _i176 < _list174.size; ++_i176)
                {
                  _elem175 = new HitsGroup();
                  _elem175.read(iprot);
                  struct.hitsGroups.add(_elem175);
                }
                iprot.readListEnd();
              }
              struct.setHitsGroupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hits != null) {
        oprot.writeFieldBegin(HITS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hits.size()));
          for (Hit _iter177 : struct.hits)
          {
            _iter177.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.facetResponses != null) {
        oprot.writeFieldBegin(FACET_RESPONSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.facetResponses.size()));
          for (FacetResponse _iter178 : struct.facetResponses)
          {
            _iter178.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_HIT_COUNT_FIELD_DESC);
      oprot.writeI64(struct.totalHitCount);
      oprot.writeFieldEnd();
      if (struct.queryText != null) {
        oprot.writeFieldBegin(QUERY_TEXT_FIELD_DESC);
        oprot.writeString(struct.queryText);
        oprot.writeFieldEnd();
      }
      if (struct.hitsGroups != null) {
        oprot.writeFieldBegin(HITS_GROUPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hitsGroups.size()));
          for (HitsGroup _iter179 : struct.hitsGroups)
          {
            _iter179.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SearchResultTupleScheme getScheme() {
      return new SearchResultTupleScheme();
    }
  }

  private static class SearchResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<SearchResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHits()) {
        optionals.set(0);
      }
      if (struct.isSetFacetResponses()) {
        optionals.set(1);
      }
      if (struct.isSetTotalHitCount()) {
        optionals.set(2);
      }
      if (struct.isSetQueryText()) {
        optionals.set(3);
      }
      if (struct.isSetHitsGroups()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetHits()) {
        {
          oprot.writeI32(struct.hits.size());
          for (Hit _iter180 : struct.hits)
          {
            _iter180.write(oprot);
          }
        }
      }
      if (struct.isSetFacetResponses()) {
        {
          oprot.writeI32(struct.facetResponses.size());
          for (FacetResponse _iter181 : struct.facetResponses)
          {
            _iter181.write(oprot);
          }
        }
      }
      if (struct.isSetTotalHitCount()) {
        oprot.writeI64(struct.totalHitCount);
      }
      if (struct.isSetQueryText()) {
        oprot.writeString(struct.queryText);
      }
      if (struct.isSetHitsGroups()) {
        {
          oprot.writeI32(struct.hitsGroups.size());
          for (HitsGroup _iter182 : struct.hitsGroups)
          {
            _iter182.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list183 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.hits = new java.util.ArrayList<Hit>(_list183.size);
          Hit _elem184;
          for (int _i185 = 0; _i185 < _list183.size; ++_i185)
          {
            _elem184 = new Hit();
            _elem184.read(iprot);
            struct.hits.add(_elem184);
          }
        }
        struct.setHitsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list186 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.facetResponses = new java.util.ArrayList<FacetResponse>(_list186.size);
          FacetResponse _elem187;
          for (int _i188 = 0; _i188 < _list186.size; ++_i188)
          {
            _elem187 = new FacetResponse();
            _elem187.read(iprot);
            struct.facetResponses.add(_elem187);
          }
        }
        struct.setFacetResponsesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalHitCount = iprot.readI64();
        struct.setTotalHitCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.queryText = iprot.readString();
        struct.setQueryTextIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.hitsGroups = new java.util.ArrayList<HitsGroup>(_list189.size);
          HitsGroup _elem190;
          for (int _i191 = 0; _i191 < _list189.size; ++_i191)
          {
            _elem190 = new HitsGroup();
            _elem190.read(iprot);
            struct.hitsGroups.add(_elem190);
          }
        }
        struct.setHitsGroupsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

