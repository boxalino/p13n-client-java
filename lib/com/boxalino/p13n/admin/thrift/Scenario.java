/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.admin.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Scenario implements org.apache.thrift.TBase<Scenario, Scenario._Fields>, java.io.Serializable, Cloneable, Comparable<Scenario> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Scenario");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LOCALIZED_TITLES_FIELD_DESC = new org.apache.thrift.protocol.TField("localizedTitles", org.apache.thrift.protocol.TType.MAP, (short)21);
  private static final org.apache.thrift.protocol.TField QUERY_P13N_SCRIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryP13nScript", org.apache.thrift.protocol.TType.STRING, (short)31);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ScenarioStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ScenarioTupleSchemeFactory());
  }

  public String id; // required
  public Map<String,String> localizedTitles; // required
  public String queryP13nScript; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)11, "id"),
    LOCALIZED_TITLES((short)21, "localizedTitles"),
    QUERY_P13N_SCRIPT((short)31, "queryP13nScript");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 11: // ID
          return ID;
        case 21: // LOCALIZED_TITLES
          return LOCALIZED_TITLES;
        case 31: // QUERY_P13N_SCRIPT
          return QUERY_P13N_SCRIPT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALIZED_TITLES, new org.apache.thrift.meta_data.FieldMetaData("localizedTitles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.QUERY_P13N_SCRIPT, new org.apache.thrift.meta_data.FieldMetaData("queryP13nScript", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Scenario.class, metaDataMap);
  }

  public Scenario() {
  }

  public Scenario(
    String id,
    Map<String,String> localizedTitles,
    String queryP13nScript)
  {
    this();
    this.id = id;
    this.localizedTitles = localizedTitles;
    this.queryP13nScript = queryP13nScript;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Scenario(Scenario other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetLocalizedTitles()) {
      Map<String,String> __this__localizedTitles = new HashMap<String,String>(other.localizedTitles);
      this.localizedTitles = __this__localizedTitles;
    }
    if (other.isSetQueryP13nScript()) {
      this.queryP13nScript = other.queryP13nScript;
    }
  }

  public Scenario deepCopy() {
    return new Scenario(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.localizedTitles = null;
    this.queryP13nScript = null;
  }

  public String getId() {
    return this.id;
  }

  public Scenario setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getLocalizedTitlesSize() {
    return (this.localizedTitles == null) ? 0 : this.localizedTitles.size();
  }

  public void putToLocalizedTitles(String key, String val) {
    if (this.localizedTitles == null) {
      this.localizedTitles = new HashMap<String,String>();
    }
    this.localizedTitles.put(key, val);
  }

  public Map<String,String> getLocalizedTitles() {
    return this.localizedTitles;
  }

  public Scenario setLocalizedTitles(Map<String,String> localizedTitles) {
    this.localizedTitles = localizedTitles;
    return this;
  }

  public void unsetLocalizedTitles() {
    this.localizedTitles = null;
  }

  /** Returns true if field localizedTitles is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalizedTitles() {
    return this.localizedTitles != null;
  }

  public void setLocalizedTitlesIsSet(boolean value) {
    if (!value) {
      this.localizedTitles = null;
    }
  }

  public String getQueryP13nScript() {
    return this.queryP13nScript;
  }

  public Scenario setQueryP13nScript(String queryP13nScript) {
    this.queryP13nScript = queryP13nScript;
    return this;
  }

  public void unsetQueryP13nScript() {
    this.queryP13nScript = null;
  }

  /** Returns true if field queryP13nScript is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryP13nScript() {
    return this.queryP13nScript != null;
  }

  public void setQueryP13nScriptIsSet(boolean value) {
    if (!value) {
      this.queryP13nScript = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case LOCALIZED_TITLES:
      if (value == null) {
        unsetLocalizedTitles();
      } else {
        setLocalizedTitles((Map<String,String>)value);
      }
      break;

    case QUERY_P13N_SCRIPT:
      if (value == null) {
        unsetQueryP13nScript();
      } else {
        setQueryP13nScript((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case LOCALIZED_TITLES:
      return getLocalizedTitles();

    case QUERY_P13N_SCRIPT:
      return getQueryP13nScript();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LOCALIZED_TITLES:
      return isSetLocalizedTitles();
    case QUERY_P13N_SCRIPT:
      return isSetQueryP13nScript();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Scenario)
      return this.equals((Scenario)that);
    return false;
  }

  public boolean equals(Scenario that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_localizedTitles = true && this.isSetLocalizedTitles();
    boolean that_present_localizedTitles = true && that.isSetLocalizedTitles();
    if (this_present_localizedTitles || that_present_localizedTitles) {
      if (!(this_present_localizedTitles && that_present_localizedTitles))
        return false;
      if (!this.localizedTitles.equals(that.localizedTitles))
        return false;
    }

    boolean this_present_queryP13nScript = true && this.isSetQueryP13nScript();
    boolean that_present_queryP13nScript = true && that.isSetQueryP13nScript();
    if (this_present_queryP13nScript || that_present_queryP13nScript) {
      if (!(this_present_queryP13nScript && that_present_queryP13nScript))
        return false;
      if (!this.queryP13nScript.equals(that.queryP13nScript))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Scenario other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalizedTitles()).compareTo(other.isSetLocalizedTitles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalizedTitles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localizedTitles, other.localizedTitles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryP13nScript()).compareTo(other.isSetQueryP13nScript());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryP13nScript()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryP13nScript, other.queryP13nScript);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Scenario(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("localizedTitles:");
    if (this.localizedTitles == null) {
      sb.append("null");
    } else {
      sb.append(this.localizedTitles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryP13nScript:");
    if (this.queryP13nScript == null) {
      sb.append("null");
    } else {
      sb.append(this.queryP13nScript);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ScenarioStandardSchemeFactory implements SchemeFactory {
    public ScenarioStandardScheme getScheme() {
      return new ScenarioStandardScheme();
    }
  }

  private static class ScenarioStandardScheme extends StandardScheme<Scenario> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Scenario struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 11: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LOCALIZED_TITLES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                struct.localizedTitles = new HashMap<String,String>(2*_map20.size);
                for (int _i21 = 0; _i21 < _map20.size; ++_i21)
                {
                  String _key22;
                  String _val23;
                  _key22 = iprot.readString();
                  _val23 = iprot.readString();
                  struct.localizedTitles.put(_key22, _val23);
                }
                iprot.readMapEnd();
              }
              struct.setLocalizedTitlesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // QUERY_P13N_SCRIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryP13nScript = iprot.readString();
              struct.setQueryP13nScriptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Scenario struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.localizedTitles != null) {
        oprot.writeFieldBegin(LOCALIZED_TITLES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.localizedTitles.size()));
          for (Map.Entry<String, String> _iter24 : struct.localizedTitles.entrySet())
          {
            oprot.writeString(_iter24.getKey());
            oprot.writeString(_iter24.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.queryP13nScript != null) {
        oprot.writeFieldBegin(QUERY_P13N_SCRIPT_FIELD_DESC);
        oprot.writeString(struct.queryP13nScript);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ScenarioTupleSchemeFactory implements SchemeFactory {
    public ScenarioTupleScheme getScheme() {
      return new ScenarioTupleScheme();
    }
  }

  private static class ScenarioTupleScheme extends TupleScheme<Scenario> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Scenario struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetLocalizedTitles()) {
        optionals.set(1);
      }
      if (struct.isSetQueryP13nScript()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetLocalizedTitles()) {
        {
          oprot.writeI32(struct.localizedTitles.size());
          for (Map.Entry<String, String> _iter25 : struct.localizedTitles.entrySet())
          {
            oprot.writeString(_iter25.getKey());
            oprot.writeString(_iter25.getValue());
          }
        }
      }
      if (struct.isSetQueryP13nScript()) {
        oprot.writeString(struct.queryP13nScript);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Scenario struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.localizedTitles = new HashMap<String,String>(2*_map26.size);
          for (int _i27 = 0; _i27 < _map26.size; ++_i27)
          {
            String _key28;
            String _val29;
            _key28 = iprot.readString();
            _val29 = iprot.readString();
            struct.localizedTitles.put(_key28, _val29);
          }
        }
        struct.setLocalizedTitlesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.queryP13nScript = iprot.readString();
        struct.setQueryP13nScriptIsSet(true);
      }
    }
  }

}

