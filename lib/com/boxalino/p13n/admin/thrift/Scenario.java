/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.admin.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-25")
public class Scenario implements org.apache.thrift.TBase<Scenario, Scenario._Fields>, java.io.Serializable, Cloneable, Comparable<Scenario> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Scenario");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LOCALIZED_TITLES_FIELD_DESC = new org.apache.thrift.protocol.TField("localizedTitles", org.apache.thrift.protocol.TType.MAP, (short)21);
  private static final org.apache.thrift.protocol.TField QUERY_P13N_SCRIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryP13nScript", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField MIN_HIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("minHitCount", org.apache.thrift.protocol.TType.I32, (short)41);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ScenarioStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ScenarioTupleSchemeFactory();

  public java.lang.String id; // required
  public java.util.Map<java.lang.String,java.lang.String> localizedTitles; // required
  public java.lang.String queryP13nScript; // required
  public int minHitCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)11, "id"),
    LOCALIZED_TITLES((short)21, "localizedTitles"),
    QUERY_P13N_SCRIPT((short)31, "queryP13nScript"),
    MIN_HIT_COUNT((short)41, "minHitCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 11: // ID
          return ID;
        case 21: // LOCALIZED_TITLES
          return LOCALIZED_TITLES;
        case 31: // QUERY_P13N_SCRIPT
          return QUERY_P13N_SCRIPT;
        case 41: // MIN_HIT_COUNT
          return MIN_HIT_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MINHITCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MIN_HIT_COUNT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALIZED_TITLES, new org.apache.thrift.meta_data.FieldMetaData("localizedTitles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.QUERY_P13N_SCRIPT, new org.apache.thrift.meta_data.FieldMetaData("queryP13nScript", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN_HIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("minHitCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Scenario.class, metaDataMap);
  }

  public Scenario() {
  }

  public Scenario(
    java.lang.String id,
    java.util.Map<java.lang.String,java.lang.String> localizedTitles,
    java.lang.String queryP13nScript)
  {
    this();
    this.id = id;
    this.localizedTitles = localizedTitles;
    this.queryP13nScript = queryP13nScript;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Scenario(Scenario other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetLocalizedTitles()) {
      java.util.Map<java.lang.String,java.lang.String> __this__localizedTitles = new java.util.HashMap<java.lang.String,java.lang.String>(other.localizedTitles);
      this.localizedTitles = __this__localizedTitles;
    }
    if (other.isSetQueryP13nScript()) {
      this.queryP13nScript = other.queryP13nScript;
    }
    this.minHitCount = other.minHitCount;
  }

  public Scenario deepCopy() {
    return new Scenario(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.localizedTitles = null;
    this.queryP13nScript = null;
    setMinHitCountIsSet(false);
    this.minHitCount = 0;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public Scenario setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getLocalizedTitlesSize() {
    return (this.localizedTitles == null) ? 0 : this.localizedTitles.size();
  }

  public void putToLocalizedTitles(java.lang.String key, java.lang.String val) {
    if (this.localizedTitles == null) {
      this.localizedTitles = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.localizedTitles.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getLocalizedTitles() {
    return this.localizedTitles;
  }

  public Scenario setLocalizedTitles(java.util.Map<java.lang.String,java.lang.String> localizedTitles) {
    this.localizedTitles = localizedTitles;
    return this;
  }

  public void unsetLocalizedTitles() {
    this.localizedTitles = null;
  }

  /** Returns true if field localizedTitles is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalizedTitles() {
    return this.localizedTitles != null;
  }

  public void setLocalizedTitlesIsSet(boolean value) {
    if (!value) {
      this.localizedTitles = null;
    }
  }

  public java.lang.String getQueryP13nScript() {
    return this.queryP13nScript;
  }

  public Scenario setQueryP13nScript(java.lang.String queryP13nScript) {
    this.queryP13nScript = queryP13nScript;
    return this;
  }

  public void unsetQueryP13nScript() {
    this.queryP13nScript = null;
  }

  /** Returns true if field queryP13nScript is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryP13nScript() {
    return this.queryP13nScript != null;
  }

  public void setQueryP13nScriptIsSet(boolean value) {
    if (!value) {
      this.queryP13nScript = null;
    }
  }

  public int getMinHitCount() {
    return this.minHitCount;
  }

  public Scenario setMinHitCount(int minHitCount) {
    this.minHitCount = minHitCount;
    setMinHitCountIsSet(true);
    return this;
  }

  public void unsetMinHitCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINHITCOUNT_ISSET_ID);
  }

  /** Returns true if field minHitCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMinHitCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINHITCOUNT_ISSET_ID);
  }

  public void setMinHitCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINHITCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case LOCALIZED_TITLES:
      if (value == null) {
        unsetLocalizedTitles();
      } else {
        setLocalizedTitles((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case QUERY_P13N_SCRIPT:
      if (value == null) {
        unsetQueryP13nScript();
      } else {
        setQueryP13nScript((java.lang.String)value);
      }
      break;

    case MIN_HIT_COUNT:
      if (value == null) {
        unsetMinHitCount();
      } else {
        setMinHitCount((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case LOCALIZED_TITLES:
      return getLocalizedTitles();

    case QUERY_P13N_SCRIPT:
      return getQueryP13nScript();

    case MIN_HIT_COUNT:
      return getMinHitCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LOCALIZED_TITLES:
      return isSetLocalizedTitles();
    case QUERY_P13N_SCRIPT:
      return isSetQueryP13nScript();
    case MIN_HIT_COUNT:
      return isSetMinHitCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Scenario)
      return this.equals((Scenario)that);
    return false;
  }

  public boolean equals(Scenario that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_localizedTitles = true && this.isSetLocalizedTitles();
    boolean that_present_localizedTitles = true && that.isSetLocalizedTitles();
    if (this_present_localizedTitles || that_present_localizedTitles) {
      if (!(this_present_localizedTitles && that_present_localizedTitles))
        return false;
      if (!this.localizedTitles.equals(that.localizedTitles))
        return false;
    }

    boolean this_present_queryP13nScript = true && this.isSetQueryP13nScript();
    boolean that_present_queryP13nScript = true && that.isSetQueryP13nScript();
    if (this_present_queryP13nScript || that_present_queryP13nScript) {
      if (!(this_present_queryP13nScript && that_present_queryP13nScript))
        return false;
      if (!this.queryP13nScript.equals(that.queryP13nScript))
        return false;
    }

    boolean this_present_minHitCount = true && this.isSetMinHitCount();
    boolean that_present_minHitCount = true && that.isSetMinHitCount();
    if (this_present_minHitCount || that_present_minHitCount) {
      if (!(this_present_minHitCount && that_present_minHitCount))
        return false;
      if (this.minHitCount != that.minHitCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocalizedTitles()) ? 131071 : 524287);
    if (isSetLocalizedTitles())
      hashCode = hashCode * 8191 + localizedTitles.hashCode();

    hashCode = hashCode * 8191 + ((isSetQueryP13nScript()) ? 131071 : 524287);
    if (isSetQueryP13nScript())
      hashCode = hashCode * 8191 + queryP13nScript.hashCode();

    hashCode = hashCode * 8191 + ((isSetMinHitCount()) ? 131071 : 524287);
    if (isSetMinHitCount())
      hashCode = hashCode * 8191 + minHitCount;

    return hashCode;
  }

  @Override
  public int compareTo(Scenario other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocalizedTitles()).compareTo(other.isSetLocalizedTitles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalizedTitles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localizedTitles, other.localizedTitles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQueryP13nScript()).compareTo(other.isSetQueryP13nScript());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryP13nScript()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryP13nScript, other.queryP13nScript);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMinHitCount()).compareTo(other.isSetMinHitCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinHitCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minHitCount, other.minHitCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Scenario(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("localizedTitles:");
    if (this.localizedTitles == null) {
      sb.append("null");
    } else {
      sb.append(this.localizedTitles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryP13nScript:");
    if (this.queryP13nScript == null) {
      sb.append("null");
    } else {
      sb.append(this.queryP13nScript);
    }
    first = false;
    if (isSetMinHitCount()) {
      if (!first) sb.append(", ");
      sb.append("minHitCount:");
      sb.append(this.minHitCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ScenarioStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ScenarioStandardScheme getScheme() {
      return new ScenarioStandardScheme();
    }
  }

  private static class ScenarioStandardScheme extends org.apache.thrift.scheme.StandardScheme<Scenario> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Scenario struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 11: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LOCALIZED_TITLES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                struct.localizedTitles = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map20.size);
                java.lang.String _key21;
                java.lang.String _val22;
                for (int _i23 = 0; _i23 < _map20.size; ++_i23)
                {
                  _key21 = iprot.readString();
                  _val22 = iprot.readString();
                  struct.localizedTitles.put(_key21, _val22);
                }
                iprot.readMapEnd();
              }
              struct.setLocalizedTitlesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // QUERY_P13N_SCRIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryP13nScript = iprot.readString();
              struct.setQueryP13nScriptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // MIN_HIT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minHitCount = iprot.readI32();
              struct.setMinHitCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Scenario struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.localizedTitles != null) {
        oprot.writeFieldBegin(LOCALIZED_TITLES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.localizedTitles.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter24 : struct.localizedTitles.entrySet())
          {
            oprot.writeString(_iter24.getKey());
            oprot.writeString(_iter24.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.queryP13nScript != null) {
        oprot.writeFieldBegin(QUERY_P13N_SCRIPT_FIELD_DESC);
        oprot.writeString(struct.queryP13nScript);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinHitCount()) {
        oprot.writeFieldBegin(MIN_HIT_COUNT_FIELD_DESC);
        oprot.writeI32(struct.minHitCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ScenarioTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ScenarioTupleScheme getScheme() {
      return new ScenarioTupleScheme();
    }
  }

  private static class ScenarioTupleScheme extends org.apache.thrift.scheme.TupleScheme<Scenario> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Scenario struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetLocalizedTitles()) {
        optionals.set(1);
      }
      if (struct.isSetQueryP13nScript()) {
        optionals.set(2);
      }
      if (struct.isSetMinHitCount()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetLocalizedTitles()) {
        {
          oprot.writeI32(struct.localizedTitles.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter25 : struct.localizedTitles.entrySet())
          {
            oprot.writeString(_iter25.getKey());
            oprot.writeString(_iter25.getValue());
          }
        }
      }
      if (struct.isSetQueryP13nScript()) {
        oprot.writeString(struct.queryP13nScript);
      }
      if (struct.isSetMinHitCount()) {
        oprot.writeI32(struct.minHitCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Scenario struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.localizedTitles = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map26.size);
          java.lang.String _key27;
          java.lang.String _val28;
          for (int _i29 = 0; _i29 < _map26.size; ++_i29)
          {
            _key27 = iprot.readString();
            _val28 = iprot.readString();
            struct.localizedTitles.put(_key27, _val28);
          }
        }
        struct.setLocalizedTitlesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.queryP13nScript = iprot.readString();
        struct.setQueryP13nScriptIsSet(true);
      }
      if (incoming.get(3)) {
        struct.minHitCount = iprot.readI32();
        struct.setMinHitCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

